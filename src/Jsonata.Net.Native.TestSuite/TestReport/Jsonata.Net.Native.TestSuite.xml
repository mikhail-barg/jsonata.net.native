<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-run id="0" name="Jsonata.Net.Native.TestSuite.dll" fullname="C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\bin\Release\net8.0\Jsonata.Net.Native.TestSuite.dll" runstate="Runnable" testcasecount="1611" result="Failed" total="1611" passed="1254" failed="220" inconclusive="0" skipped="137" asserts="1157" engine-version="3.12.0.0" clr-version="8.0.11" start-time="2025-01-14 17:31:16Z" end-time="2025-01-14 17:31:24Z" duration="7.863235">
  <command-line><![CDATA[C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\bin\Release\net8.0\testhost.dll --port 56680 --endpoint 127.0.0.1:056680 --role client --parentprocessid 7964 --telemetryoptedin true]]></command-line>
  <filter>
    <or>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.closures.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.closures.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comments.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comments.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comments.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comments.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.context.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.context.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.context.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.context.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.encoding.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.encoding.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.encoding.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.encoding.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case031</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case032</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case033</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case034</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case034a</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case035</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case036</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case037</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case038</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case039</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case040</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case041</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case042</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case043</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case044</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case045</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.large[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.large[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-abs.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-abs.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-abs.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-abs.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-ceil.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-ceil.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-ceil.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-ceil.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-each.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-each.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-each.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-floor.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-floor.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-floor.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-floor.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[20]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[21]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[22]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[23]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[24]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[25]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[26]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[27]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[28]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[29]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[30]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[31]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[32]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[33]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[34]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[35]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[36]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[37]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[38]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[39]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[40]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[41]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[42]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[43]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[44]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[45]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[46]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[47]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[48]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[49]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[50]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[51]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[52]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[53]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[54]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[55]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[56]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[57]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[58]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[59]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[60]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[61]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[62]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[63]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[64]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[65]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case031</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case032</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case033</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case034</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case035</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case036</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[20]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[21]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[22]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[23]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[24]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[25]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[26]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[27]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[28]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[29]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[30]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[31]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[32]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[33]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[34]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[35]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[36]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[37]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[38]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[39]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[40]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[41]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[42]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[43]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[44]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[45]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[46]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[47]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[48]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[49]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[50]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[51]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[52]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[53]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[54]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[55]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[56]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[57]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[58]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[59]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[60]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[61]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[62]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[63]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[64]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[65]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[66]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[67]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[68]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[69]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lookup.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lookup.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lookup.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lookup.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lowercase.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lowercase.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-merge.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-merge.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-merge.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-merge.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-merge.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[20]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[21]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[22]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[23]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[24]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[25]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[26]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[27]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[28]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[29]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[30]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[31]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[32]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[33]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[34]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[35]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[36]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[37]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[38]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[39]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[40]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[41]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[42]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[43]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[44]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[45]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[46]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[47]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[48]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[49]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[50]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[51]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[52]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[53]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[54]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[55]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[56]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[57]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[58]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[59]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[60]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[61]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-reverse.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-reverse.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-reverse.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-reverse.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sift.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sift.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sift.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sift.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sift.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case031</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case032</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case033</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case034</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-spread.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-spread.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-spread.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-spread.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[20]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[21]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[22]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[23]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[24]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[25]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[26]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[27]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[28]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[29]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[30]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[31]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[32]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[33]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[34]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[35]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[36]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[37]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[38]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[39]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[40]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[41]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[42]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[43]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[44]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[45]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[46]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-trim.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-trim.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-trim.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-uppercase.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-uppercase.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-filter.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-filter.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-filter.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-filter.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.errors[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.errors[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.errors[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.errors[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.matchers.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.matchers.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[20]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[21]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[22]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[23]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[24]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[25]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[26]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[27]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[28]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.partial-application.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.partial-application.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.partial-application.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.partial-application.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.partial-application.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.predicates.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.predicates.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.predicates.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.predicates.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case031</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case032</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case033</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case034</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case035</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case036</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case037</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case038</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.token-conversion.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.token-conversion.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.token-conversion.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.token-conversion.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case031</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case032</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case033</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case034</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case035</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case036</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case037</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case038</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case039</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case040</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case041</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case042</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case043</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case044</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case045</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case046</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case047</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case048</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case049</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case050</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case051</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case052</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case053</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case054</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case055</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case056</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case057</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case058</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case059</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case060</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case061</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case062</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case063</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case064</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case065</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case066</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case067</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case068</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case069</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case070</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case071</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case072</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case073</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case074</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case075</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case076</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case077</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case078</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case079</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case080</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case081</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case082</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case083</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case084</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case085</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case086</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case087</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case088</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case089</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case090</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case091</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case092</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case093</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case094</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case095</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case096</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case097</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case098</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case099</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case100</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case101</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case102</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case103</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case009</test>
    </or>
  </filter>
  <test-suite type="Assembly" id="0-2613" name="Jsonata.Net.Native.TestSuite.dll" fullname="C:/Dev/VSProjects/jsonata.net.native/src/Jsonata.Net.Native.TestSuite/bin/Release/net8.0/Jsonata.Net.Native.TestSuite.dll" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2025-01-14T17:31:16.9485525Z" end-time="2025-01-14T17:31:24.6138217Z" duration="7.665312" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
    <environment framework-version="3.13.2.0" clr-version="8.0.11" os-version="Microsoft Windows 10.0.26100" platform="Win32NT" cwd="C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\bin\Release\net8.0" machine-name="MIKENB-HONOR16" user="mikha" user-domain="MIKENB-HONOR16" culture="ru-RU" uiculture="en-US" os-architecture="x64" />
    <settings>
      <setting name="SynchronousEvents" value="False" />
      <setting name="RandomSeed" value="1766096316" />
      <setting name="SkipNonTestAssemblies" value="True" />
      <setting name="ProcessModel" value="InProcess" />
      <setting name="DomainUsage" value="Single" />
      <setting name="DefaultTestNamePattern" value="{m}{a}" />
      <setting name="WorkDirectory" value="C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\bin\Release\net8.0" />
      <setting name="NumberOfTestWorkers" value="12" />
    </settings>
    <properties>
      <property name="_PID" value="8920" />
      <property name="_APPDOMAIN" value="testhost" />
    </properties>
    <failure>
      <message><![CDATA[One or more child tests had errors]]></message>
    </failure>
    <test-suite type="TestSuite" id="0-2614" name="Jsonata" fullname="Jsonata" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2025-01-14T17:31:16.9514954Z" end-time="2025-01-14T17:31:24.6138173Z" duration="7.662390" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
      <failure>
        <message><![CDATA[One or more child tests had errors]]></message>
      </failure>
      <test-suite type="TestSuite" id="0-2615" name="Net" fullname="Jsonata.Net" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2025-01-14T17:31:16.9517290Z" end-time="2025-01-14T17:31:24.6138114Z" duration="7.662151" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
        <failure>
          <message><![CDATA[One or more child tests had errors]]></message>
        </failure>
        <test-suite type="TestSuite" id="0-2616" name="Native" fullname="Jsonata.Net.Native" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2025-01-14T17:31:16.9517429Z" end-time="2025-01-14T17:31:24.6138076Z" duration="7.662134" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
          <failure>
            <message><![CDATA[One or more child tests had errors]]></message>
          </failure>
          <test-suite type="TestSuite" id="0-2617" name="TestSuite" fullname="Jsonata.Net.Native.TestSuite" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2025-01-14T17:31:16.9517483Z" end-time="2025-01-14T17:31:24.6138023Z" duration="7.662123" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="TestFixture" id="0-1000" name="Tests" fullname="Jsonata.Net.Native.TestSuite.Tests" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2025-01-14T17:31:16.9528460Z" end-time="2025-01-14T17:31:24.6137798Z" duration="7.661003" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <output><![CDATA[Loaded 27 datasets
]]></output>
              <test-suite type="ParameterizedMethod" id="0-2612" name="Test" fullname="Jsonata.Net.Native.TestSuite.Tests.Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2025-01-14T17:31:17.1427756Z" end-time="2025-01-14T17:31:24.6125454Z" duration="7.469837" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1156">
                <failure>
                  <message><![CDATA[One or more child tests had errors]]></message>
                </failure>
                <test-case id="0-1001" name="array-constructor.array-sequences[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1149807075" result="Passed" start-time="2025-01-14T17:31:17.1428717Z" end-time="2025-01-14T17:31:17.3220248Z" duration="0.179218" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds][]';&#xA; result: [[3,1578381600],[5,1578381700]]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds][]'
Result: '[[3,1578381600],[5,1578381700]]'
Expected: '[[3,1578381600],[5,1578381700]]'
]]></output>
                </test-case>
                <test-case id="0-1002" name="array-constructor.array-sequences[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="663741618" result="Passed" start-time="2025-01-14T17:31:17.3231715Z" end-time="2025-01-14T17:31:17.3234939Z" duration="0.000322" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds][]';&#xA; result: [[3,1578381600]]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds][]'
Result: '[[3,1578381600]]'
Expected: '[[3,1578381600]]'
]]></output>
                </test-case>
                <test-case id="0-1003" name="array-constructor.array-sequences[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="630807215" result="Passed" start-time="2025-01-14T17:31:17.3235091Z" end-time="2025-01-14T17:31:17.3235992Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds]';&#xA; result: [3,1578381600]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds]'
Result: '[3,1578381600]'
Expected: '[3,1578381600]'
]]></output>
                </test-case>
                <test-case id="0-1004" name="array-constructor.array-sequences[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1891849747" result="Passed" start-time="2025-01-14T17:31:17.3236074Z" end-time="2025-01-14T17:31:17.3244187Z" duration="0.000811" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'singleArray';&#xA; result: [{&quot;foo&quot;:&quot;bar&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'singleArray'
Result: '[{"foo":"bar"}]'
Expected: '[{"foo":"bar"}]'
]]></output>
                </test-case>
                <test-case id="0-1005" name="array-constructor.array-sequences[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1157185737" result="Passed" start-time="2025-01-14T17:31:17.3244341Z" end-time="2025-01-14T17:31:17.3245690Z" duration="0.000135" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'singleArray[]';&#xA; result: [{&quot;foo&quot;:&quot;bar&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'singleArray[]'
Result: '[{"foo":"bar"}]'
Expected: '[{"foo":"bar"}]'
]]></output>
                </test-case>
                <test-case id="0-1006" name="array-constructor.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1095105253" result="Passed" start-time="2025-01-14T17:31:17.3245784Z" end-time="2025-01-14T17:31:17.3249282Z" duration="0.000350" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[]';&#xA; result: []" />
                  </properties>
                  <output><![CDATA[Expr is '[]'
Result: '[]'
Expected: '[]'
]]></output>
                </test-case>
                <test-case id="0-1007" name="array-constructor.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="498118053" result="Passed" start-time="2025-01-14T17:31:17.3249383Z" end-time="2025-01-14T17:31:17.3254273Z" duration="0.000489" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1]';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '[1]'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1008" name="array-constructor.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="179648394" result="Passed" start-time="2025-01-14T17:31:17.3254372Z" end-time="2025-01-14T17:31:17.3255453Z" duration="0.000108" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2]';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2]'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-1009" name="array-constructor.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="942622718" result="Passed" start-time="2025-01-14T17:31:17.3255531Z" end-time="2025-01-14T17:31:17.3256480Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2,3]';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2,3]'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1010" name="array-constructor.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1007687054" result="Passed" start-time="2025-01-14T17:31:17.3256562Z" end-time="2025-01-14T17:31:17.3257526Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, [3, 4]]';&#xA; result: [1,2,[3,4]]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, [3, 4]]'
Result: '[1,2,[3,4]]'
Expected: '[1,2,[3,4]]'
]]></output>
                </test-case>
                <test-case id="0-1011" name="array-constructor.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="428108337" result="Passed" start-time="2025-01-14T17:31:17.3257615Z" end-time="2025-01-14T17:31:17.3268823Z" duration="0.001121" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, &quot;two&quot;, [&quot;three&quot;, 4]]';&#xA; result: [1,&quot;two&quot;,[&quot;three&quot;,4]]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, "two", ["three", 4]]'
Result: '[1,"two",["three",4]]'
Expected: '[1,"two",["three",4]]'
]]></output>
                </test-case>
                <test-case id="0-1012" name="array-constructor.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2110250120" result="Passed" start-time="2025-01-14T17:31:17.3268955Z" end-time="2025-01-14T17:31:17.3270801Z" duration="0.000185" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, $two, [&quot;three&quot;, $four]]';&#xA; result: [1,2,[&quot;three&quot;,&quot;four&quot;]]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, $two, ["three", $four]]'
Result: '[1,2,["three","four"]]'
Expected: '[1,2,["three","four"]]'
]]></output>
                </test-case>
                <test-case id="0-1013" name="array-constructor.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1978448654" result="Passed" start-time="2025-01-14T17:31:17.3270900Z" end-time="2025-01-14T17:31:17.3273362Z" duration="0.000247" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[&quot;foo.bar&quot;, foo.bar, [&quot;foo.baz&quot;, foo.blah.baz]]';&#xA; result: [&quot;foo.bar&quot;,42,[&quot;foo.baz&quot;,{&quot;fud&quot;:&quot;hello&quot;},{&quot;fud&quot;:&quot;world&quot;}]]" />
                  </properties>
                  <output><![CDATA[Expr is '["foo.bar", foo.bar, ["foo.baz", foo.blah.baz]]'
Result: '["foo.bar",42,["foo.baz",{"fud":"hello"},{"fud":"world"}]]'
Expected: '["foo.bar",42,["foo.baz",{"fud":"hello"},{"fud":"world"}]]'
]]></output>
                </test-case>
                <test-case id="0-1014" name="array-constructor.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1171385399" result="Passed" start-time="2025-01-14T17:31:17.3273529Z" end-time="2025-01-14T17:31:17.3282248Z" duration="0.000872" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, 3][0]';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, 3][0]'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1015" name="array-constructor.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="399251353" result="Passed" start-time="2025-01-14T17:31:17.3282362Z" end-time="2025-01-14T17:31:17.3285075Z" duration="0.000271" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, [3, 4]][-1]';&#xA; result: [3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, [3, 4]][-1]'
Result: '[3,4]'
Expected: '[3,4]'
]]></output>
                </test-case>
                <test-case id="0-1016" name="array-constructor.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1176205135" result="Passed" start-time="2025-01-14T17:31:17.3285173Z" end-time="2025-01-14T17:31:17.3286194Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, [3, 4]][-1][-1]';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, [3, 4]][-1][-1]'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1017" name="array-constructor.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1529939185" result="Passed" start-time="2025-01-14T17:31:17.3286273Z" end-time="2025-01-14T17:31:17.3287247Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz.[fud, fud]';&#xA; result: [[&quot;hello&quot;,&quot;hello&quot;],[&quot;world&quot;,&quot;world&quot;]]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz.[fud, fud]'
Result: '[["hello","hello"],["world","world"]]'
Expected: '[["hello","hello"],["world","world"]]'
]]></output>
                </test-case>
                <test-case id="0-1018" name="array-constructor.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="64026840" result="Passed" start-time="2025-01-14T17:31:17.3287448Z" end-time="2025-01-14T17:31:17.3288452Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz.[[fud, fud]]';&#xA; result: [[[&quot;hello&quot;,&quot;hello&quot;]],[[&quot;world&quot;,&quot;world&quot;]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz.[[fud, fud]]'
Result: '[[["hello","hello"]],[["world","world"]]]'
Expected: '[[["hello","hello"]],[["world","world"]]]'
]]></output>
                </test-case>
                <test-case id="0-1019" name="array-constructor.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="987318854" result="Passed" start-time="2025-01-14T17:31:17.3288533Z" end-time="2025-01-14T17:31:17.3289436Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.[baz].fud';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.[baz].fud'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1020" name="array-constructor.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1977824497" result="Passed" start-time="2025-01-14T17:31:17.3289512Z" end-time="2025-01-14T17:31:17.3290376Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.[baz, buz].fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.[baz, buz].fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1021" name="array-constructor.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="254871354" result="Passed" start-time="2025-01-14T17:31:17.3290449Z" end-time="2025-01-14T17:31:17.3292882Z" duration="0.000243" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[Address, Other.&quot;Alternative.Address&quot;].City';&#xA; result: [&quot;Winchester&quot;,&quot;London&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '[Address, Other."Alternative.Address"].City'
Result: '["Winchester","London"]'
Expected: '["Winchester","London"]'
]]></output>
                </test-case>
                <test-case id="0-1022" name="array-constructor.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="331042777" result="Passed" start-time="2025-01-14T17:31:17.3292979Z" end-time="2025-01-14T17:31:17.3295561Z" duration="0.000258" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[Address, Other.`Alternative.Address`].City';&#xA; result: [&quot;Winchester&quot;,&quot;London&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '[Address, Other.`Alternative.Address`].City'
Result: '["Winchester","London"]'
Expected: '["Winchester","London"]'
]]></output>
                </test-case>
                <test-case id="0-1023" name="array-constructor.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1360902347" result="Passed" start-time="2025-01-14T17:31:17.3295660Z" end-time="2025-01-14T17:31:17.3312094Z" duration="0.001644" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[0,1,2,3,4,5,6,7,8,9][$ % 2 = 0]';&#xA; result: [0,2,4,6,8]" />
                  </properties>
                  <output><![CDATA[Expr is '[0,1,2,3,4,5,6,7,8,9][$ % 2 = 0]'
Result: '[0,2,4,6,8]'
Expected: '[0,2,4,6,8]'
]]></output>
                </test-case>
                <test-case id="0-1024" name="array-constructor.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1739182221" result="Passed" start-time="2025-01-14T17:31:17.3312211Z" end-time="2025-01-14T17:31:17.3313603Z" duration="0.000139" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, 3].$';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, 3].$'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1025" name="array-constructor.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="84825542" result="Passed" start-time="2025-01-14T17:31:17.3313700Z" end-time="2025-01-14T17:31:17.3314513Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, 3].$';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, 3].$'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1026" name="array-constructor.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="802707703" result="Passed" start-time="2025-01-14T17:31:17.3314584Z" end-time="2025-01-14T17:31:17.3315328Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, 3].$';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, 3].$'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1027" name="blocks.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1056713959" result="Passed" start-time="2025-01-14T17:31:17.3315403Z" end-time="2025-01-14T17:31:17.3319685Z" duration="0.000428" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '()';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '()'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1028" name="blocks.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1210710241" result="Passed" start-time="2025-01-14T17:31:17.3319873Z" end-time="2025-01-14T17:31:17.3320914Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(1; 2; 3)';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '(1; 2; 3)'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1029" name="blocks.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2095773242" result="Passed" start-time="2025-01-14T17:31:17.3321059Z" end-time="2025-01-14T17:31:17.3322160Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(1; 2; 3;)';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '(1; 2; 3;)'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1030" name="blocks.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="768842154" result="Passed" start-time="2025-01-14T17:31:17.3322307Z" end-time="2025-01-14T17:31:17.3325012Z" duration="0.000271" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($a:=1; $b:=2; $c:=($a:=4; $a+$b); $a+$c)';&#xA; result: 7" />
                  </properties>
                  <output><![CDATA[Expr is '($a:=1; $b:=2; $c:=($a:=4; $a+$b); $a+$c)'
Result: '7'
Expected: '7'
]]></output>
                </test-case>
                <test-case id="0-1031" name="blocks.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="351761744" result="Passed" start-time="2025-01-14T17:31:17.3325129Z" end-time="2025-01-14T17:31:17.3334061Z" duration="0.000894" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.($var1 := Price ; $var2:=Quantity; $var1 * $var2)';&#xA; result: [68.9,21.67,137.8,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.($var1 := Price ; $var2:=Quantity; $var1 * $var2)'
Result: '[68.9,21.67,137.8,107.99]'
Expected: '[68.9,21.67,137.8,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1032" name="blocks.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2094243040" result="Passed" start-time="2025-01-14T17:31:17.3334260Z" end-time="2025-01-14T17:31:17.3483426Z" duration="0.014918" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $func := function($arg) {$arg.Account.Order[0].OrderID};  $func($))';&#xA; result: &quot;order103&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(  $func := function($arg) {$arg.Account.Order[0].OrderID};  $func($))'
Result: '"order103"'
Expected: '"order103"'
]]></output>
                </test-case>
                <test-case id="0-1033" name="blocks.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1585685677" result="Passed" start-time="2025-01-14T17:31:17.3483793Z" end-time="2025-01-14T17:31:17.3485924Z" duration="0.000213" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $func := function($arg) {$arg.Account.Order[0]};  $func($).OrderID)';&#xA; result: &quot;order103&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(  $func := function($arg) {$arg.Account.Order[0]};  $func($).OrderID)'
Result: '"order103"'
Expected: '"order103"'
]]></output>
                </test-case>
                <test-case id="0-1034" name="boolean-expresssions.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1061711754" result="Passed" start-time="2025-01-14T17:31:17.3486055Z" end-time="2025-01-14T17:31:17.3488257Z" duration="0.000220" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'true'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1035" name="boolean-expresssions.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1610565718" result="Passed" start-time="2025-01-14T17:31:17.3488357Z" end-time="2025-01-14T17:31:17.3489005Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1036" name="boolean-expresssions.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1250452825" result="Passed" start-time="2025-01-14T17:31:17.3489070Z" end-time="2025-01-14T17:31:17.3492513Z" duration="0.000345" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false or false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false or false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1037" name="boolean-expresssions.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1692866358" result="Passed" start-time="2025-01-14T17:31:17.3492615Z" end-time="2025-01-14T17:31:17.3493492Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false or true';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'false or true'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1038" name="boolean-expresssions.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="52393992" result="Passed" start-time="2025-01-14T17:31:17.3493578Z" end-time="2025-01-14T17:31:17.3494174Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true or false';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'true or false'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1039" name="boolean-expresssions.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2082345317" result="Passed" start-time="2025-01-14T17:31:17.3494240Z" end-time="2025-01-14T17:31:17.3494782Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true or true';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'true or true'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1040" name="boolean-expresssions.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="451370541" result="Passed" start-time="2025-01-14T17:31:17.3494849Z" end-time="2025-01-14T17:31:17.3495366Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false and false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false and false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1041" name="boolean-expresssions.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="457484618" result="Passed" start-time="2025-01-14T17:31:17.3495427Z" end-time="2025-01-14T17:31:17.3495957Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false and true';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false and true'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1042" name="boolean-expresssions.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="78345944" result="Passed" start-time="2025-01-14T17:31:17.3496023Z" end-time="2025-01-14T17:31:17.3496550Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true and false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'true and false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1043" name="boolean-expresssions.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1084060752" result="Passed" start-time="2025-01-14T17:31:17.3496614Z" end-time="2025-01-14T17:31:17.3497120Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true and true';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'true and true'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1044" name="boolean-expresssions.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1715606030" result="Passed" start-time="2025-01-14T17:31:17.3497181Z" end-time="2025-01-14T17:31:17.3511371Z" duration="0.001419" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$not(false)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$not(false)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1045" name="boolean-expresssions.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1507537134" result="Passed" start-time="2025-01-14T17:31:17.3511482Z" end-time="2025-01-14T17:31:17.3513084Z" duration="0.000160" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$not(true)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$not(true)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1046" name="boolean-expresssions.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1512968163" result="Passed" start-time="2025-01-14T17:31:17.3513185Z" end-time="2025-01-14T17:31:17.3513941Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'and=1 and or=2';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'and=1 and or=2'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1047" name="boolean-expresssions.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="953855487" result="Passed" start-time="2025-01-14T17:31:17.3514015Z" end-time="2025-01-14T17:31:17.3515523Z" duration="0.000151" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'and&gt;1 or or&lt;=2';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'and>1 or or<=2'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1048" name="boolean-expresssions.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1836369348" result="Passed" start-time="2025-01-14T17:31:17.3515641Z" end-time="2025-01-14T17:31:17.3516333Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'and&gt;1 or or!=2';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'and>1 or or!=2'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1049" name="boolean-expresssions.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="994677921" result="Passed" start-time="2025-01-14T17:31:17.3516405Z" end-time="2025-01-14T17:31:17.3516934Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'and and and';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'and and and'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1050" name="boolean-expresssions.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="413176764" result="Passed" start-time="2025-01-14T17:31:17.3517017Z" end-time="2025-01-14T17:31:17.3518118Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[].content.origin.$lowercase(name)';&#xA; result: [&quot;fakeintegrationname&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$[].content.origin.$lowercase(name)'
Result: '["fakeintegrationname"]'
Expected: '["fakeintegrationname"]'
]]></output>
                </test-case>
                <test-case id="0-1051" name="boolean-expresssions.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1747834666" result="Passed" start-time="2025-01-14T17:31:17.3518210Z" end-time="2025-01-14T17:31:17.3518772Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true or foo';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'true or foo'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1052" name="boolean-expresssions.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="598978011" result="Passed" start-time="2025-01-14T17:31:17.3518834Z" end-time="2025-01-14T17:31:17.3519308Z" duration="0.000048" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo or true';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'foo or true'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1053" name="boolean-expresssions.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1585388761" result="Passed" start-time="2025-01-14T17:31:17.3519367Z" end-time="2025-01-14T17:31:17.3519919Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false or foo';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false or foo'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1054" name="boolean-expresssions.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1991673976" result="Passed" start-time="2025-01-14T17:31:17.3519985Z" end-time="2025-01-14T17:31:17.3520477Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo or false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo or false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1055" name="boolean-expresssions.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2106129332" result="Passed" start-time="2025-01-14T17:31:17.3520539Z" end-time="2025-01-14T17:31:17.3521041Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo or bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo or bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1056" name="boolean-expresssions.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="818764298" result="Passed" start-time="2025-01-14T17:31:17.3521104Z" end-time="2025-01-14T17:31:17.3521556Z" duration="0.000045" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true and foo';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'true and foo'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1057" name="boolean-expresssions.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1450322918" result="Passed" start-time="2025-01-14T17:31:17.3521617Z" end-time="2025-01-14T17:31:17.3522061Z" duration="0.000045" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo and true';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo and true'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1058" name="boolean-expresssions.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1039108641" result="Passed" start-time="2025-01-14T17:31:17.3522118Z" end-time="2025-01-14T17:31:17.3522546Z" duration="0.000043" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false and foo';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false and foo'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1059" name="boolean-expresssions.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1807024205" result="Passed" start-time="2025-01-14T17:31:17.3522624Z" end-time="2025-01-14T17:31:17.3523067Z" duration="0.000044" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo and false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo and false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1060" name="boolean-expresssions.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="354478034" result="Passed" start-time="2025-01-14T17:31:17.3523126Z" end-time="2025-01-14T17:31:17.3523599Z" duration="0.000047" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo and bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo and bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1061" name="boolean-expresssions.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="38391294" result="Passed" start-time="2025-01-14T17:31:17.3523659Z" end-time="2025-01-14T17:31:17.3524198Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$not(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$not(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1062" name="boolean-expresssions.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1434891459" result="Passed" start-time="2025-01-14T17:31:17.3524265Z" end-time="2025-01-14T17:31:17.3524873Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo = '' or $number(foo) = 0';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Description: 'will not evaluate rhs (which would error) because lhs is true'
Expr is 'foo = '' or $number(foo) = 0'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1063" name="boolean-expresssions.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="231358799" result="Passed" start-time="2025-01-14T17:31:17.3524942Z" end-time="2025-01-14T17:31:17.3526392Z" duration="0.000145" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$type(data) = 'number' and data &gt; 10';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Description: 'will not evaluate rhs (which would error) because lhs is false'
Expr is '$type(data) = 'number' and data > 10'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1064" name="boolean-expresssions.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="173780564" result="Passed" start-time="2025-01-14T17:31:17.3526488Z" end-time="2025-01-14T17:31:17.3750963Z" duration="0.022448" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$type(age) = 'number' or $number(age) &gt; 0';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'throws error on right side of boolean expression (for CC of a catch)'
Expr is '$type(age) = 'number' or $number(age) > 0'
]]></output>
                </test-case>
                <test-case id="0-1065" name="closures.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.closures.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="655925310" result="Passed" start-time="2025-01-14T17:31:17.3751237Z" end-time="2025-01-14T17:31:17.3782084Z" duration="0.003085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.(  $AccName := function() { $.&quot;Account Name&quot; };  Order[OrderID = &quot;order104&quot;].Product{    &quot;Account&quot;: $AccName(),    &quot;SKU-&quot; &amp; $string(ProductID): $.&quot;Product Name&quot;  } )';&#xA; result: {&quot;Account&quot;:&quot;Firefly&quot;,&quot;SKU-858383&quot;:&quot;Bowler Hat&quot;,&quot;SKU-345664&quot;:&quot;Cloak&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.(  $AccName := function() { $."Account Name" };  Order[OrderID = "order104"].Product{    "Account": $AccName(),    "SKU-" & $string(ProductID): $."Product Name"  } )'
Result: '{"Account":"Firefly","SKU-858383":"Bowler Hat","SKU-345664":"Cloak"}'
Expected: '{"Account":"Firefly","SKU-858383":"Bowler Hat","SKU-345664":"Cloak"}'
]]></output>
                </test-case>
                <test-case id="0-1066" name="closures.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.closures.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="481348944" result="Passed" start-time="2025-01-14T17:31:17.3782385Z" end-time="2025-01-14T17:31:17.3785524Z" duration="0.000314" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.(  $AccName := function() { `Account Name` };  Order[OrderID = &quot;order104&quot;].Product{    &quot;Account&quot;: $AccName(),    &quot;SKU-&quot; &amp; $string(ProductID): `Product Name`  } )';&#xA; result: {&quot;Account&quot;:&quot;Firefly&quot;,&quot;SKU-858383&quot;:&quot;Bowler Hat&quot;,&quot;SKU-345664&quot;:&quot;Cloak&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.(  $AccName := function() { `Account Name` };  Order[OrderID = "order104"].Product{    "Account": $AccName(),    "SKU-" & $string(ProductID): `Product Name`  } )'
Result: '{"Account":"Firefly","SKU-858383":"Bowler Hat","SKU-345664":"Cloak"}'
Expected: '{"Account":"Firefly","SKU-858383":"Bowler Hat","SKU-345664":"Cloak"}'
]]></output>
                </test-case>
                <test-case id="0-1067" name="comments.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.comments.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="524564443" result="Passed" start-time="2025-01-14T17:31:17.3785646Z" end-time="2025-01-14T17:31:17.3786503Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '/* header comment */&#xD;&#xA;1 + 1&#xD;&#xA;';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '/* header comment */
1 + 1
'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1068" name="comments.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.comments.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="916736900" result="Passed" start-time="2025-01-14T17:31:17.3786577Z" end-time="2025-01-14T17:31:17.3788688Z" duration="0.000211" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring('Hello, world', 0 /* start at index 0 */, 5/*length*/)&#xD;&#xA;';&#xA; result: &quot;Hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring('Hello, world', 0 /* start at index 0 */, 5/*length*/)
'
Result: '"Hello"'
Expected: '"Hello"'
]]></output>
                </test-case>
                <test-case id="0-1069" name="comments.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.comments.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1708303328" result="Passed" start-time="2025-01-14T17:31:17.3788897Z" end-time="2025-01-14T17:31:17.3793250Z" duration="0.000435" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring('Hello, world', 0 /* start at index 0 */, 5/*length*/)&#xD;&#xA;/* trailing comment - no closing tag should trigger an error&#xD;&#xA;';&#xA; result: error S0106" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0106.
Actually thrown S0106.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring('Hello, world', 0 /* start at index 0 */, 5/*length*/)
/* trailing comment - no closing tag should trigger an error
'
]]></output>
                </test-case>
                <test-case id="0-1070" name="comments.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.comments.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1296282175" result="Passed" start-time="2025-01-14T17:31:17.3793512Z" end-time="2025-01-14T17:31:17.3803648Z" duration="0.001014" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '/* An expression to return the square root of a number without using the $sqrt function */&#xD;&#xA;/* Pointless, but demonstrates capability */&#xD;&#xA;&#xD;&#xA;(&#xD;&#xA;  /**&#xD;&#xA;   * Implements the square root function&#xD;&#xA;   * Uses the Newton-Raphson method&#xD;&#xA;   */&#xD;&#xA;  $my_sqrt := function($n) {(&#xD;&#xA;&#xD;&#xA;    $good_enough := function($guess) {&#xD;&#xA;      $abs($guess * $guess - $n) &lt; 0.000000000001&#xD;&#xA;    };&#xD;&#xA;    $improve_guess := function($guess) {&#xD;&#xA;      ($guess + $n / $guess) / 2&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    /* Iterate using a tail-recursive function until convergence */&#xD;&#xA;    $sqrt_iter := function($guess) {&#xD;&#xA;      $good_enough($guess) ? $guess : $sqrt_iter($improve_guess($guess))&#xD;&#xA;    };&#xD;&#xA;    $n &gt;= 0 ? $sqrt_iter(1) : &quot;no complex numbers today&quot;&#xD;&#xA;  )};&#xD;&#xA;  $my_sqrt($$)&#xD;&#xA;)&#xD;&#xA;';&#xA; result: 16" />
                  </properties>
                  <output><![CDATA[Expr is '/* An expression to return the square root of a number without using the $sqrt function */
/* Pointless, but demonstrates capability */

(
  /**
   * Implements the square root function
   * Uses the Newton-Raphson method
   */
  $my_sqrt := function($n) {(

    $good_enough := function($guess) {
      $abs($guess * $guess - $n) < 0.000000000001
    };
    $improve_guess := function($guess) {
      ($guess + $n / $guess) / 2
    };

    /* Iterate using a tail-recursive function until convergence */
    $sqrt_iter := function($guess) {
      $good_enough($guess) ? $guess : $sqrt_iter($improve_guess($guess))
    };
    $n >= 0 ? $sqrt_iter(1) : "no complex numbers today"
  )};
  $my_sqrt($$)
)
'
Result: '16'
Expected: '16'
]]></output>
                </test-case>
                <test-case id="0-1071" name="comparison-operators.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1630822424" result="Passed" start-time="2025-01-14T17:31:17.3803779Z" end-time="2025-01-14T17:31:17.3804537Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3&gt;-3';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '3>-3'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1072" name="comparison-operators.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1477545193" result="Passed" start-time="2025-01-14T17:31:17.3804609Z" end-time="2025-01-14T17:31:17.3805121Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3&gt;3';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '3>3'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1073" name="comparison-operators.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="129165170" result="Passed" start-time="2025-01-14T17:31:17.3805187Z" end-time="2025-01-14T17:31:17.3805671Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3=3';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '3=3'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1074" name="comparison-operators.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="535948313" result="Passed" start-time="2025-01-14T17:31:17.3805733Z" end-time="2025-01-14T17:31:17.3806196Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;3&quot;=&quot;3&quot;';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"3"="3"'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1075" name="comparison-operators.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1520339879" result="Passed" start-time="2025-01-14T17:31:17.3806260Z" end-time="2025-01-14T17:31:17.3806715Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;3&quot;=3';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '"3"=3'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1076" name="comparison-operators.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="176525410" result="Passed" start-time="2025-01-14T17:31:17.3806776Z" end-time="2025-01-14T17:31:17.3807237Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot; = &quot;hello&quot;';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"hello" = "hello"'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1077" name="comparison-operators.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1394465672" result="Passed" start-time="2025-01-14T17:31:17.3807300Z" end-time="2025-01-14T17:31:17.3807882Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot; != &quot;world&quot;';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"hello" != "world"'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1078" name="comparison-operators.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1792779964" result="Passed" start-time="2025-01-14T17:31:17.3807989Z" end-time="2025-01-14T17:31:17.3810428Z" duration="0.000244" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot; &lt; &quot;world&quot;';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"hello" < "world"'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1079" name="comparison-operators.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="231645087" result="Passed" start-time="2025-01-14T17:31:17.3810571Z" end-time="2025-01-14T17:31:17.3814184Z" duration="0.000362" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;32&quot; &lt; 42';&#xA; result: error T2009" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2009.
Actually thrown T2009.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"32" < 42'
]]></output>
                </test-case>
                <test-case id="0-1080" name="comparison-operators.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="719341026" result="Passed" start-time="2025-01-14T17:31:17.3814298Z" end-time="2025-01-14T17:31:17.3818611Z" duration="0.000431" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'null &lt;= &quot;world&quot;';&#xA; result: error T2010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2010.
Actually thrown T2010.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'null <= "world"'
]]></output>
                </test-case>
                <test-case id="0-1081" name="comparison-operators.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1996335863" result="Passed" start-time="2025-01-14T17:31:17.3818754Z" end-time="2025-01-14T17:31:17.3822071Z" duration="0.000332" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '3 &gt;= true';&#xA; result: error T2010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2010.
Actually thrown T2010.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '3 >= true'
]]></output>
                </test-case>
                <test-case id="0-1082" name="comparison-operators.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1367828258" result="Passed" start-time="2025-01-14T17:31:17.3822209Z" end-time="2025-01-14T17:31:17.3823530Z" duration="0.000132" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar &gt; bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar > bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1083" name="comparison-operators.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="216032320" result="Passed" start-time="2025-01-14T17:31:17.3823643Z" end-time="2025-01-14T17:31:17.3824905Z" duration="0.000126" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar &gt;= bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar >= bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1084" name="comparison-operators.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1682596478" result="Passed" start-time="2025-01-14T17:31:17.3825018Z" end-time="2025-01-14T17:31:17.3826302Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar&lt;bar';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar<bar'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1085" name="comparison-operators.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1168491135" result="Passed" start-time="2025-01-14T17:31:17.3826453Z" end-time="2025-01-14T17:31:17.3827220Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar&lt;=bar';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar<=bar'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1086" name="comparison-operators.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1900267380" result="Passed" start-time="2025-01-14T17:31:17.3827300Z" end-time="2025-01-14T17:31:17.3827917Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar&gt;foo.bar';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'bar>foo.bar'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1087" name="comparison-operators.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="508854279" result="Passed" start-time="2025-01-14T17:31:17.3827989Z" end-time="2025-01-14T17:31:17.3828593Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar &lt; foo.bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'bar < foo.bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1088" name="comparison-operators.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1741495348" result="Passed" start-time="2025-01-14T17:31:17.3828662Z" end-time="2025-01-14T17:31:17.3829252Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar = bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar = bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1089" name="comparison-operators.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1103066069" result="Passed" start-time="2025-01-14T17:31:17.3829319Z" end-time="2025-01-14T17:31:17.3829890Z" duration="0.000057" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar!= bar';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar!= bar'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1090" name="comparison-operators.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="791801420" result="Passed" start-time="2025-01-14T17:31:17.3829965Z" end-time="2025-01-14T17:31:17.3830673Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar = foo.bar + 56';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'bar = foo.bar + 56'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1091" name="comparison-operators.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1947613554" result="Passed" start-time="2025-01-14T17:31:17.3830761Z" end-time="2025-01-14T17:31:17.3831417Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar !=foo.bar + 56';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'bar !=foo.bar + 56'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1092" name="comparison-operators.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="653757717" result="Passed" start-time="2025-01-14T17:31:17.3831492Z" end-time="2025-01-14T17:31:17.3832352Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz[fud = &quot;hello&quot;]';&#xA; result: {&quot;fud&quot;:&quot;hello&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz[fud = "hello"]'
Result: '{"fud":"hello"}'
Expected: '{"fud":"hello"}'
]]></output>
                </test-case>
                <test-case id="0-1093" name="comparison-operators.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="392853434" result="Passed" start-time="2025-01-14T17:31:17.3832430Z" end-time="2025-01-14T17:31:17.3833219Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz[fud != &quot;world&quot;]';&#xA; result: {&quot;fud&quot;:&quot;hello&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz[fud != "world"]'
Result: '{"fud":"hello"}'
Expected: '{"fud":"hello"}'
]]></output>
                </test-case>
                <test-case id="0-1094" name="comparison-operators.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1727867283" result="Passed" start-time="2025-01-14T17:31:17.3833293Z" end-time="2025-01-14T17:31:17.3834413Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[Price &gt; 30].Price';&#xA; result: [34.45,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[Price > 30].Price'
Result: '[34.45,34.45,107.99]'
Expected: '[34.45,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1095" name="comparison-operators.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="412979247" result="Passed" start-time="2025-01-14T17:31:17.3834488Z" end-time="2025-01-14T17:31:17.3835484Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price[$&lt;=35]';&#xA; result: [34.45,21.67,34.45]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price[$<=35]'
Result: '[34.45,21.67,34.45]'
Expected: '[34.45,21.67,34.45]'
]]></output>
                </test-case>
                <test-case id="0-1096" name="comparison-operators.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1170076806" result="Passed" start-time="2025-01-14T17:31:17.3835563Z" end-time="2025-01-14T17:31:17.3838008Z" duration="0.000245" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'false &gt; 1';&#xA; result: error T2010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2010.
Actually thrown T2010.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'false > 1'
]]></output>
                </test-case>
                <test-case id="0-1097" name="comparison-operators.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1994470792" result="Passed" start-time="2025-01-14T17:31:17.3838102Z" end-time="2025-01-14T17:31:17.3839922Z" duration="0.000182" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'false &gt; $x';&#xA; result: error T2010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2010.
Actually thrown T2010.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'false > $x'
]]></output>
                </test-case>
                <test-case id="0-1098" name="comparison-operators.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="910280188" result="Passed" start-time="2025-01-14T17:31:17.3840038Z" end-time="2025-01-14T17:31:17.3840618Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3 &gt; $x';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '3 > $x'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1099" name="comparison-operators.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1059680720" result="Passed" start-time="2025-01-14T17:31:17.3840680Z" end-time="2025-01-14T17:31:17.3841149Z" duration="0.000047" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$x &lt;= 'hello'';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$x <= 'hello''
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1100" name="comparison-operators.deep-equals[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1026188190" result="Passed" start-time="2025-01-14T17:31:17.3841209Z" end-time="2025-01-14T17:31:17.3844880Z" duration="0.000367" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3,4] = [1, 2, 3, 4]';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2,3,4] = [1, 2, 3, 4]'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1101" name="comparison-operators.deep-equals[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="988403720" result="Passed" start-time="2025-01-14T17:31:17.3844997Z" end-time="2025-01-14T17:31:17.3845889Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2] != [1, 2]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2] != [1, 2]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1102" name="comparison-operators.deep-equals[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="37118587" result="Passed" start-time="2025-01-14T17:31:17.3845988Z" end-time="2025-01-14T17:31:17.3846767Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2,[3],4] = [1, 2, [3], 4]';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2,[3],4] = [1, 2, [3], 4]'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1103" name="comparison-operators.deep-equals[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="128066020" result="Passed" start-time="2025-01-14T17:31:17.3846842Z" end-time="2025-01-14T17:31:17.3847517Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3,4] = [1, 2, [3], 4]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2,3,4] = [1, 2, [3], 4]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1104" name="comparison-operators.deep-equals[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1845879393" result="Passed" start-time="2025-01-14T17:31:17.3847582Z" end-time="2025-01-14T17:31:17.3848200Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3,4] = [2, 3, 4]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2,3,4] = [2, 3, 4]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1105" name="comparison-operators.deep-equals[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="929837987" result="Passed" start-time="2025-01-14T17:31:17.3848269Z" end-time="2025-01-14T17:31:17.3849064Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'data = [1, 2, 3, 4]';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'data = [1, 2, 3, 4]'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1106" name="comparison-operators.deep-equals[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="270289473" result="Passed" start-time="2025-01-14T17:31:17.3849144Z" end-time="2025-01-14T17:31:17.3850049Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'data[2] = 3';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'data[2] = 3'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1107" name="comparison-operators.deep-equals[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="469812841" result="Passed" start-time="2025-01-14T17:31:17.3850153Z" end-time="2025-01-14T17:31:17.3853353Z" duration="0.000320" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'one': 1, 'two': 2 } = { 'two': 2, 'one': 1 }';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'one': 1, 'two': 2 } = { 'two': 2, 'one': 1 }'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1108" name="comparison-operators.deep-equals[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1049440448" result="Passed" start-time="2025-01-14T17:31:17.3853458Z" end-time="2025-01-14T17:31:17.3854252Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'one': 1, 'two': 2 } = { 'too': 2, 'one': 1 }';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'one': 1, 'two': 2 } = { 'too': 2, 'one': 1 }'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1109" name="comparison-operators.deep-equals[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="471334097" result="Passed" start-time="2025-01-14T17:31:17.3854321Z" end-time="2025-01-14T17:31:17.3854962Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'one': 1, 'two': 3 } = { 'two': 2, 'one': 1 }';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'one': 1, 'two': 3 } = { 'two': 2, 'one': 1 }'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1110" name="comparison-operators.deep-equals[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1929603922" result="Passed" start-time="2025-01-14T17:31:17.3855032Z" end-time="2025-01-14T17:31:17.3855670Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'one': 1, 'two': 2, 'three': 3 } = { 'two': 2, 'one': 1 }';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'one': 1, 'two': 2, 'three': 3 } = { 'two': 2, 'one': 1 }'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1111" name="comparison-operators.deep-equals[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1571782273" result="Passed" start-time="2025-01-14T17:31:17.3855737Z" end-time="2025-01-14T17:31:17.3856283Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'two = 2';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'two = 2'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1112" name="comparison-operators.deep-equals[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1805026601" result="Passed" start-time="2025-01-14T17:31:17.3856349Z" end-time="2025-01-14T17:31:17.3856917Z" duration="0.000057" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'one + one = two';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'one + one = two'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1113" name="comparison-operators.deep-equals[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="807463554" result="Passed" start-time="2025-01-14T17:31:17.3856985Z" end-time="2025-01-14T17:31:17.3857488Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null = null';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'null = null'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1114" name="comparison-operators.deep-equals[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1087683179" result="Passed" start-time="2025-01-14T17:31:17.3857566Z" end-time="2025-01-14T17:31:17.3858099Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null != null';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'null != null'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1115" name="comparison-operators.deep-equals[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="505625818" result="Passed" start-time="2025-01-14T17:31:17.3858190Z" end-time="2025-01-14T17:31:17.3858817Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null = nothing';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'null = nothing'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1116" name="comparison-operators.deep-equals[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="818046683" result="Passed" start-time="2025-01-14T17:31:17.3858889Z" end-time="2025-01-14T17:31:17.3859405Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nothing = nothing';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'nothing = nothing'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1117" name="comparison-operators.deep-equals[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1218859139" result="Passed" start-time="2025-01-14T17:31:17.3859465Z" end-time="2025-01-14T17:31:17.3860471Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0].Description = Account.Order[1].Product[0].Description';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0].Description = Account.Order[1].Product[0].Description'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1118" name="comparison-operators.deep-equals[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="696245968" result="Passed" start-time="2025-01-14T17:31:17.3860546Z" end-time="2025-01-14T17:31:17.3861459Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0] = Account.Order[1].Product[0]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0] = Account.Order[1].Product[0]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1119" name="conditionals.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1152773076" result="Passed" start-time="2025-01-14T17:31:17.3861532Z" end-time="2025-01-14T17:31:17.3862211Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[&quot;Red&quot;[$$=&quot;Bus&quot;], &quot;White&quot;[$$=&quot;Police Car&quot;]][0]';&#xA; result: &quot;Red&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '["Red"[$$="Bus"], "White"[$$="Police Car"]][0]'
Result: '"Red"'
Expected: '"Red"'
]]></output>
                </test-case>
                <test-case id="0-1120" name="conditionals.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="903141577" result="Passed" start-time="2025-01-14T17:31:17.3862279Z" end-time="2025-01-14T17:31:17.3862906Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[&quot;Red&quot;[$$=&quot;Bus&quot;], &quot;White&quot;[$$=&quot;Police Car&quot;]][0]';&#xA; result: &quot;White&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '["Red"[$$="Bus"], "White"[$$="Police Car"]][0]'
Result: '"White"'
Expected: '"White"'
]]></output>
                </test-case>
                <test-case id="0-1121" name="conditionals.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2119978312" result="Passed" start-time="2025-01-14T17:31:17.3862974Z" end-time="2025-01-14T17:31:17.3863575Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[&quot;Red&quot;[$$=&quot;Bus&quot;], &quot;White&quot;[$$=&quot;Police Car&quot;]][0]';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '["Red"[$$="Bus"], "White"[$$="Police Car"]][0]'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1122" name="conditionals.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="930552742" result="Passed" start-time="2025-01-14T17:31:17.3863640Z" end-time="2025-01-14T17:31:17.3866829Z" duration="0.000319" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup({&quot;Bus&quot;: &quot;Red&quot;, &quot;Police Car&quot;: &quot;White&quot;}, $$)';&#xA; result: &quot;Red&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup({"Bus": "Red", "Police Car": "White"}, $$)'
Result: '"Red"'
Expected: '"Red"'
]]></output>
                </test-case>
                <test-case id="0-1123" name="conditionals.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1961154478" result="Passed" start-time="2025-01-14T17:31:17.3866933Z" end-time="2025-01-14T17:31:17.3869546Z" duration="0.000261" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup({&quot;Bus&quot;: &quot;Red&quot;, &quot;Police Car&quot;: &quot;White&quot;}, $$)';&#xA; result: &quot;White&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup({"Bus": "Red", "Police Car": "White"}, $$)'
Result: '"White"'
Expected: '"White"'
]]></output>
                </test-case>
                <test-case id="0-1124" name="conditionals.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="916501908" result="Passed" start-time="2025-01-14T17:31:17.3869656Z" end-time="2025-01-14T17:31:17.3871282Z" duration="0.000163" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup({&quot;Bus&quot;: &quot;Red&quot;, &quot;Police Car&quot;: &quot;White&quot;}, $$)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup({"Bus": "Red", "Police Car": "White"}, $$)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1125" name="conditionals.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1496152268" result="Passed" start-time="2025-01-14T17:31:17.3871411Z" end-time="2025-01-14T17:31:17.3872719Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.(Price &lt; 30 ? &quot;Cheap&quot;)';&#xA; result: &quot;Cheap&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.(Price < 30 ? "Cheap")'
Result: '"Cheap"'
Expected: '"Cheap"'
]]></output>
                </test-case>
                <test-case id="0-1126" name="conditionals.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="977064707" result="Passed" start-time="2025-01-14T17:31:17.3872813Z" end-time="2025-01-14T17:31:17.3873886Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.(Price &lt; 30 ? &quot;Cheap&quot; : &quot;Expensive&quot;)';&#xA; result: [&quot;Expensive&quot;,&quot;Cheap&quot;,&quot;Expensive&quot;,&quot;Expensive&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.(Price < 30 ? "Cheap" : "Expensive")'
Result: '["Expensive","Cheap","Expensive","Expensive"]'
Expected: '["Expensive","Cheap","Expensive","Expensive"]'
]]></output>
                </test-case>
                <test-case id="0-1127" name="conditionals.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1084691759" result="Passed" start-time="2025-01-14T17:31:17.3873973Z" end-time="2025-01-14T17:31:17.3875742Z" duration="0.000177" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.(Price &lt; 30 ? &quot;Cheap&quot; : Price &lt; 100 ? &quot;Expensive&quot; : &quot;Rip off&quot;)';&#xA; result: [&quot;Expensive&quot;,&quot;Cheap&quot;,&quot;Expensive&quot;,&quot;Rip off&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.(Price < 30 ? "Cheap" : Price < 100 ? "Expensive" : "Rip off")'
Result: '["Expensive","Cheap","Expensive","Rip off"]'
Expected: '["Expensive","Cheap","Expensive","Rip off"]'
]]></output>
                </test-case>
                <test-case id="0-1128" name="context.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.context.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="548781534" result="Passed" start-time="2025-01-14T17:31:17.3875870Z" end-time="2025-01-14T17:31:17.3878701Z" duration="0.000283" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number()';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$number()'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-1129" name="context.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.context.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="122969066" result="Passed" start-time="2025-01-14T17:31:17.3878827Z" end-time="2025-01-14T17:31:17.3886852Z" duration="0.000803" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..5].$string()';&#xA; result: [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..5].$string()'
Result: '["1","2","3","4","5"]'
Expected: '["1","2","3","4","5"]'
]]></output>
                </test-case>
                <test-case id="0-1130" name="context.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.context.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="350263073" result="Passed" start-time="2025-01-14T17:31:17.3886995Z" end-time="2025-01-14T17:31:17.3888656Z" duration="0.000166" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..5].(&quot;Item &quot; &amp; $string())';&#xA; result: [&quot;Item 1&quot;,&quot;Item 2&quot;,&quot;Item 3&quot;,&quot;Item 4&quot;,&quot;Item 5&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..5].("Item " & $string())'
Result: '["Item 1","Item 2","Item 3","Item 4","Item 5"]'
Expected: '["Item 1","Item 2","Item 3","Item 4","Item 5"]'
]]></output>
                </test-case>
                <test-case id="0-1131" name="context.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.context.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="329538265" result="Passed" start-time="2025-01-14T17:31:17.3888752Z" end-time="2025-01-14T17:31:17.3895876Z" duration="0.000713" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.&quot;Product Name&quot;.$uppercase().$substringBefore(&quot; &quot;)';&#xA; result: [&quot;BOWLER&quot;,&quot;TRILBY&quot;,&quot;BOWLER&quot;,&quot;CLOAK&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product."Product Name".$uppercase().$substringBefore(" ")'
Result: '["BOWLER","TRILBY","BOWLER","CLOAK"]'
Expected: '["BOWLER","TRILBY","BOWLER","CLOAK"]'
]]></output>
                </test-case>
                <test-case id="0-1132" name="descendent-operator.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="484185484" result="Passed" start-time="2025-01-14T17:31:17.3896041Z" end-time="2025-01-14T17:31:17.3905673Z" duration="0.000964" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.blah';&#xA; result: [{&quot;baz&quot;:{&quot;fud&quot;:&quot;hello&quot;}},{&quot;baz&quot;:{&quot;fud&quot;:&quot;world&quot;}},{&quot;bazz&quot;:&quot;gotcha&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**.blah'
Result: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
Expected: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
]]></output>
                </test-case>
                <test-case id="0-1133" name="descendent-operator.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="733099244" result="Passed" start-time="2025-01-14T17:31:17.3905833Z" end-time="2025-01-14T17:31:17.3907121Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.baz';&#xA; result: [{&quot;fud&quot;:&quot;hello&quot;},{&quot;fud&quot;:&quot;world&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**.baz'
Result: '[{"fud":"hello"},{"fud":"world"}]'
Expected: '[{"fud":"hello"},{"fud":"world"}]'
]]></output>
                </test-case>
                <test-case id="0-1134" name="descendent-operator.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1352940544" result="Passed" start-time="2025-01-14T17:31:17.3907211Z" end-time="2025-01-14T17:31:17.3908064Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1135" name="descendent-operator.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1878420953" result="Passed" start-time="2025-01-14T17:31:17.3908140Z" end-time="2025-01-14T17:31:17.3908944Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;foo&quot;.**.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '"foo".**.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1136" name="descendent-operator.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1959217276" result="Passed" start-time="2025-01-14T17:31:17.3909018Z" end-time="2025-01-14T17:31:17.3909817Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.&quot;fud&quot;';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**."fud"'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1137" name="descendent-operator.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1239762238" result="Passed" start-time="2025-01-14T17:31:17.3910076Z" end-time="2025-01-14T17:31:17.3911172Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;foo&quot;.**.&quot;fud&quot;';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '"foo".**."fud"'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1138" name="descendent-operator.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="517636574" result="Passed" start-time="2025-01-14T17:31:17.3911261Z" end-time="2025-01-14T17:31:17.3939245Z" duration="0.002799" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.**.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.**.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1139" name="descendent-operator.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="752758491" result="Passed" start-time="2025-01-14T17:31:17.3939425Z" end-time="2025-01-14T17:31:17.3941241Z" duration="0.000182" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.*.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**.*.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1140" name="descendent-operator.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="898201662" result="Passed" start-time="2025-01-14T17:31:17.3941357Z" end-time="2025-01-14T17:31:17.3942875Z" duration="0.000152" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.**.Colour';&#xA; result: [&quot;Purple&quot;,&quot;Orange&quot;,&quot;Purple&quot;,&quot;Black&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.**.Colour'
Result: '["Purple","Orange","Purple","Black"]'
Expected: '["Purple","Orange","Purple","Black"]'
]]></output>
                </test-case>
                <test-case id="0-1141" name="descendent-operator.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1430454539" result="Passed" start-time="2025-01-14T17:31:17.3942970Z" end-time="2025-01-14T17:31:17.3943862Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.fud[0]';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**.fud[0]'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1142" name="descendent-operator.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1606897478" result="Passed" start-time="2025-01-14T17:31:17.3943938Z" end-time="2025-01-14T17:31:17.3944913Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.**.fud)[0]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.**.fud)[0]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1143" name="descendent-operator.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1270161251" result="Passed" start-time="2025-01-14T17:31:17.3945015Z" end-time="2025-01-14T17:31:17.3945956Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(**.fud)[0]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(**.fud)[0]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1144" name="descendent-operator.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1320945794" result="Passed" start-time="2025-01-14T17:31:17.3946043Z" end-time="2025-01-14T17:31:17.3947181Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '**.Price';&#xA; result: [34.45,21.67,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is '**.Price'
Result: '[34.45,21.67,34.45,107.99]'
Expected: '[34.45,21.67,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1145" name="descendent-operator.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1367502794" result="Passed" start-time="2025-01-14T17:31:17.3947291Z" end-time="2025-01-14T17:31:17.3948930Z" duration="0.000164" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '**.Price[0]';&#xA; result: [34.45,21.67,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is '**.Price[0]'
Result: '[34.45,21.67,34.45,107.99]'
Expected: '[34.45,21.67,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1146" name="descendent-operator.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="142586953" result="Passed" start-time="2025-01-14T17:31:17.3949031Z" end-time="2025-01-14T17:31:17.3950067Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(**.Price)[0]';&#xA; result: 34.45" />
                  </properties>
                  <output><![CDATA[Expr is '(**.Price)[0]'
Result: '34.45'
Expected: '34.45'
]]></output>
                </test-case>
                <test-case id="0-1147" name="descendent-operator.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1993777810" result="Passed" start-time="2025-01-14T17:31:17.3950144Z" end-time="2025-01-14T17:31:17.3951216Z" duration="0.000108" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.blah.**';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.blah.**'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1148" name="descendent-operator.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1452653902" result="Passed" start-time="2025-01-14T17:31:17.3951315Z" end-time="2025-01-14T17:31:17.3951880Z" duration="0.000057" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '**';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '**'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1149" name="encoding.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.encoding.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1222241465" result="Passed" start-time="2025-01-14T17:31:17.3951943Z" end-time="2025-01-14T17:31:17.3957620Z" duration="0.000568" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$base64encode(&quot;hello:world&quot;)';&#xA; result: &quot;aGVsbG86d29ybGQ=&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$base64encode("hello:world")'
Result: '"aGVsbG86d29ybGQ="'
Expected: '"aGVsbG86d29ybGQ="'
]]></output>
                </test-case>
                <test-case id="0-1150" name="encoding.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.encoding.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1742416211" result="Passed" start-time="2025-01-14T17:31:17.3957755Z" end-time="2025-01-14T17:31:17.3959480Z" duration="0.000173" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$base64encode()';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$base64encode()'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1151" name="encoding.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.encoding.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2098701314" result="Passed" start-time="2025-01-14T17:31:17.3959586Z" end-time="2025-01-14T17:31:17.3962047Z" duration="0.000246" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$base64decode(&quot;aGVsbG86d29ybGQ=&quot;)';&#xA; result: &quot;hello:world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$base64decode("aGVsbG86d29ybGQ=")'
Result: '"hello:world"'
Expected: '"hello:world"'
]]></output>
                </test-case>
                <test-case id="0-1152" name="encoding.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.encoding.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1298224824" result="Passed" start-time="2025-01-14T17:31:17.3962154Z" end-time="2025-01-14T17:31:17.3963234Z" duration="0.000108" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$base64decode()';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$base64decode()'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1153" name="errors.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1904990759" result="Passed" start-time="2025-01-14T17:31:17.3963331Z" end-time="2025-01-14T17:31:17.3967870Z" duration="0.000454" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;s&quot; - 1';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"s" - 1'
]]></output>
                </test-case>
                <test-case id="0-1154" name="errors.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="156539143" result="Passed" start-time="2025-01-14T17:31:17.3967986Z" end-time="2025-01-14T17:31:17.3970637Z" duration="0.000265" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '1 + null';&#xA; result: error T2002" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2002.
Actually thrown T2002.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '1 + null'
]]></output>
                </test-case>
                <test-case id="0-1155" name="errors.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1053693525" result="Passed" start-time="2025-01-14T17:31:17.3970746Z" end-time="2025-01-14T17:31:17.3972863Z" duration="0.000212" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;no closing quote';&#xA; result: error S0101" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0101.
Actually thrown S0101.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"no closing quote'
]]></output>
                </test-case>
                <test-case id="0-1156" name="errors.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="57850978" result="Passed" start-time="2025-01-14T17:31:17.3972994Z" end-time="2025-01-14T17:31:17.3975515Z" duration="0.000252" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '`no closing backtick';&#xA; result: error S0105" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0105.
Actually thrown S0105.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '`no closing backtick'
]]></output>
                </test-case>
                <test-case id="0-1157" name="errors.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="223447756" result="Passed" start-time="2025-01-14T17:31:17.3975625Z" end-time="2025-01-14T17:31:17.3979645Z" duration="0.000402" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '- &quot;s&quot;';&#xA; result: error D1002" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D1002.
Actually thrown D1002.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '- "s"'
]]></output>
                </test-case>
                <test-case id="0-1158" name="errors.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1359047759" result="Passed" start-time="2025-01-14T17:31:17.3979794Z" end-time="2025-01-14T17:31:17.3987927Z" duration="0.000814" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'unknown(function)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'unknown(function)'
]]></output>
                </test-case>
                <test-case id="0-1159" name="errors.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="349727125" result="Passed" start-time="2025-01-14T17:31:17.3988109Z" end-time="2025-01-14T17:31:17.3991108Z" duration="0.000300" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'sum(Account.Order.OrderID)';&#xA; result: error T1005" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1005.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'sum(Account.Order.OrderID)'
]]></output>
                </test-case>
                <test-case id="0-1160" name="errors.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2100256927" result="Passed" start-time="2025-01-14T17:31:17.3991222Z" end-time="2025-01-14T17:31:17.3993711Z" duration="0.000249" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1,2)';&#xA; result: error S0202" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0202.
Actually thrown S0202.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1,2)'
]]></output>
                </test-case>
                <test-case id="0-1161" name="errors.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1333081361" result="Passed" start-time="2025-01-14T17:31:17.3993812Z" end-time="2025-01-14T17:31:17.3995631Z" duration="0.000182" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1:2]';&#xA; result: error S0202" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0202.
Actually thrown S0202.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1:2]'
]]></output>
                </test-case>
                <test-case id="0-1162" name="errors.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2068514954" result="Passed" start-time="2025-01-14T17:31:17.3995729Z" end-time="2025-01-14T17:31:17.3997405Z" duration="0.000168" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;foo&quot;, &quot;o, &quot;rr&quot;)';&#xA; result: error S0202" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0202.
Actually thrown S0202.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("foo", "o, "rr")'
]]></output>
                </test-case>
                <test-case id="0-1163" name="errors.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="926471382" result="Passed" start-time="2025-01-14T17:31:17.3997491Z" end-time="2025-01-14T17:31:17.3999134Z" duration="0.000165" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1!2]';&#xA; result: error S0204" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0204.
Actually thrown S0202.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1!2]'
]]></output>
                </test-case>
                <test-case id="0-1164" name="errors.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="121071024" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:17.3999370Z" end-time="2025-01-14T17:31:17.4074665Z" duration="0.007530" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '@ bar';&#xA; result: error S0211" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '@ bar'
]]></output>
                </test-case>
                <test-case id="0-1165" name="errors.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1600065657" result="Passed" start-time="2025-01-14T17:31:17.4075555Z" end-time="2025-01-14T17:31:17.4078967Z" duration="0.000341" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '2(blah)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '2(blah)'
]]></output>
                </test-case>
                <test-case id="0-1166" name="errors.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1087596789" result="Passed" start-time="2025-01-14T17:31:17.4079097Z" end-time="2025-01-14T17:31:17.4081126Z" duration="0.000203" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '2()';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '2()'
]]></output>
                </test-case>
                <test-case id="0-1167" name="errors.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1071927357" result="Passed" start-time="2025-01-14T17:31:17.4081225Z" end-time="2025-01-14T17:31:17.4089241Z" duration="0.000802" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '3(?)';&#xA; result: error T1008" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1008.
Actually thrown T1008.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '3(?)'
]]></output>
                </test-case>
                <test-case id="0-1168" name="errors.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1602006657" result="Passed" start-time="2025-01-14T17:31:17.4089377Z" end-time="2025-01-14T17:31:17.4091444Z" duration="0.000207" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '1=';&#xA; result: error S0207" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0207.
Actually thrown S0207.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '1='
]]></output>
                </test-case>
                <test-case id="0-1169" name="errors.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1356745873" result="Passed" start-time="2025-01-14T17:31:17.4091544Z" end-time="2025-01-14T17:31:17.4093706Z" duration="0.000216" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'function(x){$x}(3)';&#xA; result: error S0208" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0208.
Actually thrown ????.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'function(x){$x}(3)'
]]></output>
                </test-case>
                <test-case id="0-1170" name="errors.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="693892189" result="Passed" start-time="2025-01-14T17:31:17.4093814Z" end-time="2025-01-14T17:31:17.4095526Z" duration="0.000171" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'x:=1';&#xA; result: error S0212" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0212.
Actually thrown S0212.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'x:=1'
]]></output>
                </test-case>
                <test-case id="0-1171" name="errors.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1725768092" result="Passed" start-time="2025-01-14T17:31:17.4095617Z" end-time="2025-01-14T17:31:17.4097183Z" duration="0.000157" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '2:=1';&#xA; result: error S0212" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0212.
Actually thrown S0212.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '2:=1'
]]></output>
                </test-case>
                <test-case id="0-1172" name="errors.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="701222565" result="Passed" start-time="2025-01-14T17:31:17.4097270Z" end-time="2025-01-14T17:31:17.4099804Z" duration="0.000254" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$foo()';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$foo()'
]]></output>
                </test-case>
                <test-case id="0-1173" name="errors.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2090971124" result="Passed" start-time="2025-01-14T17:31:17.4099932Z" end-time="2025-01-14T17:31:17.4102665Z" duration="0.000274" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '55=&gt;5';&#xA; result: error S0211" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0211.
Actually thrown S0211.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '55=>5'
]]></output>
                </test-case>
                <test-case id="0-1174" name="errors.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="254571414" result="Passed" start-time="2025-01-14T17:31:17.4102789Z" end-time="2025-01-14T17:31:17.4105376Z" duration="0.000259" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Ssum(:)';&#xA; result: error S0211" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0211.
Actually thrown S0211.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Ssum(:)'
]]></output>
                </test-case>
                <test-case id="0-1175" name="errors.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1620170685" result="Passed" start-time="2025-01-14T17:31:17.4105507Z" end-time="2025-01-14T17:31:17.4107840Z" duration="0.000234" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3]{&quot;num&quot;: $}[true]';&#xA; result: error S0209" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0209.
Actually thrown S0209.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1,2,3]{"num": $}[true]'
]]></output>
                </test-case>
                <test-case id="0-1176" name="errors.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="513080834" result="Passed" start-time="2025-01-14T17:31:17.4107951Z" end-time="2025-01-14T17:31:17.4110122Z" duration="0.000217" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3]{&quot;num&quot;: $}{&quot;num&quot;: $}';&#xA; result: error S0210" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0210.
Actually thrown S0210.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1,2,3]{"num": $}{"num": $}'
]]></output>
                </test-case>
                <test-case id="0-1177" name="errors.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1807875138" result="Passed" start-time="2025-01-14T17:31:17.4110338Z" end-time="2025-01-14T17:31:17.4133331Z" duration="0.002300" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product;';&#xA; result: error S0201" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0201.
Actually thrown S0201.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order[0].Product;'
]]></output>
                </test-case>
                <test-case id="0-1178" name="errors.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="640208684" result="Passed" start-time="2025-01-14T17:31:17.4133579Z" end-time="2025-01-14T17:31:17.4138052Z" duration="0.000448" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $A := function(){$min(2, 3)}; $A() )';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '( $A := function(){$min(2, 3)}; $A() )'
]]></output>
                </test-case>
                <test-case id="0-1179" name="errors.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1696482761" result="Passed" start-time="2025-01-14T17:31:17.4138174Z" end-time="2025-01-14T17:31:17.4139603Z" duration="0.000143" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $B := function(){''}; $A := function(){2 + $B()}; $A() )';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '( $B := function(){''}; $A := function(){2 + $B()}; $A() )'
]]></output>
                </test-case>
                <test-case id="0-1180" name="fields.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1353565315" result="Passed" start-time="2025-01-14T17:31:17.4139687Z" end-time="2025-01-14T17:31:17.4140512Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar';&#xA; result: 42" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar'
Result: '42'
Expected: '42'
]]></output>
                </test-case>
                <test-case id="0-1181" name="fields.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1130770544" result="Passed" start-time="2025-01-14T17:31:17.4140584Z" end-time="2025-01-14T17:31:17.4141553Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah';&#xA; result: [{&quot;baz&quot;:{&quot;fud&quot;:&quot;hello&quot;}},{&quot;baz&quot;:{&quot;fud&quot;:&quot;world&quot;}},{&quot;bazz&quot;:&quot;gotcha&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah'
Result: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
Expected: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
]]></output>
                </test-case>
                <test-case id="0-1182" name="fields.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1779521504" result="Passed" start-time="2025-01-14T17:31:17.4141627Z" end-time="2025-01-14T17:31:17.4142319Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.bazz';&#xA; result: &quot;gotcha&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.bazz'
Result: '"gotcha"'
Expected: '"gotcha"'
]]></output>
                </test-case>
                <test-case id="0-1183" name="fields.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1474023716" result="Passed" start-time="2025-01-14T17:31:17.4142392Z" end-time="2025-01-14T17:31:17.4143172Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz';&#xA; result: [{&quot;fud&quot;:&quot;hello&quot;},{&quot;fud&quot;:&quot;world&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz'
Result: '[{"fud":"hello"},{"fud":"world"}]'
Expected: '[{"fud":"hello"},{"fud":"world"}]'
]]></output>
                </test-case>
                <test-case id="0-1184" name="fields.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="528036502" result="Passed" start-time="2025-01-14T17:31:17.4143248Z" end-time="2025-01-14T17:31:17.4143990Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1185" name="fields.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="399045406" result="Passed" start-time="2025-01-14T17:31:17.4144060Z" end-time="2025-01-14T17:31:17.4144738Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Other.Misc';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is 'Other.Misc'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-1186" name="fields.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1178797088" result="Passed" start-time="2025-01-14T17:31:17.4144803Z" end-time="2025-01-14T17:31:17.4145413Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bazz';&#xA; result: &quot;gotcha&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'bazz'
Result: '"gotcha"'
Expected: '"gotcha"'
]]></output>
                </test-case>
                <test-case id="0-1187" name="fields.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="726678372" result="Passed" start-time="2025-01-14T17:31:17.4145478Z" end-time="2025-01-14T17:31:17.4146132Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1188" name="flattening.array-inputs[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="576560101" result="Passed" start-time="2025-01-14T17:31:17.4146197Z" end-time="2025-01-14T17:31:17.4146953Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'phone';&#xA; result: [{&quot;number&quot;:0},{&quot;number&quot;:1},{&quot;number&quot;:2}]" />
                  </properties>
                  <output><![CDATA[Expr is 'phone'
Result: '[{"number":0},{"number":1},{"number":2}]'
Expected: '[{"number":0},{"number":1},{"number":2}]'
]]></output>
                </test-case>
                <test-case id="0-1189" name="flattening.array-inputs[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="299247019" result="Passed" start-time="2025-01-14T17:31:17.4147024Z" end-time="2025-01-14T17:31:17.4147765Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'phone[0]';&#xA; result: {&quot;number&quot;:0}" />
                  </properties>
                  <output><![CDATA[Expr is 'phone[0]'
Result: '{"number":0}'
Expected: '{"number":0}'
]]></output>
                </test-case>
                <test-case id="0-1190" name="flattening.array-inputs[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1820569975" result="Passed" start-time="2025-01-14T17:31:17.4147836Z" end-time="2025-01-14T17:31:17.4148570Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'phone[0][]';&#xA; result: [{&quot;number&quot;:0}]" />
                  </properties>
                  <output><![CDATA[Expr is 'phone[0][]'
Result: '[{"number":0}]'
Expected: '[{"number":0}]'
]]></output>
                </test-case>
                <test-case id="0-1191" name="flattening.array-inputs[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1735769520" result="Passed" start-time="2025-01-14T17:31:17.4148649Z" end-time="2025-01-14T17:31:17.4149322Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'phone[0].number';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is 'phone[0].number'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1192" name="flattening.array-inputs[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2028198126" result="Passed" start-time="2025-01-14T17:31:17.4149387Z" end-time="2025-01-14T17:31:17.4150049Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(phone)[0].number';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '(phone)[0].number'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1193" name="flattening.array-inputs[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="167909449" result="Passed" start-time="2025-01-14T17:31:17.4150114Z" end-time="2025-01-14T17:31:17.4151042Z" duration="0.000093" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.phone[0].number';&#xA; result: [0,1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$.phone[0].number'
Result: '[0,1,2]'
Expected: '[0,1,2]'
]]></output>
                </test-case>
                <test-case id="0-1194" name="flattening.array-inputs[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="799985211" result="Passed" start-time="2025-01-14T17:31:17.4151142Z" end-time="2025-01-14T17:31:17.4151898Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'Hello':'World'}';&#xA; result: {&quot;Hello&quot;:&quot;World&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is '{'Hello':'World'}'
Result: '{"Hello":"World"}'
Expected: '{"Hello":"World"}'
]]></output>
                </test-case>
                <test-case id="0-1195" name="flattening.array-inputs[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1712603948" result="Passed" start-time="2025-01-14T17:31:17.4151970Z" end-time="2025-01-14T17:31:17.4152521Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.{'Hello':'World'}';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$.{'Hello':'World'}'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1196" name="flattening.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1509423232" result="Passed" start-time="2025-01-14T17:31:17.4152590Z" end-time="2025-01-14T17:31:17.4153686Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.[Product.Price]';&#xA; result: [[34.45,21.67],[34.45,107.99]]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.[Product.Price]'
Result: '[[34.45,21.67],[34.45,107.99]]'
Expected: '[[34.45,21.67],[34.45,107.99]]'
]]></output>
                </test-case>
                <test-case id="0-1197" name="flattening.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="680426096" result="Passed" start-time="2025-01-14T17:31:17.4153760Z" end-time="2025-01-14T17:31:17.4154452Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.nest0';&#xA; result: [1,2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$.nest0'
Result: '[1,2,3,4]'
Expected: '[1,2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1198" name="flattening.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1149090227" result="Passed" start-time="2025-01-14T17:31:17.4154529Z" end-time="2025-01-14T17:31:17.4155174Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0';&#xA; result: [1,2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0'
Result: '[1,2,3,4]'
Expected: '[1,2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1199" name="flattening.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1868363784" result="Passed" start-time="2025-01-14T17:31:17.4155240Z" end-time="2025-01-14T17:31:17.4155947Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[0]';&#xA; result: {&quot;nest0&quot;:[1,2]}" />
                  </properties>
                  <output><![CDATA[Expr is '$[0]'
Result: '{"nest0":[1,2]}'
Expected: '{"nest0":[1,2]}'
]]></output>
                </test-case>
                <test-case id="0-1200" name="flattening.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="279906005" result="Passed" start-time="2025-01-14T17:31:17.4156019Z" end-time="2025-01-14T17:31:17.4156737Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[1]';&#xA; result: {&quot;nest0&quot;:[3,4]}" />
                  </properties>
                  <output><![CDATA[Expr is '$[1]'
Result: '{"nest0":[3,4]}'
Expected: '{"nest0":[3,4]}'
]]></output>
                </test-case>
                <test-case id="0-1201" name="flattening.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1218143243" result="Passed" start-time="2025-01-14T17:31:17.4156806Z" end-time="2025-01-14T17:31:17.4157513Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[-1]';&#xA; result: {&quot;nest0&quot;:[3,4]}" />
                  </properties>
                  <output><![CDATA[Expr is '$[-1]'
Result: '{"nest0":[3,4]}'
Expected: '{"nest0":[3,4]}'
]]></output>
                </test-case>
                <test-case id="0-1202" name="flattening.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="391771153" result="Passed" start-time="2025-01-14T17:31:17.4157583Z" end-time="2025-01-14T17:31:17.4158250Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[0].nest0';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$[0].nest0'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-1203" name="flattening.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="95908029" result="Passed" start-time="2025-01-14T17:31:17.4158318Z" end-time="2025-01-14T17:31:17.4158990Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[1].nest0';&#xA; result: [3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$[1].nest0'
Result: '[3,4]'
Expected: '[3,4]'
]]></output>
                </test-case>
                <test-case id="0-1204" name="flattening.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="528349276" result="Passed" start-time="2025-01-14T17:31:17.4159059Z" end-time="2025-01-14T17:31:17.4159713Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[0].nest0[0]';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$[0].nest0[0]'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1205" name="flattening.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="16648119" result="Passed" start-time="2025-01-14T17:31:17.4159779Z" end-time="2025-01-14T17:31:17.4160927Z" duration="0.000115" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.[nest2.[nest3]]]';&#xA; result: [[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.[nest2.[nest3]]]'
Result: '[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]'
Expected: '[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]'
]]></output>
                </test-case>
                <test-case id="0-1206" name="flattening.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1397478749" result="Passed" start-time="2025-01-14T17:31:17.4160996Z" end-time="2025-01-14T17:31:17.4162092Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.[nest2.[nest3]]';&#xA; result: [[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.[nest2.[nest3]]'
Result: '[[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]'
Expected: '[[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]'
]]></output>
                </test-case>
                <test-case id="0-1207" name="flattening.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1354737347" result="Passed" start-time="2025-01-14T17:31:17.4162161Z" end-time="2025-01-14T17:31:17.4163207Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.nest2.[nest3]]';&#xA; result: [[[1],[2],[3],[4]],[[5],[6],[7],[8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.nest2.[nest3]]'
Result: '[[[1],[2],[3],[4]],[[5],[6],[7],[8]]]'
Expected: '[[[1],[2],[3],[4]],[[5],[6],[7],[8]]]'
]]></output>
                </test-case>
                <test-case id="0-1208" name="flattening.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1650419345" result="Passed" start-time="2025-01-14T17:31:17.4163275Z" end-time="2025-01-14T17:31:17.4164245Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.[nest2.nest3]]';&#xA; result: [[[1,2],[3,4]],[[5,6],[7,8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.[nest2.nest3]]'
Result: '[[[1,2],[3,4]],[[5,6],[7,8]]]'
Expected: '[[[1,2],[3,4]],[[5,6],[7,8]]]'
]]></output>
                </test-case>
                <test-case id="0-1209" name="flattening.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="683852105" result="Passed" start-time="2025-01-14T17:31:17.4164321Z" end-time="2025-01-14T17:31:17.4165220Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.nest2.nest3]';&#xA; result: [[1,2,3,4],[5,6,7,8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.nest2.nest3]'
Result: '[[1,2,3,4],[5,6,7,8]]'
Expected: '[[1,2,3,4],[5,6,7,8]]'
]]></output>
                </test-case>
                <test-case id="0-1210" name="flattening.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="540612691" result="Passed" start-time="2025-01-14T17:31:17.4165287Z" end-time="2025-01-14T17:31:17.4166275Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.[nest2.nest3]';&#xA; result: [[1,2],[3,4],[5,6],[7,8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.[nest2.nest3]'
Result: '[[1,2],[3,4],[5,6],[7,8]]'
Expected: '[[1,2],[3,4],[5,6],[7,8]]'
]]></output>
                </test-case>
                <test-case id="0-1211" name="flattening.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="397459487" result="Passed" start-time="2025-01-14T17:31:17.4166367Z" end-time="2025-01-14T17:31:17.4167818Z" duration="0.000145" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.nest2.[nest3]';&#xA; result: [[1],[2],[3],[4],[5],[6],[7],[8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.nest2.[nest3]'
Result: '[[1],[2],[3],[4],[5],[6],[7],[8]]'
Expected: '[[1],[2],[3],[4],[5],[6],[7],[8]]'
]]></output>
                </test-case>
                <test-case id="0-1212" name="flattening.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1730722719" result="Passed" start-time="2025-01-14T17:31:17.4168425Z" end-time="2025-01-14T17:31:17.4169644Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.nest2.nest3';&#xA; result: [1,2,3,4,5,6,7,8]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.nest2.nest3'
Result: '[1,2,3,4,5,6,7,8]'
Expected: '[1,2,3,4,5,6,7,8]'
]]></output>
                </test-case>
                <test-case id="0-1213" name="flattening.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1810048645" result="Passed" start-time="2025-01-14T17:31:17.4169735Z" end-time="2025-01-14T17:31:17.4171219Z" duration="0.000149" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.[nest2.[nest3]]]';&#xA; result: [[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.[nest2.[nest3]]]'
Result: '[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]'
Expected: '[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]'
]]></output>
                </test-case>
                <test-case id="0-1214" name="flattening.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1143645457" result="Passed" start-time="2025-01-14T17:31:17.4171320Z" end-time="2025-01-14T17:31:17.4172974Z" duration="0.000166" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.[nest2.[nest3]]';&#xA; result: [[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.[nest2.[nest3]]'
Result: '[[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]'
Expected: '[[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]'
]]></output>
                </test-case>
                <test-case id="0-1215" name="flattening.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="969486383" result="Passed" start-time="2025-01-14T17:31:17.4173099Z" end-time="2025-01-14T17:31:17.4174629Z" duration="0.000153" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.nest2.[nest3]]';&#xA; result: [[[1],[2],[3],[4]],[[5],[6],[7],[8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.nest2.[nest3]]'
Result: '[[[1],[2],[3],[4]],[[5],[6],[7],[8]]]'
Expected: '[[[1],[2],[3],[4]],[[5],[6],[7],[8]]]'
]]></output>
                </test-case>
                <test-case id="0-1216" name="flattening.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1701043504" result="Passed" start-time="2025-01-14T17:31:17.4174728Z" end-time="2025-01-14T17:31:17.4184900Z" duration="0.001017" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.[nest2.nest3]]';&#xA; result: [[[1,2],[3,4]],[[5,6],[7,8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.[nest2.nest3]]'
Result: '[[[1,2],[3,4]],[[5,6],[7,8]]]'
Expected: '[[[1,2],[3,4]],[[5,6],[7,8]]]'
]]></output>
                </test-case>
                <test-case id="0-1217" name="flattening.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="594491238" result="Passed" start-time="2025-01-14T17:31:17.4185090Z" end-time="2025-01-14T17:31:17.4186745Z" duration="0.000166" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.nest2.nest3]';&#xA; result: [[1,2,3,4],[5,6,7,8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.nest2.nest3]'
Result: '[[1,2,3,4],[5,6,7,8]]'
Expected: '[[1,2,3,4],[5,6,7,8]]'
]]></output>
                </test-case>
                <test-case id="0-1218" name="flattening.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="398434880" result="Passed" start-time="2025-01-14T17:31:17.4186866Z" end-time="2025-01-14T17:31:17.4188172Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.[nest2.nest3]';&#xA; result: [[1,2],[3,4],[5,6],[7,8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.[nest2.nest3]'
Result: '[[1,2],[3,4],[5,6],[7,8]]'
Expected: '[[1,2],[3,4],[5,6],[7,8]]'
]]></output>
                </test-case>
                <test-case id="0-1219" name="flattening.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1869509265" result="Passed" start-time="2025-01-14T17:31:17.4188277Z" end-time="2025-01-14T17:31:17.4189350Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.nest2.[nest3]';&#xA; result: [[1],[2],[3],[4],[5],[6],[7],[8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.nest2.[nest3]'
Result: '[[1],[2],[3],[4],[5],[6],[7],[8]]'
Expected: '[[1],[2],[3],[4],[5],[6],[7],[8]]'
]]></output>
                </test-case>
                <test-case id="0-1220" name="flattening.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="421268569" result="Passed" start-time="2025-01-14T17:31:17.4189420Z" end-time="2025-01-14T17:31:17.4190314Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.nest2.nest3';&#xA; result: [1,2,3,4,5,6,7,8]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.nest2.nest3'
Result: '[1,2,3,4,5,6,7,8]'
Expected: '[1,2,3,4,5,6,7,8]'
]]></output>
                </test-case>
                <test-case id="0-1221" name="flattening.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="360918417" result="Passed" start-time="2025-01-14T17:31:17.4190396Z" end-time="2025-01-14T17:31:17.4191146Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;a&quot;: 1 }.a';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '{"a": 1 }.a'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1222" name="flattening.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="495367256" result="Passed" start-time="2025-01-14T17:31:17.4191222Z" end-time="2025-01-14T17:31:17.4191780Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is 'a'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1223" name="flattening.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1302759638" result="Passed" start-time="2025-01-14T17:31:17.4191842Z" end-time="2025-01-14T17:31:17.4192485Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;a&quot;: [1] }.a';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '{"a": [1] }.a'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1224" name="flattening.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1683659545" result="Passed" start-time="2025-01-14T17:31:17.4192555Z" end-time="2025-01-14T17:31:17.4193141Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is 'a'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1225" name="flattening.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1105606316" result="Passed" start-time="2025-01-14T17:31:17.4193205Z" end-time="2025-01-14T17:31:17.4193874Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;a&quot;: [[1]] }.a';&#xA; result: [[1]]" />
                  </properties>
                  <output><![CDATA[Expr is '{"a": [[1]] }.a'
Result: '[[1]]'
Expected: '[[1]]'
]]></output>
                </test-case>
                <test-case id="0-1226" name="flattening.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1845053613" result="Passed" start-time="2025-01-14T17:31:17.4193961Z" end-time="2025-01-14T17:31:17.4195051Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a';&#xA; result: [[1]]" />
                  </properties>
                  <output><![CDATA[Expr is 'a'
Result: '[[1]]'
Expected: '[[1]]'
]]></output>
                </test-case>
                <test-case id="0-1227" name="flattening.case031" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case031" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="533313116" result="Passed" start-time="2025-01-14T17:31:17.4195185Z" end-time="2025-01-14T17:31:17.4196085Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[{&quot;a&quot;:[1,2]}, {&quot;a&quot;:[3]}].a';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[{"a":[1,2]}, {"a":[3]}].a'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1228" name="flattening.case032" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case032" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1290985913" result="Passed" start-time="2025-01-14T17:31:17.4196159Z" end-time="2025-01-14T17:31:17.4196822Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is 'a'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1229" name="flattening.case033" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case033" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="689451113" result="Passed" start-time="2025-01-14T17:31:17.4196890Z" end-time="2025-01-14T17:31:17.4198045Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[{&quot;a&quot;:[{&quot;b&quot;:[1]}, {&quot;b&quot;:[2]}]}, {&quot;a&quot;:[{&quot;b&quot;:[3]}, {&quot;b&quot;:[4]}]}].a[0].b';&#xA; result: [1,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[{"a":[{"b":[1]}, {"b":[2]}]}, {"a":[{"b":[3]}, {"b":[4]}]}].a[0].b'
Result: '[1,3]'
Expected: '[1,3]'
]]></output>
                </test-case>
                <test-case id="0-1230" name="flattening.case034" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case034" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="110747453" result="Passed" start-time="2025-01-14T17:31:17.4198149Z" end-time="2025-01-14T17:31:17.4199046Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a[0].b';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is 'a[0].b'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1231" name="flattening.case034a" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case034a" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1980138385" result="Passed" start-time="2025-01-14T17:31:17.4199125Z" end-time="2025-01-14T17:31:17.4199869Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.a[0].b';&#xA; result: [1,3]" />
                  </properties>
                  <output><![CDATA[Expr is '$.a[0].b'
Result: '[1,3]'
Expected: '[1,3]'
]]></output>
                </test-case>
                <test-case id="0-1232" name="flattening.case035" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case035" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="658784911" result="Passed" start-time="2025-01-14T17:31:17.4199938Z" end-time="2025-01-14T17:31:17.4200688Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a.b[0]';&#xA; result: [1,2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is 'a.b[0]'
Result: '[1,2,3,4]'
Expected: '[1,2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1233" name="flattening.case036" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case036" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="919328547" result="Passed" start-time="2025-01-14T17:31:17.4200789Z" end-time="2025-01-14T17:31:17.4201902Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone[type=&quot;mobile&quot;].number';&#xA; result: &quot;077 7700 1234&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone[type="mobile"].number'
Result: '"077 7700 1234"'
Expected: '"077 7700 1234"'
]]></output>
                </test-case>
                <test-case id="0-1234" name="flattening.case037" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case037" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1416576756" result="Passed" start-time="2025-01-14T17:31:17.4201993Z" end-time="2025-01-14T17:31:17.4202909Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone[type=&quot;mobile&quot;][].number';&#xA; result: [&quot;077 7700 1234&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone[type="mobile"][].number'
Result: '["077 7700 1234"]'
Expected: '["077 7700 1234"]'
]]></output>
                </test-case>
                <test-case id="0-1235" name="flattening.case038" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case038" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="135422072" result="Passed" start-time="2025-01-14T17:31:17.4202981Z" end-time="2025-01-14T17:31:17.4204129Z" duration="0.000115" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone[][type=&quot;mobile&quot;].number';&#xA; result: [&quot;077 7700 1234&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone[][type="mobile"].number'
Result: '["077 7700 1234"]'
Expected: '["077 7700 1234"]'
]]></output>
                </test-case>
                <test-case id="0-1236" name="flattening.case039" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case039" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="738999391" result="Passed" start-time="2025-01-14T17:31:17.4204217Z" end-time="2025-01-14T17:31:17.4205144Z" duration="0.000093" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone[type=&quot;office&quot;][].number';&#xA; result: [&quot;01962 001234&quot;,&quot;01962 001235&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone[type="office"][].number'
Result: '["01962 001234","01962 001235"]'
Expected: '["01962 001234","01962 001235"]'
]]></output>
                </test-case>
                <test-case id="0-1237" name="flattening.case040" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case040" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1683613475" result="Passed" start-time="2025-01-14T17:31:17.4205216Z" end-time="2025-01-14T17:31:17.4206408Z" duration="0.000119" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone{type: number}';&#xA; result: {&quot;home&quot;:&quot;0203 544 1234&quot;,&quot;office&quot;:[&quot;01962 001234&quot;,&quot;01962 001235&quot;],&quot;mobile&quot;:&quot;077 7700 1234&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone{type: number}'
Result: '{"home":"0203 544 1234","office":["01962 001234","01962 001235"],"mobile":"077 7700 1234"}'
Expected: '{"home":"0203 544 1234","office":["01962 001234","01962 001235"],"mobile":"077 7700 1234"}'
]]></output>
                </test-case>
                <test-case id="0-1238" name="flattening.case041" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case041" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="945674440" result="Passed" start-time="2025-01-14T17:31:17.4206493Z" end-time="2025-01-14T17:31:17.4207632Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone{type: number[]}';&#xA; result: {&quot;home&quot;:[&quot;0203 544 1234&quot;],&quot;office&quot;:[&quot;01962 001234&quot;,&quot;01962 001235&quot;],&quot;mobile&quot;:[&quot;077 7700 1234&quot;]}" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone{type: number[]}'
Result: '{"home":["0203 544 1234"],"office":["01962 001234","01962 001235"],"mobile":["077 7700 1234"]}'
Expected: '{"home":["0203 544 1234"],"office":["01962 001234","01962 001235"],"mobile":["077 7700 1234"]}'
]]></output>
                </test-case>
                <test-case id="0-1239" name="flattening.case042" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case042" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="511388383" result="Passed" start-time="2025-01-14T17:31:17.4207716Z" end-time="2025-01-14T17:31:17.4209227Z" duration="0.000151" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[type='command'][]';&#xA; result: [{&quot;type&quot;:&quot;command&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is '$[type='command'][]'
Result: '[{"type":"command"}]'
Expected: '[{"type":"command"}]'
]]></output>
                </test-case>
                <test-case id="0-1240" name="flattening.case043" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case043" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1149050304" result="Passed" start-time="2025-01-14T17:31:17.4209351Z" end-time="2025-01-14T17:31:17.4210355Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[][type='command']';&#xA; result: [{&quot;type&quot;:&quot;command&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is '$[][type='command']'
Result: '[{"type":"command"}]'
Expected: '[{"type":"command"}]'
]]></output>
                </test-case>
                <test-case id="0-1241" name="flattening.case044" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case044" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1971543388" result="Passed" start-time="2025-01-14T17:31:17.4210438Z" end-time="2025-01-14T17:31:17.4214995Z" duration="0.000456" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$filter($, function($e) { $e != 0 })[]';&#xA; result: [5]" />
                  </properties>
                  <output><![CDATA[Expr is '$filter($, function($e) { $e != 0 })[]'
Result: '[5]'
Expected: '[5]'
]]></output>
                </test-case>
                <test-case id="0-1242" name="flattening.case045" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case045" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1223742674" result="Passed" start-time="2025-01-14T17:31:17.4215123Z" end-time="2025-01-14T17:31:17.4216266Z" duration="0.000115" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.tags[title='example'][]';&#xA; result: [{&quot;title&quot;:&quot;example&quot;,&quot;description&quot;:&quot;Hello&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is '$.tags[title='example'][]'
Result: '[{"title":"example","description":"Hello"}]'
Expected: '[{"title":"example","description":"Hello"}]'
]]></output>
                </test-case>
                <test-case id="0-1243" name="flattening.large[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.large[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2040191643" result="Passed" start-time="2025-01-14T17:31:17.4216351Z" end-time="2025-01-14T17:31:18.9279344Z" duration="1.506313" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $data := { 'number': [1..2e5].$string() }; $values := $data.number; $count($values) )';&#xA; result: 200000" />
                  </properties>
                  <output><![CDATA[Expr is '( $data := { 'number': [1..2e5].$string() }; $values := $data.number; $count($values) )'
Result: '200000'
Expected: '200000'
]]></output>
                </test-case>
                <test-case id="0-1244" name="flattening.large[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.large[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1906117975" result="Passed" start-time="2025-01-14T17:31:18.9279893Z" end-time="2025-01-14T17:31:20.2526283Z" duration="1.324651" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $data := { 'number': [1..2e5].$string() }; $values := $lookup($data, 'number'); $count($values) )';&#xA; result: 200000" />
                  </properties>
                  <output><![CDATA[Expr is '( $data := { 'number': [1..2e5].$string() }; $values := $lookup($data, 'number'); $count($values) )'
Result: '200000'
Expected: '200000'
]]></output>
                </test-case>
                <test-case id="0-1245" name="flattening.sequence-of-arrays[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1423110488" result="Passed" start-time="2025-01-14T17:31:20.2526598Z" end-time="2025-01-14T17:31:20.2528688Z" duration="0.000209" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds]';&#xA; result: [[3,1578381600],[5,1578381700]]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds]'
Result: '[[3,1578381600],[5,1578381700]]'
Expected: '[[3,1578381600],[5,1578381700]]'
]]></output>
                </test-case>
                <test-case id="0-1246" name="flattening.sequence-of-arrays[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="5046801" result="Passed" start-time="2025-01-14T17:31:20.2528769Z" end-time="2025-01-14T17:31:20.2529602Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds]';&#xA; result: [3,1578381600]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds]'
Result: '[3,1578381600]'
Expected: '[3,1578381600]'
]]></output>
                </test-case>
                <test-case id="0-1247" name="flattening.sequence-of-arrays[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="218149481" result="Passed" start-time="2025-01-14T17:31:20.2529668Z" end-time="2025-01-14T17:31:20.2530535Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds][]';&#xA; result: [[3,1578381600],[5,1578381700]]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds][]'
Result: '[[3,1578381600],[5,1578381700]]'
Expected: '[[3,1578381600],[5,1578381700]]'
]]></output>
                </test-case>
                <test-case id="0-1248" name="flattening.sequence-of-arrays[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1171747639" result="Passed" start-time="2025-01-14T17:31:20.2530599Z" end-time="2025-01-14T17:31:20.2531396Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds][]';&#xA; result: [[3,1578381600]]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds][]'
Result: '[[3,1578381600]]'
Expected: '[[3,1578381600]]'
]]></output>
                </test-case>
                <test-case id="0-1249" name="function-abs.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-abs.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1977982475" result="Passed" start-time="2025-01-14T17:31:20.2531462Z" end-time="2025-01-14T17:31:20.2532426Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$abs(3.7)';&#xA; result: 3.7" />
                  </properties>
                  <output><![CDATA[Expr is '$abs(3.7)'
Result: '3.7'
Expected: '3.7'
]]></output>
                </test-case>
                <test-case id="0-1250" name="function-abs.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-abs.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="11560444" result="Passed" start-time="2025-01-14T17:31:20.2532496Z" end-time="2025-01-14T17:31:20.2533201Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$abs(-3.7)';&#xA; result: 3.7" />
                  </properties>
                  <output><![CDATA[Expr is '$abs(-3.7)'
Result: '3.7'
Expected: '3.7'
]]></output>
                </test-case>
                <test-case id="0-1251" name="function-abs.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-abs.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="914931994" result="Passed" start-time="2025-01-14T17:31:20.2533265Z" end-time="2025-01-14T17:31:20.2533856Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$abs(0)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$abs(0)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1252" name="function-abs.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-abs.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="281991216" result="Passed" start-time="2025-01-14T17:31:20.2533916Z" end-time="2025-01-14T17:31:20.2534497Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$abs(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$abs(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1253" name="function-append.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1427064609" result="Passed" start-time="2025-01-14T17:31:20.2534583Z" end-time="2025-01-14T17:31:20.2536556Z" duration="0.000197" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$append([1,2], [3,4])';&#xA; result: [1,2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$append([1,2], [3,4])'
Result: '[1,2,3,4]'
Expected: '[1,2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1254" name="function-append.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1447095215" result="Passed" start-time="2025-01-14T17:31:20.2536663Z" end-time="2025-01-14T17:31:20.2538830Z" duration="0.000217" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$append(1, [3,4])';&#xA; result: [1,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$append(1, [3,4])'
Result: '[1,3,4]'
Expected: '[1,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1255" name="function-append.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2066471235" result="Passed" start-time="2025-01-14T17:31:20.2538921Z" end-time="2025-01-14T17:31:20.2539823Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$append(1,2)';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$append(1,2)'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-1256" name="function-append.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="722775987" result="Passed" start-time="2025-01-14T17:31:20.2539888Z" end-time="2025-01-14T17:31:20.2540664Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$append(1,notexist)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$append(1,notexist)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1257" name="function-append.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1236495162" result="Passed" start-time="2025-01-14T17:31:20.2540728Z" end-time="2025-01-14T17:31:20.2541545Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$append(notexist, [2,3,4])';&#xA; result: [2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$append(notexist, [2,3,4])'
Result: '[2,3,4]'
Expected: '[2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1258" name="function-append.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="559732131" result="Passed" start-time="2025-01-14T17:31:20.2541627Z" end-time="2025-01-14T17:31:20.2542666Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($append($data.a, [2]); $data.a)';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '($append($data.a, [2]); $data.a)'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1259" name="function-applications.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1570226607" result="Passed" start-time="2025-01-14T17:31:20.2542735Z" end-time="2025-01-14T17:31:20.2547419Z" duration="0.000468" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].OrderID ~&gt; $uppercase()';&#xA; result: &quot;ORDER103&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].OrderID ~> $uppercase()'
Result: '"ORDER103"'
Expected: '"ORDER103"'
]]></output>
                </test-case>
                <test-case id="0-1260" name="function-applications.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="319078153" result="Passed" start-time="2025-01-14T17:31:20.2547513Z" end-time="2025-01-14T17:31:20.2549468Z" duration="0.000196" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].OrderID ~&gt; $uppercase() ~&gt; $lowercase()';&#xA; result: &quot;order103&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].OrderID ~> $uppercase() ~> $lowercase()'
Result: '"order103"'
Expected: '"order103"'
]]></output>
                </test-case>
                <test-case id="0-1261" name="function-applications.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="864165633" result="Passed" start-time="2025-01-14T17:31:20.2549557Z" end-time="2025-01-14T17:31:20.2553326Z" duration="0.000377" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.OrderID ~&gt; $join()';&#xA; result: &quot;order103order104&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.OrderID ~> $join()'
Result: '"order103order104"'
Expected: '"order103order104"'
]]></output>
                </test-case>
                <test-case id="0-1262" name="function-applications.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="63751434" result="Passed" start-time="2025-01-14T17:31:20.2553419Z" end-time="2025-01-14T17:31:20.2555401Z" duration="0.000198" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.OrderID ~&gt; $join(&quot;, &quot;)';&#xA; result: &quot;order103, order104&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.OrderID ~> $join(", ")'
Result: '"order103, order104"'
Expected: '"order103, order104"'
]]></output>
                </test-case>
                <test-case id="0-1263" name="function-applications.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="960968232" result="Passed" start-time="2025-01-14T17:31:20.2555506Z" end-time="2025-01-14T17:31:20.2598786Z" duration="0.004328" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.(Price * Quantity) ~&gt; $sum()';&#xA; result: 336.36" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.(Price * Quantity) ~> $sum()'
Result: '336.36'
Expected: '336.36'
]]></output>
                </test-case>
                <test-case id="0-1264" name="function-applications.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="573104652" result="Passed" start-time="2025-01-14T17:31:20.2599083Z" end-time="2025-01-14T17:31:20.2773390Z" duration="0.017431" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $uppertrim := $trim ~&gt; $uppercase;  $uppertrim(&quot;   Hello    World   &quot;) )';&#xA; result: &quot;HELLO WORLD&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '( $uppertrim := $trim ~> $uppercase;  $uppertrim("   Hello    World   ") )'
Result: '"HELLO WORLD"'
Expected: '"HELLO WORLD"'
]]></output>
                </test-case>
                <test-case id="0-1265" name="function-applications.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="707957953" result="Passed" start-time="2025-01-14T17:31:20.2773752Z" end-time="2025-01-14T17:31:20.2776934Z" duration="0.000318" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;john@example.com&quot; ~&gt; $substringAfter(&quot;@&quot;) ~&gt; $substringBefore(&quot;.&quot;) ';&#xA; result: &quot;example&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"john@example.com" ~> $substringAfter("@") ~> $substringBefore(".") '
Result: '"example"'
Expected: '"example"'
]]></output>
                </test-case>
                <test-case id="0-1266" name="function-applications.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1886158223" result="Passed" start-time="2025-01-14T17:31:20.2777066Z" end-time="2025-01-14T17:31:20.2780529Z" duration="0.000346" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;&quot; ~&gt; $substringAfter(&quot;@&quot;) ~&gt; $substringBefore(&quot;.&quot;) ';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"" ~> $substringAfter("@") ~> $substringBefore(".") '
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1267" name="function-applications.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="811394172" result="Passed" start-time="2025-01-14T17:31:20.2780636Z" end-time="2025-01-14T17:31:20.2781850Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo ~&gt; $substringAfter(&quot;@&quot;) ~&gt; $substringBefore(&quot;.&quot;) ';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'foo ~> $substringAfter("@") ~> $substringBefore(".") '
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1268" name="function-applications.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="393471889" result="Passed" start-time="2025-01-14T17:31:20.2781948Z" end-time="2025-01-14T17:31:20.2789579Z" duration="0.000763" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $domain := $substringAfter(?,&quot;@&quot;) ~&gt; $substringBefore(?,&quot;.&quot;); $domain(&quot;john@example.com&quot;) )';&#xA; result: &quot;example&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '( $domain := $substringAfter(?,"@") ~> $substringBefore(?,"."); $domain("john@example.com") )'
Result: '"example"'
Expected: '"example"'
]]></output>
                </test-case>
                <test-case id="0-1269" name="function-applications.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1008223385" result="Passed" start-time="2025-01-14T17:31:20.2789790Z" end-time="2025-01-14T17:31:20.2792976Z" duration="0.000319" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $square := function($x){$x*$x}; [1..5] ~&gt; $map($square) ) ';&#xA; result: [1,4,9,16,25]" />
                  </properties>
                  <output><![CDATA[Expr is '( $square := function($x){$x*$x}; [1..5] ~> $map($square) ) '
Result: '[1,4,9,16,25]'
Expected: '[1,4,9,16,25]'
]]></output>
                </test-case>
                <test-case id="0-1270" name="function-applications.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="230486992" result="Passed" start-time="2025-01-14T17:31:20.2793136Z" end-time="2025-01-14T17:31:20.2796642Z" duration="0.000351" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $square := function($x){$x*$x}; [1..5] ~&gt; $map($square) ~&gt; $sum() ) ';&#xA; result: 55" />
                  </properties>
                  <output><![CDATA[Expr is '( $square := function($x){$x*$x}; [1..5] ~> $map($square) ~> $sum() ) '
Result: '55'
Expected: '55'
]]></output>
                </test-case>
                <test-case id="0-1271" name="function-applications.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="17430029" result="Passed" start-time="2025-01-14T17:31:20.2796792Z" end-time="2025-01-14T17:31:20.2798507Z" duration="0.000172" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($betweenBackets := $substringAfter(?, &quot;(&quot;) ~&gt; $substringBefore(?, &quot;)&quot;);$betweenBackets(&quot;test(foo)bar&quot;)) ';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($betweenBackets := $substringAfter(?, "(") ~> $substringBefore(?, ")");$betweenBackets("test(foo)bar")) '
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-1272" name="function-applications.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1796300445" result="Passed" start-time="2025-01-14T17:31:20.2798590Z" end-time="2025-01-14T17:31:20.2805677Z" duration="0.000709" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($square := function($x){$x*$x};$chain := λ($f, $g){λ($x){$g($f($x))}};$instructions := [$sum, $square];$sumsq := $instructions ~&gt; $reduce($chain);[1..5] ~&gt; $sumsq()) ';&#xA; result: 225" />
                  </properties>
                  <output><![CDATA[Expr is '($square := function($x){$x*$x};$chain := λ($f, $g){λ($x){$g($f($x))}};$instructions := [$sum, $square];$sumsq := $instructions ~> $reduce($chain);[1..5] ~> $sumsq()) '
Result: '225'
Expected: '225'
]]></output>
                </test-case>
                <test-case id="0-1273" name="function-applications.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2034530144" result="Passed" start-time="2025-01-14T17:31:20.2805905Z" end-time="2025-01-14T17:31:20.2809254Z" duration="0.000335" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($square := function($x){$x*$x};$chain := λ($f, $g){λ($x){ $x ~&gt; $f ~&gt; $g }};$instructions := [$sum, $square, $string];$sumsq := $instructions ~&gt; $reduce($chain);[1..5] ~&gt; $sumsq()) ';&#xA; result: &quot;225&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($square := function($x){$x*$x};$chain := λ($f, $g){λ($x){ $x ~> $f ~> $g }};$instructions := [$sum, $square, $string];$sumsq := $instructions ~> $reduce($chain);[1..5] ~> $sumsq()) '
Result: '"225"'
Expected: '"225"'
]]></output>
                </test-case>
                <test-case id="0-1274" name="function-applications.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="720458961" result="Passed" start-time="2025-01-14T17:31:20.2809397Z" end-time="2025-01-14T17:31:20.2811083Z" duration="0.000169" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($square := function($x){$x*$x};$instructions := $sum ~&gt; $square;[1..5] ~&gt; $instructions())  ';&#xA; result: 225" />
                  </properties>
                  <output><![CDATA[Expr is '($square := function($x){$x*$x};$instructions := $sum ~> $square;[1..5] ~> $instructions())  '
Result: '225'
Expected: '225'
]]></output>
                </test-case>
                <test-case id="0-1275" name="function-applications.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="597208828" result="Passed" start-time="2025-01-14T17:31:20.2811172Z" end-time="2025-01-14T17:31:20.2812618Z" duration="0.000145" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($square := function($x){$x*$x};$sum_of_squares := $map(?, $square) ~&gt; $sum;[1..5] ~&gt; $sum_of_squares())  ';&#xA; result: 55" />
                  </properties>
                  <output><![CDATA[Expr is '($square := function($x){$x*$x};$sum_of_squares := $map(?, $square) ~> $sum;[1..5] ~> $sum_of_squares())  '
Result: '55'
Expected: '55'
]]></output>
                </test-case>
                <test-case id="0-1276" name="function-applications.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1284659390" result="Passed" start-time="2025-01-14T17:31:20.2812690Z" end-time="2025-01-14T17:31:20.2814175Z" duration="0.000149" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($times := λ($x, $y) { $x * $y };$product := $reduce(?, $times);$square := function($x){$x*$x};$product_of_squares := $map(?, $square) ~&gt; $product;[1..5] ~&gt; $product_of_squares())';&#xA; result: 14400" />
                  </properties>
                  <output><![CDATA[Expr is '($times := λ($x, $y) { $x * $y };$product := $reduce(?, $times);$square := function($x){$x*$x};$product_of_squares := $map(?, $square) ~> $product;[1..5] ~> $product_of_squares())'
Result: '14400'
Expected: '14400'
]]></output>
                </test-case>
                <test-case id="0-1277" name="function-applications.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="602659260" result="Passed" start-time="2025-01-14T17:31:20.2814253Z" end-time="2025-01-14T17:31:20.2815154Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($square := function($x){$x*$x};[1..5] ~&gt; $map($square) ~&gt; $reduce(λ($x, $y) { $x * $y });)';&#xA; result: 14400" />
                  </properties>
                  <output><![CDATA[Expr is '($square := function($x){$x*$x};[1..5] ~> $map($square) ~> $reduce(λ($x, $y) { $x * $y });)'
Result: '14400'
Expected: '14400'
]]></output>
                </test-case>
                <test-case id="0-1278" name="function-applications.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1544125310" result="Passed" start-time="2025-01-14T17:31:20.2815220Z" end-time="2025-01-14T17:31:20.2822124Z" duration="0.000691" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($prices := Account.Order.Product.Price;$quantities := Account.Order.Product.Quantity;$product := λ($arr) { $arr[0] * $arr[1] };$zip($prices, $quantities) ~&gt; $map($product) ~&gt; $sum())';&#xA; result: 336.36" />
                  </properties>
                  <output><![CDATA[Expr is '($prices := Account.Order.Product.Price;$quantities := Account.Order.Product.Quantity;$product := λ($arr) { $arr[0] * $arr[1] };$zip($prices, $quantities) ~> $map($product) ~> $sum())'
Result: '336.36'
Expected: '336.36'
]]></output>
                </test-case>
                <test-case id="0-1279" name="function-applications.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="260549057" result="Passed" start-time="2025-01-14T17:31:20.2822283Z" end-time="2025-01-14T17:31:20.2826830Z" duration="0.000455" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '42 ~&gt; &quot;hello&quot;';&#xA; result: error T2006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2006.
Actually thrown T2006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '42 ~> "hello"'
]]></output>
                </test-case>
                <test-case id="0-1280" name="function-applications.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1100559515" result="Passed" start-time="2025-01-14T17:31:20.2826999Z" end-time="2025-01-14T17:31:20.2861634Z" duration="0.003464" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[$.&quot;Product Name&quot; ~&gt; /hat/i].ProductID';&#xA; result: [858383,858236,858383]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[$."Product Name" ~> /hat/i].ProductID'
Result: '[858383,858236,858383]'
Expected: '[858383,858236,858383]'
]]></output>
                </test-case>
                <test-case id="0-1281" name="function-assert.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1626904132" result="Passed" start-time="2025-01-14T17:31:20.2861979Z" end-time="2025-01-14T17:31:20.2867050Z" duration="0.000507" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '$assert(Account.Order[0].Product[0].Price &lt; 34, 'Too Expensive')';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '$assert(Account.Order[0].Product[0].Price < 34, 'Too Expensive')'
]]></output>
                </test-case>
                <test-case id="0-1282" name="function-assert.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1509049124" result="Passed" start-time="2025-01-14T17:31:20.2867264Z" end-time="2025-01-14T17:31:20.2871332Z" duration="0.000407" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$assert(Account.Order[0].Product[0].Price &lt; 35, 'Too Expensive')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$assert(Account.Order[0].Product[0].Price < 35, 'Too Expensive')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1283" name="function-assert.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1460487085" result="Passed" start-time="2025-01-14T17:31:20.2871503Z" end-time="2025-01-14T17:31:20.2873009Z" duration="0.000151" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($assert(Account.Order[0].Product[0].Price &lt; 35, 'Too Expensive'); Account.Order[0].Product[0].Price)';&#xA; result: 34.45" />
                  </properties>
                  <output><![CDATA[Expr is '($assert(Account.Order[0].Product[0].Price < 35, 'Too Expensive'); Account.Order[0].Product[0].Price)'
Result: '34.45'
Expected: '34.45'
]]></output>
                </test-case>
                <test-case id="0-1284" name="function-assert.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="677890669" result="Passed" start-time="2025-01-14T17:31:20.2873088Z" end-time="2025-01-14T17:31:20.2881005Z" duration="0.000792" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '($assert(Account.Order[0].Product[0].Price &lt; 34, 'Too Expensive'); Account.Order[0].Product[0].Price)';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '($assert(Account.Order[0].Product[0].Price < 34, 'Too Expensive'); Account.Order[0].Product[0].Price)'
]]></output>
                </test-case>
                <test-case id="0-1285" name="function-assert.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1343299106" result="Passed" start-time="2025-01-14T17:31:20.2881168Z" end-time="2025-01-14T17:31:20.2889403Z" duration="0.000824" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$assert(null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$assert(null)'
]]></output>
                </test-case>
                <test-case id="0-1286" name="function-assert.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1698147169" result="Passed" start-time="2025-01-14T17:31:20.2889592Z" end-time="2025-01-14T17:31:20.2891984Z" duration="0.000239" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$assert(5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$assert(5)'
]]></output>
                </test-case>
                <test-case id="0-1287" name="function-assert.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1379203949" result="Passed" start-time="2025-01-14T17:31:20.2892080Z" end-time="2025-01-14T17:31:20.2893538Z" duration="0.000146" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '$assert(false)';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '$assert(false)'
]]></output>
                </test-case>
                <test-case id="0-1288" name="function-assert.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1619716979" result="Passed" start-time="2025-01-14T17:31:20.2893614Z" end-time="2025-01-14T17:31:20.2894442Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$assert(true)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$assert(true)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1289" name="function-average.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1497589168" result="Passed" start-time="2025-01-14T17:31:20.2894509Z" end-time="2025-01-14T17:31:20.2898968Z" duration="0.000446" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$average(Account.Order.Product.(Price * Quantity))';&#xA; result: 84.09" />
                  </properties>
                  <output><![CDATA[Expr is '$average(Account.Order.Product.(Price * Quantity))'
Result: '84.09'
Expected: '84.09'
]]></output>
                </test-case>
                <test-case id="0-1290" name="function-average.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1560129732" result="Passed" start-time="2025-01-14T17:31:20.2899070Z" end-time="2025-01-14T17:31:20.2901862Z" duration="0.000279" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$average(Product.(Price * Quantity))';&#xA; result: [45.285000000000004,122.89500000000001]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$average(Product.(Price * Quantity))'
Result: '[45.285,122.895]'
Expected: '[45.285000000000004,122.89500000000001]'
]]></output>
                </test-case>
                <test-case id="0-1291" name="function-average.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1649987876" result="Passed" start-time="2025-01-14T17:31:20.2901951Z" end-time="2025-01-14T17:31:20.2903360Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(OrderID &amp; &quot;: &quot; &amp; $average(Product.(Price*Quantity)))';&#xA; result: [&quot;order103: 45.285&quot;,&quot;order104: 122.895&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(OrderID & ": " & $average(Product.(Price*Quantity)))'
Result: '["order103: 45.285","order104: 122.895"]'
Expected: '["order103: 45.285","order104: 122.895"]'
]]></output>
                </test-case>
                <test-case id="0-1292" name="function-average.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1123881344" result="Passed" start-time="2025-01-14T17:31:20.2903454Z" end-time="2025-01-14T17:31:20.2904329Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$average([])';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$average([])'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1293" name="function-average.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1522931480" result="Passed" start-time="2025-01-14T17:31:20.2904417Z" end-time="2025-01-14T17:31:20.2905251Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$average([1,2,3])';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$average([1,2,3])'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1294" name="function-average.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="192310230" result="Passed" start-time="2025-01-14T17:31:20.2905332Z" end-time="2025-01-14T17:31:20.2909256Z" duration="0.000393" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([&quot;1&quot;,&quot;2&quot;,&quot;3&quot;])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average(["1","2","3"])'
]]></output>
                </test-case>
                <test-case id="0-1295" name="function-average.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="284884671" result="Passed" start-time="2025-01-14T17:31:20.2909361Z" end-time="2025-01-14T17:31:20.2912477Z" duration="0.000312" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([&quot;1&quot;,&quot;2&quot;,3])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average(["1","2",3])'
]]></output>
                </test-case>
                <test-case id="0-1296" name="function-average.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1907791954" result="Passed" start-time="2025-01-14T17:31:20.2912577Z" end-time="2025-01-14T17:31:20.2913330Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$average(1)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$average(1)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1297" name="function-average.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="262774442" result="Passed" start-time="2025-01-14T17:31:20.2913389Z" end-time="2025-01-14T17:31:20.2915847Z" duration="0.000246" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average([],[])'
]]></output>
                </test-case>
                <test-case id="0-1298" name="function-average.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1467086991" result="Passed" start-time="2025-01-14T17:31:20.2915965Z" end-time="2025-01-14T17:31:20.2918426Z" duration="0.000246" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([1,2,3],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average([1,2,3],[])'
]]></output>
                </test-case>
                <test-case id="0-1299" name="function-average.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1198160022" result="Passed" start-time="2025-01-14T17:31:20.2918538Z" end-time="2025-01-14T17:31:20.2921475Z" duration="0.000294" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average([],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1300" name="function-average.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1684435912" result="Passed" start-time="2025-01-14T17:31:20.2921594Z" end-time="2025-01-14T17:31:20.2924724Z" duration="0.000313" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([1,2],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average([1,2],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1301" name="function-average.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1341136276" result="Passed" start-time="2025-01-14T17:31:20.2924844Z" end-time="2025-01-14T17:31:20.2925811Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$average(undefined)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$average(undefined)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1302" name="function-boolean.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1972161239" result="Passed" start-time="2025-01-14T17:31:20.2925996Z" end-time="2025-01-14T17:31:20.2926944Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(&quot;Hello World&quot;)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean("Hello World")'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1303" name="function-boolean.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="163524254" result="Passed" start-time="2025-01-14T17:31:20.2927013Z" end-time="2025-01-14T17:31:20.2988255Z" duration="0.006125" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(&quot;&quot;)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean("")'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1304" name="function-boolean.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1747495483" result="Passed" start-time="2025-01-14T17:31:20.2988658Z" end-time="2025-01-14T17:31:20.2991802Z" duration="0.000315" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(true)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(true)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1305" name="function-boolean.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2141614062" result="Passed" start-time="2025-01-14T17:31:20.2991946Z" end-time="2025-01-14T17:31:20.2993084Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(false)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(false)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1306" name="function-boolean.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1266115196" result="Passed" start-time="2025-01-14T17:31:20.2993164Z" end-time="2025-01-14T17:31:20.2994781Z" duration="0.000162" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(0)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(0)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1307" name="function-boolean.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="394944719" result="Passed" start-time="2025-01-14T17:31:20.2994893Z" end-time="2025-01-14T17:31:20.2996042Z" duration="0.000115" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(10)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(10)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1308" name="function-boolean.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="706605648" result="Passed" start-time="2025-01-14T17:31:20.2996430Z" end-time="2025-01-14T17:31:20.2997649Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(-0.5)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(-0.5)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1309" name="function-boolean.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="849886387" result="Passed" start-time="2025-01-14T17:31:20.2997755Z" end-time="2025-01-14T17:31:20.2999224Z" duration="0.000147" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(null)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(null)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1310" name="function-boolean.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="781811845" result="Passed" start-time="2025-01-14T17:31:20.2999347Z" end-time="2025-01-14T17:31:20.3000679Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1311" name="function-boolean.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="120116727" result="Passed" start-time="2025-01-14T17:31:20.3000784Z" end-time="2025-01-14T17:31:20.3001647Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([0])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([0])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1312" name="function-boolean.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1839853499" result="Passed" start-time="2025-01-14T17:31:20.3001720Z" end-time="2025-01-14T17:31:20.3002993Z" duration="0.000127" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([1])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([1])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1313" name="function-boolean.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="299183074" result="Passed" start-time="2025-01-14T17:31:20.3003102Z" end-time="2025-01-14T17:31:20.3004465Z" duration="0.000137" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([1,2,3])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([1,2,3])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1314" name="function-boolean.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="469667092" result="Passed" start-time="2025-01-14T17:31:20.3004567Z" end-time="2025-01-14T17:31:20.3005606Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([0,0])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([0,0])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1315" name="function-boolean.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="839657668" result="Passed" start-time="2025-01-14T17:31:20.3005697Z" end-time="2025-01-14T17:31:20.3006715Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([[]])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([[]])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1316" name="function-boolean.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1502600156" result="Passed" start-time="2025-01-14T17:31:20.3006809Z" end-time="2025-01-14T17:31:20.3008069Z" duration="0.000126" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([[null]])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([[null]])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1317" name="function-boolean.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="750747996" result="Passed" start-time="2025-01-14T17:31:20.3008325Z" end-time="2025-01-14T17:31:20.3009609Z" duration="0.000128" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([[[true]]])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([[[true]]])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1318" name="function-boolean.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="283077563" result="Passed" start-time="2025-01-14T17:31:20.3009700Z" end-time="2025-01-14T17:31:20.3010570Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean({})';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean({})'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1319" name="function-boolean.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1377289193" result="Passed" start-time="2025-01-14T17:31:20.3010637Z" end-time="2025-01-14T17:31:20.3011460Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean({&quot;hello&quot;:&quot;world&quot;})';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean({"hello":"world"})'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1320" name="function-boolean.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1157294431" result="Passed" start-time="2025-01-14T17:31:20.3011527Z" end-time="2025-01-14T17:31:20.3012285Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(Account)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(Account)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1321" name="function-boolean.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="506954274" result="Passed" start-time="2025-01-14T17:31:20.3012351Z" end-time="2025-01-14T17:31:20.3013208Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(Account.Order.Product.Price)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(Account.Order.Product.Price)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1322" name="function-boolean.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1339160840" result="Passed" start-time="2025-01-14T17:31:20.3013273Z" end-time="2025-01-14T17:31:20.3014038Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(Account.blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(Account.blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1323" name="function-boolean.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1043366368" result="Passed" start-time="2025-01-14T17:31:20.3014099Z" end-time="2025-01-14T17:31:20.3014831Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean($boolean)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean($boolean)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1324" name="function-boolean.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1595577300" result="Passed" start-time="2025-01-14T17:31:20.3014892Z" end-time="2025-01-14T17:31:20.3015881Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(function(){true})';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(function(){true})'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1325" name="function-boolean.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="727982763" result="Passed" start-time="2025-01-14T17:31:20.3015962Z" end-time="2025-01-14T17:31:20.3019500Z" duration="0.000354" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$boolean(2,3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$boolean(2,3)'
]]></output>
                </test-case>
                <test-case id="0-1326" name="function-ceil.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-ceil.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1041032332" result="Passed" start-time="2025-01-14T17:31:20.3019621Z" end-time="2025-01-14T17:31:20.3021454Z" duration="0.000183" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ceil(3.7)';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '$ceil(3.7)'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1327" name="function-ceil.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-ceil.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="273368965" result="Passed" start-time="2025-01-14T17:31:20.3021539Z" end-time="2025-01-14T17:31:20.3024312Z" duration="0.000277" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ceil(-3.7)';&#xA; result: -3" />
                  </properties>
                  <output><![CDATA[Expr is '$ceil(-3.7)'
Result: '-3'
Expected: '-3'
]]></output>
                </test-case>
                <test-case id="0-1328" name="function-ceil.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-ceil.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1842219914" result="Passed" start-time="2025-01-14T17:31:20.3024442Z" end-time="2025-01-14T17:31:20.3025210Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ceil(0)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$ceil(0)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1329" name="function-ceil.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-ceil.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="435574290" result="Passed" start-time="2025-01-14T17:31:20.3025277Z" end-time="2025-01-14T17:31:20.3026252Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ceil(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$ceil(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1330" name="function-contains.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="836900521" result="Passed" start-time="2025-01-14T17:31:20.3026364Z" end-time="2025-01-14T17:31:20.3030591Z" duration="0.000423" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;Hello World&quot;, &quot;lo&quot;)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("Hello World", "lo")'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1331" name="function-contains.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1021884948" result="Passed" start-time="2025-01-14T17:31:20.3030712Z" end-time="2025-01-14T17:31:20.3033439Z" duration="0.000273" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;Hello World&quot;, &quot;World&quot;)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("Hello World", "World")'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1332" name="function-contains.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1283055916" result="Passed" start-time="2025-01-14T17:31:20.3033557Z" end-time="2025-01-14T17:31:20.3034526Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;Hello World&quot;, &quot;world&quot;)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("Hello World", "world")'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1333" name="function-contains.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="345965288" result="Passed" start-time="2025-01-14T17:31:20.3034631Z" end-time="2025-01-14T17:31:20.3035521Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;Hello World&quot;, &quot;Word&quot;)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("Hello World", "Word")'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1334" name="function-contains.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="723596792" result="Passed" start-time="2025-01-14T17:31:20.3035613Z" end-time="2025-01-14T17:31:20.3036247Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(nothing, &quot;World&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$contains(nothing, "World")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1335" name="function-contains.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1906906886" result="Passed" start-time="2025-01-14T17:31:20.3036306Z" end-time="2025-01-14T17:31:20.3040130Z" duration="0.000383" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$contains(23, 3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$contains(23, 3)'
]]></output>
                </test-case>
                <test-case id="0-1336" name="function-contains.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1802226540" result="Passed" start-time="2025-01-14T17:31:20.3040256Z" end-time="2025-01-14T17:31:20.3046467Z" duration="0.000622" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;23&quot;, 3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$contains("23", 3)'
]]></output>
                </test-case>
                <test-case id="0-1337" name="function-count.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1345524870" result="Passed" start-time="2025-01-14T17:31:20.3046623Z" end-time="2025-01-14T17:31:20.3049781Z" duration="0.000316" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count(Account.Order.Product.(Price * Quantity))';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '$count(Account.Order.Product.(Price * Quantity))'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1338" name="function-count.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1860475249" result="Passed" start-time="2025-01-14T17:31:20.3049898Z" end-time="2025-01-14T17:31:20.3051671Z" duration="0.000177" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$count(Product.(Price * Quantity))';&#xA; result: [2,2]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$count(Product.(Price * Quantity))'
Result: '[2,2]'
Expected: '[2,2]'
]]></output>
                </test-case>
                <test-case id="0-1339" name="function-count.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="683760254" result="Passed" start-time="2025-01-14T17:31:20.3051783Z" end-time="2025-01-14T17:31:20.3054074Z" duration="0.000229" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(OrderID &amp; &quot;: &quot; &amp; $count(Product.(Price*Quantity)))';&#xA; result: [&quot;order103: 2&quot;,&quot;order104: 2&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(OrderID & ": " & $count(Product.(Price*Quantity)))'
Result: '["order103: 2","order104: 2"]'
Expected: '["order103: 2","order104: 2"]'
]]></output>
                </test-case>
                <test-case id="0-1340" name="function-count.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="77183910" result="Passed" start-time="2025-01-14T17:31:20.3054171Z" end-time="2025-01-14T17:31:20.3055398Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count([])';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$count([])'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1341" name="function-count.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1303202450" result="Passed" start-time="2025-01-14T17:31:20.3055507Z" end-time="2025-01-14T17:31:20.3056413Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count([1,2,3])';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$count([1,2,3])'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1342" name="function-count.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="672598301" result="Passed" start-time="2025-01-14T17:31:20.3056489Z" end-time="2025-01-14T17:31:20.3057500Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count([&quot;1&quot;,&quot;2&quot;,&quot;3&quot;])';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$count(["1","2","3"])'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1343" name="function-count.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="769830592" result="Passed" start-time="2025-01-14T17:31:20.3057569Z" end-time="2025-01-14T17:31:20.3058385Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count([&quot;1&quot;,&quot;2&quot;,3])';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$count(["1","2",3])'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1344" name="function-count.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="715777323" result="Passed" start-time="2025-01-14T17:31:20.3058458Z" end-time="2025-01-14T17:31:20.3059223Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count(1)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$count(1)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1345" name="function-count.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1440013005" result="Passed" start-time="2025-01-14T17:31:20.3059291Z" end-time="2025-01-14T17:31:20.3063015Z" duration="0.000373" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$count([],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$count([],[])'
]]></output>
                </test-case>
                <test-case id="0-1346" name="function-count.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1957618024" result="Passed" start-time="2025-01-14T17:31:20.3063119Z" end-time="2025-01-14T17:31:20.3065896Z" duration="0.000278" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$count([1,2,3],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$count([1,2,3],[])'
]]></output>
                </test-case>
                <test-case id="0-1347" name="function-count.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="824698270" result="Passed" start-time="2025-01-14T17:31:20.3066003Z" end-time="2025-01-14T17:31:20.3068696Z" duration="0.000270" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$count([],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$count([],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1348" name="function-count.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1053264388" result="Passed" start-time="2025-01-14T17:31:20.3068827Z" end-time="2025-01-14T17:31:20.3072339Z" duration="0.000351" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$count([1,2],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$count([1,2],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1349" name="function-count.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1500136209" result="Passed" start-time="2025-01-14T17:31:20.3072521Z" end-time="2025-01-14T17:31:20.3073577Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count(undefined)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$count(undefined)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1350" name="function-count.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="929768162" result="Passed" start-time="2025-01-14T17:31:20.3073675Z" end-time="2025-01-14T17:31:20.3074918Z" duration="0.000124" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count([1,2,3,4]) / 2';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$count([1,2,3,4]) / 2'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1351" name="function-decodeUrl.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1157043958" result="Passed" start-time="2025-01-14T17:31:20.3075036Z" end-time="2025-01-14T17:31:20.3079048Z" duration="0.000401" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrl(&quot;https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B&quot;)';&#xA; result: &quot;https://mozilla.org/?x=шеллы&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$decodeUrl("https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B")'
Result: '"https://mozilla.org/?x=шеллы"'
Expected: '"https://mozilla.org/?x=шеллы"'
]]></output>
                </test-case>
                <test-case id="0-1352" name="function-decodeUrl.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2127180526" result="Passed" start-time="2025-01-14T17:31:20.3079161Z" end-time="2025-01-14T17:31:20.3081005Z" duration="0.000185" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrl(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$decodeUrl(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1353" name="function-decodeUrl.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="89797798" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3081103Z" end-time="2025-01-14T17:31:20.3085495Z" duration="0.000439" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrl('%E0%A4%A')';&#xA; result: error " />
                  </properties>
                  <reason>
                    <message><![CDATA[JS function encodeURI throws URIError 'if one attempts to encode a surrogate which is not part of a high-low pair', which is seem to be not a case with C#]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$decodeUrl('%E0%A4%A')'
Result: '"%E0%A4%A"'
]]></output>
                </test-case>
                <test-case id="0-1354" name="function-decodeUrlComponent.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="40865591" result="Passed" start-time="2025-01-14T17:31:20.3085615Z" end-time="2025-01-14T17:31:20.3087952Z" duration="0.000234" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrlComponent(&quot;%3Fx%3Dtest&quot;)';&#xA; result: &quot;?x=test&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$decodeUrlComponent("%3Fx%3Dtest")'
Result: '"?x=test"'
Expected: '"?x=test"'
]]></output>
                </test-case>
                <test-case id="0-1355" name="function-decodeUrlComponent.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1177481638" result="Passed" start-time="2025-01-14T17:31:20.3088059Z" end-time="2025-01-14T17:31:20.3089277Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrlComponent(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$decodeUrlComponent(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1356" name="function-decodeUrlComponent.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1975436" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3089364Z" end-time="2025-01-14T17:31:20.3093133Z" duration="0.000377" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrlComponent('%E0%A4%A')';&#xA; result: error " />
                  </properties>
                  <reason>
                    <message><![CDATA[JS function encodeURIComponent throws URIError 'if one attempts to encode a surrogate which is not part of a high-low pair', which is seem to be not a case with C#]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$decodeUrlComponent('%E0%A4%A')'
Result: '"%E0%A4%A"'
]]></output>
                </test-case>
                <test-case id="0-1357" name="function-distinct.distinct[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="928794871" result="Passed" start-time="2025-01-14T17:31:20.3093256Z" end-time="2025-01-14T17:31:20.3100154Z" duration="0.000690" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct([1,2,3,4])';&#xA; result: [1,2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct([1,2,3,4])'
Result: '[1,2,3,4]'
Expected: '[1,2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1358" name="function-distinct.distinct[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="715430601" result="Passed" start-time="2025-01-14T17:31:20.3100307Z" end-time="2025-01-14T17:31:20.3102844Z" duration="0.000254" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct([1])';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct([1])'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1359" name="function-distinct.distinct[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1019512720" result="Passed" start-time="2025-01-14T17:31:20.3102952Z" end-time="2025-01-14T17:31:20.3103816Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1360" name="function-distinct.distinct[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1100581730" result="Passed" start-time="2025-01-14T17:31:20.3103883Z" end-time="2025-01-14T17:31:20.3104628Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct(null)';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct(null)'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-1361" name="function-distinct.distinct[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="992746231" result="Passed" start-time="2025-01-14T17:31:20.3104688Z" end-time="2025-01-14T17:31:20.3105444Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct('hello')';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct('hello')'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1362" name="function-distinct.distinct[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="700208452" result="Passed" start-time="2025-01-14T17:31:20.3105507Z" end-time="2025-01-14T17:31:20.3106724Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct(Account.Order.Product.SKU)';&#xA; result: [&quot;0406654608&quot;,&quot;0406634348&quot;,&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct(Account.Order.Product.SKU)'
Result: '["0406654608","0406634348","040657863","0406654603"]'
Expected: '["0406654608","0406634348","040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-1363" name="function-distinct.distinct[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="271031358" result="Passed" start-time="2025-01-14T17:31:20.3106794Z" end-time="2025-01-14T17:31:20.3108022Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct(Account.Order.Product.`Product Name`)';&#xA; result: [&quot;Bowler Hat&quot;,&quot;Trilby hat&quot;,&quot;Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct(Account.Order.Product.`Product Name`)'
Result: '["Bowler Hat","Trilby hat","Cloak"]'
Expected: '["Bowler Hat","Trilby hat","Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-1364" name="function-distinct.distinct[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="12985866" result="Passed" start-time="2025-01-14T17:31:20.3108095Z" end-time="2025-01-14T17:31:20.3109899Z" duration="0.000181" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct(Account.Order.Product.Description)';&#xA; result: [{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},{&quot;Colour&quot;:&quot;Orange&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.6},{&quot;Colour&quot;:&quot;Black&quot;,&quot;Width&quot;:30,&quot;Height&quot;:20,&quot;Depth&quot;:210,&quot;Weight&quot;:2}]" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct(Account.Order.Product.Description)'
Result: '[{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2}]'
Expected: '[{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2}]'
]]></output>
                </test-case>
                <test-case id="0-1365" name="function-each.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-each.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1907410544" result="Passed" start-time="2025-01-14T17:31:20.3109974Z" end-time="2025-01-14T17:31:20.3115221Z" duration="0.000525" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$each(Address, λ($v, $k) {$k &amp; &quot;: &quot; &amp; $v})';&#xA; result: [&quot;Street: Hursley Park&quot;,&quot;City: Winchester&quot;,&quot;Postcode: SO21 2JN&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$each(Address, λ($v, $k) {$k & ": " & $v})'
Result: '["Street: Hursley Park","City: Winchester","Postcode: SO21 2JN"]'
Expected: '["Street: Hursley Park","City: Winchester","Postcode: SO21 2JN"]'
]]></output>
                </test-case>
                <test-case id="0-1366" name="function-each.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-each.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="984544458" result="Passed" start-time="2025-01-14T17:31:20.3115335Z" end-time="2025-01-14T17:31:20.3118933Z" duration="0.000360" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$each({'a': 'hello', 'b': 'world'}, $uppercase)';&#xA; result: [&quot;HELLO&quot;,&quot;WORLD&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$each({'a': 'hello', 'b': 'world'}, $uppercase)'
Result: '["HELLO","WORLD"]'
Expected: '["HELLO","WORLD"]'
]]></output>
                </test-case>
                <test-case id="0-1367" name="function-each.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-each.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1493888211" result="Passed" start-time="2025-01-14T17:31:20.3119037Z" end-time="2025-01-14T17:31:20.3121436Z" duration="0.000240" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$each(function($v, $k) {$k[$v&gt;2]})';&#xA; result: [&quot;c&quot;,&quot;d&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$each(function($v, $k) {$k[$v>2]})'
Result: '["c","d"]'
Expected: '["c","d"]'
]]></output>
                </test-case>
                <test-case id="0-1368" name="function-encodeUrl.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1723069929" result="Passed" start-time="2025-01-14T17:31:20.3121541Z" end-time="2025-01-14T17:31:20.3125561Z" duration="0.000402" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrl(&quot;https://mozilla.org/?x=шеллы&quot;)';&#xA; result: &quot;https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$encodeUrl("https://mozilla.org/?x=шеллы")'
Result: '"https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B"'
Expected: '"https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B"'
]]></output>
                </test-case>
                <test-case id="0-1369" name="function-encodeUrl.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="710243853" result="Passed" start-time="2025-01-14T17:31:20.3125677Z" end-time="2025-01-14T17:31:20.3127197Z" duration="0.000152" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrl(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$encodeUrl(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1370" name="function-encodeUrl.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1184914775" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3127290Z" end-time="2025-01-14T17:31:20.3135870Z" duration="0.000859" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrl('�')';&#xA; result: error " />
                  </properties>
                  <reason>
                    <message><![CDATA[JS function encodeURI throws URIError 'if one attempts to encode a surrogate which is not part of a high-low pair', which is seem to be not a case with C#]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$encodeUrl('�')'
Result: '"%EF%BF%BD"'
]]></output>
                </test-case>
                <test-case id="0-1371" name="function-encodeUrlComponent.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="157075286" result="Passed" start-time="2025-01-14T17:31:20.3136328Z" end-time="2025-01-14T17:31:20.3139653Z" duration="0.000332" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrlComponent(&quot;?x=test&quot;)';&#xA; result: &quot;%3Fx%3Dtest&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$encodeUrlComponent("?x=test")'
Result: '"%3Fx%3Dtest"'
Expected: '"%3Fx%3Dtest"'
]]></output>
                </test-case>
                <test-case id="0-1372" name="function-encodeUrlComponent.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1037756394" result="Passed" start-time="2025-01-14T17:31:20.3139782Z" end-time="2025-01-14T17:31:20.3141099Z" duration="0.000132" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrlComponent(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$encodeUrlComponent(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1373" name="function-encodeUrlComponent.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1746800956" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3141170Z" end-time="2025-01-14T17:31:20.3145604Z" duration="0.000444" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrlComponent('�')';&#xA; result: error " />
                  </properties>
                  <reason>
                    <message><![CDATA[JS function encodeURIComponent throws URIError 'if one attempts to encode a surrogate which is not part of a high-low pair', which is seem to be not a case with C#]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$encodeUrlComponent('�')'
Result: '"%EF%BF%BD"'
]]></output>
                </test-case>
                <test-case id="0-1374" name="function-error.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1300105283" result="Passed" start-time="2025-01-14T17:31:20.3145832Z" end-time="2025-01-14T17:31:20.3150433Z" duration="0.000460" asserts="2">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0].Price &gt; 35 ? Account.Order[0].Product[0].Price : $error('Too Expensive')';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0].Price > 35 ? Account.Order[0].Product[0].Price : $error('Too Expensive')'
]]></output>
                </test-case>
                <test-case id="0-1375" name="function-error.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2001575628" result="Passed" start-time="2025-01-14T17:31:20.3150556Z" end-time="2025-01-14T17:31:20.3152661Z" duration="0.000211" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0].Price &gt; 34 ? Account.Order[0].Product[0].Price : $error('Too Expensive')';&#xA; result: 34.45" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0].Price > 34 ? Account.Order[0].Product[0].Price : $error('Too Expensive')'
Result: '34.45'
Expected: '34.45'
]]></output>
                </test-case>
                <test-case id="0-1376" name="function-error.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1981839620" result="Passed" start-time="2025-01-14T17:31:20.3152754Z" end-time="2025-01-14T17:31:20.3154992Z" duration="0.000224" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0].Price &gt; 35 ? $error('Too Expensive') : Account.Order[0].Product[0].Price';&#xA; result: 34.45" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0].Price > 35 ? $error('Too Expensive') : Account.Order[0].Product[0].Price'
Result: '34.45'
Expected: '34.45'
]]></output>
                </test-case>
                <test-case id="0-1377" name="function-error.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="569330248" result="Passed" start-time="2025-01-14T17:31:20.3155110Z" end-time="2025-01-14T17:31:20.3159802Z" duration="0.000469" asserts="2">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0].Price &gt; 34 ? $error('Too Expensive') : Account.Order[0].Product[0].Price';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0].Price > 34 ? $error('Too Expensive') : Account.Order[0].Product[0].Price'
]]></output>
                </test-case>
                <test-case id="0-1378" name="function-error.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="327589045" result="Passed" start-time="2025-01-14T17:31:20.3159922Z" end-time="2025-01-14T17:31:20.3161773Z" duration="0.000185" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count(Account.Order[0].Product) &lt; 2 ? $error('Not enough products in orders')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$count(Account.Order[0].Product) < 2 ? $error('Not enough products in orders')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1379" name="function-error.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="155564295" result="Passed" start-time="2025-01-14T17:31:20.3161864Z" end-time="2025-01-14T17:31:20.3163798Z" duration="0.000194" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '$count(Account.Order[0].Product) &lt; 3 ? $error('Not enough products in orders')';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '$count(Account.Order[0].Product) < 3 ? $error('Not enough products in orders')'
]]></output>
                </test-case>
                <test-case id="0-1380" name="function-error.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="917848386" result="Passed" start-time="2025-01-14T17:31:20.3163876Z" end-time="2025-01-14T17:31:20.3166393Z" duration="0.000252" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '($msg:='My Message'; $error($msg); true)';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '($msg:='My Message'; $error($msg); true)'
]]></output>
                </test-case>
                <test-case id="0-1381" name="function-error.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="216334062" result="Passed" start-time="2025-01-14T17:31:20.3166484Z" end-time="2025-01-14T17:31:20.3170060Z" duration="0.000358" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$error(null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$error(null)'
]]></output>
                </test-case>
                <test-case id="0-1382" name="function-error.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1367588224" result="Passed" start-time="2025-01-14T17:31:20.3170159Z" end-time="2025-01-14T17:31:20.3172814Z" duration="0.000266" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$error(5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$error(5)'
]]></output>
                </test-case>
                <test-case id="0-1383" name="function-error.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="342083705" result="Passed" start-time="2025-01-14T17:31:20.3172905Z" end-time="2025-01-14T17:31:20.3174479Z" duration="0.000157" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '$error()';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '$error()'
]]></output>
                </test-case>
                <test-case id="0-1384" name="function-error.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1653289775" result="Passed" start-time="2025-01-14T17:31:20.3174554Z" end-time="2025-01-14T17:31:20.3176505Z" duration="0.000195" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '$error(foo)';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '$error(foo)'
]]></output>
                </test-case>
                <test-case id="0-1385" name="function-eval.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1827340210" result="Passed" start-time="2025-01-14T17:31:20.3176591Z" end-time="2025-01-14T17:31:20.3179054Z" duration="0.000246" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval('[1,2,3]')';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '$eval('[1,2,3]')'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1386" name="function-eval.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1042188069" result="Passed" start-time="2025-01-14T17:31:20.3179192Z" end-time="2025-01-14T17:31:20.3180310Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$eval(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1387" name="function-eval.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1193258118" result="Passed" start-time="2025-01-14T17:31:20.3180382Z" end-time="2025-01-14T17:31:20.3184895Z" duration="0.000451" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval('[1,$string(2),3]')';&#xA; result: [1,&quot;2&quot;,3]" />
                  </properties>
                  <output><![CDATA[Expr is '$eval('[1,$string(2),3]')'
Result: '[1,"2",3]'
Expected: '[1,"2",3]'
]]></output>
                </test-case>
                <test-case id="0-1388" name="function-eval.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="305099697" result="Passed" start-time="2025-01-14T17:31:20.3185019Z" end-time="2025-01-14T17:31:20.3188774Z" duration="0.000376" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval('Account.Order.Product.Quantity ~&gt; $sum()')';&#xA; result: 8" />
                  </properties>
                  <output><![CDATA[Expr is '$eval('Account.Order.Product.Quantity ~> $sum()')'
Result: '8'
Expected: '8'
]]></output>
                </test-case>
                <test-case id="0-1389" name="function-eval.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1693598801" result="Passed" start-time="2025-01-14T17:31:20.3188980Z" end-time="2025-01-14T17:31:20.3195515Z" duration="0.000654" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{'Name': `Product Name`, 'Total': $eval('Price * Quantity')}';&#xA; result: [{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;Total&quot;:68.9},{&quot;Name&quot;:&quot;Trilby hat&quot;,&quot;Total&quot;:21.67},{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;Total&quot;:137.8},{&quot;Name&quot;:&quot;Cloak&quot;,&quot;Total&quot;:107.99}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{'Name': `Product Name`, 'Total': $eval('Price * Quantity')}'
Result: '[{"Name":"Bowler Hat","Total":68.9},{"Name":"Trilby hat","Total":21.67},{"Name":"Bowler Hat","Total":137.8},{"Name":"Cloak","Total":107.99}]'
Expected: '[{"Name":"Bowler Hat","Total":68.9},{"Name":"Trilby hat","Total":21.67},{"Name":"Bowler Hat","Total":137.8},{"Name":"Cloak","Total":107.99}]'
]]></output>
                </test-case>
                <test-case id="0-1390" name="function-eval.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1904931450" result="Passed" start-time="2025-01-14T17:31:20.3195641Z" end-time="2025-01-14T17:31:20.3219970Z" duration="0.002433" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{'Name': `Product Name`, 'Volume': $eval('Width*Height*Depth', Description)}';&#xA; result: [{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;Volume&quot;:12600000},{&quot;Name&quot;:&quot;Trilby hat&quot;,&quot;Volume&quot;:12600000},{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;Volume&quot;:12600000},{&quot;Name&quot;:&quot;Cloak&quot;,&quot;Volume&quot;:126000}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{'Name': `Product Name`, 'Volume': $eval('Width*Height*Depth', Description)}'
Result: '[{"Name":"Bowler Hat","Volume":12600000},{"Name":"Trilby hat","Volume":12600000},{"Name":"Bowler Hat","Volume":12600000},{"Name":"Cloak","Volume":126000}]'
Expected: '[{"Name":"Bowler Hat","Volume":12600000},{"Name":"Trilby hat","Volume":12600000},{"Name":"Bowler Hat","Volume":12600000},{"Name":"Cloak","Volume":126000}]'
]]></output>
                </test-case>
                <test-case id="0-1391" name="function-eval.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="873431669" result="Passed" start-time="2025-01-14T17:31:20.3220165Z" end-time="2025-01-14T17:31:20.3226689Z" duration="0.000653" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$eval('[1,string(2),3]')';&#xA; result: error D3121" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3121.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$eval('[1,string(2),3]')'
]]></output>
                </test-case>
                <test-case id="0-1392" name="function-eval.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="630094269" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3226857Z" end-time="2025-01-14T17:31:20.3242786Z" duration="0.001593" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$eval('[1,#string(2),3]')';&#xA; result: error D3120" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'eval': Not supported yet: #
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$eval('[1,#string(2),3]')'
]]></output>
                </test-case>
                <test-case id="0-1393" name="function-eval.case008[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="840962529" result="Passed" start-time="2025-01-14T17:31:20.3243106Z" end-time="2025-01-14T17:31:20.3245971Z" duration="0.000287" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval(&quot;{ 'test': 1 }&quot;, [])';&#xA; result: {&quot;test&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$eval("{ 'test': 1 }", [])'
Result: '{"test":1}'
Expected: '{"test":1}'
]]></output>
                </test-case>
                <test-case id="0-1394" name="function-eval.case008[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1730662171" result="Passed" start-time="2025-01-14T17:31:20.3246105Z" end-time="2025-01-14T17:31:20.3248139Z" duration="0.000204" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval(&quot;{ 'test': 1 }&quot;)';&#xA; result: {&quot;test&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$eval("{ 'test': 1 }")'
Result: '{"test":1}'
Expected: '{"test":1}'
]]></output>
                </test-case>
                <test-case id="0-1395" name="function-eval.case008[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1231921326" result="Passed" start-time="2025-01-14T17:31:20.3248254Z" end-time="2025-01-14T17:31:20.3249832Z" duration="0.000158" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval(&quot;{ 'test': 1 }&quot;, [1,2,3])';&#xA; result: {&quot;test&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$eval("{ 'test': 1 }", [1,2,3])'
Result: '{"test":1}'
Expected: '{"test":1}'
]]></output>
                </test-case>
                <test-case id="0-1396" name="function-eval.case008[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="602993998" result="Passed" start-time="2025-01-14T17:31:20.3249947Z" end-time="2025-01-14T17:31:20.3251909Z" duration="0.000196" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval(&quot;{ 'test': 1 }&quot;)';&#xA; result: {&quot;test&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$eval("{ 'test': 1 }")'
Result: '{"test":1}'
Expected: '{"test":1}'
]]></output>
                </test-case>
                <test-case id="0-1397" name="function-exists.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="401566943" result="Passed" start-time="2025-01-14T17:31:20.3252023Z" end-time="2025-01-14T17:31:20.3254541Z" duration="0.000252" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(&quot;Hello World&quot;)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists("Hello World")'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1398" name="function-exists.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="756844726" result="Passed" start-time="2025-01-14T17:31:20.3254646Z" end-time="2025-01-14T17:31:20.3258865Z" duration="0.000422" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(&quot;&quot;)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists("")'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1399" name="function-exists.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="955850426" result="Passed" start-time="2025-01-14T17:31:20.3259082Z" end-time="2025-01-14T17:31:20.3260427Z" duration="0.000134" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(true)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(true)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1400" name="function-exists.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="455468547" result="Passed" start-time="2025-01-14T17:31:20.3260539Z" end-time="2025-01-14T17:31:20.3262017Z" duration="0.000148" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(false)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(false)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1401" name="function-exists.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="463729813" result="Passed" start-time="2025-01-14T17:31:20.3262132Z" end-time="2025-01-14T17:31:20.3263239Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(0)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(0)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1402" name="function-exists.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1249111988" result="Passed" start-time="2025-01-14T17:31:20.3263341Z" end-time="2025-01-14T17:31:20.3264572Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(-0.5)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(-0.5)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1403" name="function-exists.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="343020535" result="Passed" start-time="2025-01-14T17:31:20.3264669Z" end-time="2025-01-14T17:31:20.3266673Z" duration="0.000201" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(null)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(null)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1404" name="function-exists.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="315221434" result="Passed" start-time="2025-01-14T17:31:20.3266781Z" end-time="2025-01-14T17:31:20.3268871Z" duration="0.000209" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1405" name="function-exists.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="772692876" result="Passed" start-time="2025-01-14T17:31:20.3268974Z" end-time="2025-01-14T17:31:20.3270815Z" duration="0.000184" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([0])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([0])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1406" name="function-exists.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="119287564" result="Passed" start-time="2025-01-14T17:31:20.3270934Z" end-time="2025-01-14T17:31:20.3272835Z" duration="0.000190" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([1,2,3])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([1,2,3])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1407" name="function-exists.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="380379570" result="Passed" start-time="2025-01-14T17:31:20.3273849Z" end-time="2025-01-14T17:31:20.3275941Z" duration="0.000194" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([[]])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([[]])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1408" name="function-exists.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="937176162" result="Passed" start-time="2025-01-14T17:31:20.3276064Z" end-time="2025-01-14T17:31:20.3277207Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([[null]])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([[null]])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1409" name="function-exists.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="186773610" result="Passed" start-time="2025-01-14T17:31:20.3277291Z" end-time="2025-01-14T17:31:20.3279050Z" duration="0.000176" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([[[true]]])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([[[true]]])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1410" name="function-exists.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1343125665" result="Passed" start-time="2025-01-14T17:31:20.3279169Z" end-time="2025-01-14T17:31:20.3280629Z" duration="0.000146" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists({})';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists({})'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1411" name="function-exists.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1580128835" result="Passed" start-time="2025-01-14T17:31:20.3281506Z" end-time="2025-01-14T17:31:20.3282809Z" duration="0.000130" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists({&quot;hello&quot;:&quot;world&quot;})';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists({"hello":"world"})'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1412" name="function-exists.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="601205826" result="Passed" start-time="2025-01-14T17:31:20.3282891Z" end-time="2025-01-14T17:31:20.3283743Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(Account)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(Account)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1413" name="function-exists.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="559866306" result="Passed" start-time="2025-01-14T17:31:20.3283806Z" end-time="2025-01-14T17:31:20.3284719Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(Account.Order.Product.Price)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(Account.Order.Product.Price)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1414" name="function-exists.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="101664334" result="Passed" start-time="2025-01-14T17:31:20.3284786Z" end-time="2025-01-14T17:31:20.3285548Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists($exists)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists($exists)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1415" name="function-exists.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="884247668" result="Passed" start-time="2025-01-14T17:31:20.3285610Z" end-time="2025-01-14T17:31:20.3286446Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(function(){true})';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(function(){true})'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1416" name="function-exists.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1772641654" result="Passed" start-time="2025-01-14T17:31:20.3286535Z" end-time="2025-01-14T17:31:20.3287349Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(blah)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(blah)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1417" name="function-exists.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="358124747" result="Passed" start-time="2025-01-14T17:31:20.3287411Z" end-time="2025-01-14T17:31:20.3288303Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(Account.blah)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(Account.blah)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1418" name="function-exists.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="765225230" result="Passed" start-time="2025-01-14T17:31:20.3288376Z" end-time="2025-01-14T17:31:20.3289432Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(Account.Order[2])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(Account.Order[2])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1419" name="function-exists.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="333129303" result="Passed" start-time="2025-01-14T17:31:20.3289510Z" end-time="2025-01-14T17:31:20.3290731Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(Account.Order[0].blah)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(Account.Order[0].blah)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1420" name="function-exists.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="865222475" result="Passed" start-time="2025-01-14T17:31:20.3290830Z" end-time="2025-01-14T17:31:20.3293827Z" duration="0.000300" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$exists(2,3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$exists(2,3)'
]]></output>
                </test-case>
                <test-case id="0-1421" name="function-exists.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1938769987" result="Passed" start-time="2025-01-14T17:31:20.3293913Z" end-time="2025-01-14T17:31:20.3296088Z" duration="0.000218" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$exists()';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$exists()'
]]></output>
                </test-case>
                <test-case id="0-1422" name="function-floor.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-floor.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1188788514" result="Passed" start-time="2025-01-14T17:31:20.3296174Z" end-time="2025-01-14T17:31:20.3297900Z" duration="0.000173" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$floor(3.7)';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$floor(3.7)'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1423" name="function-floor.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-floor.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="29471128" result="Passed" start-time="2025-01-14T17:31:20.3297983Z" end-time="2025-01-14T17:31:20.3301082Z" duration="0.000310" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$floor(-3.7)';&#xA; result: -4" />
                  </properties>
                  <output><![CDATA[Expr is '$floor(-3.7)'
Result: '-4'
Expected: '-4'
]]></output>
                </test-case>
                <test-case id="0-1424" name="function-floor.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-floor.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="952796050" result="Passed" start-time="2025-01-14T17:31:20.3301199Z" end-time="2025-01-14T17:31:20.3301943Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$floor(0)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$floor(0)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1425" name="function-floor.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-floor.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="311483106" result="Passed" start-time="2025-01-14T17:31:20.3302007Z" end-time="2025-01-14T17:31:20.3302676Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$floor(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$floor(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1426" name="function-formatBase.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1674464664" result="Passed" start-time="2025-01-14T17:31:20.3302744Z" end-time="2025-01-14T17:31:20.3304822Z" duration="0.000208" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(100)';&#xA; result: &quot;100&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatBase(100)'
Result: '"100"'
Expected: '"100"'
]]></output>
                </test-case>
                <test-case id="0-1427" name="function-formatBase.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="196793865" result="Passed" start-time="2025-01-14T17:31:20.3304905Z" end-time="2025-01-14T17:31:20.3305764Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$formatBase(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1428" name="function-formatBase.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="16138785" result="Passed" start-time="2025-01-14T17:31:20.3305836Z" end-time="2025-01-14T17:31:20.3307925Z" duration="0.000209" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(100, 2)';&#xA; result: &quot;1100100&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatBase(100, 2)'
Result: '"1100100"'
Expected: '"1100100"'
]]></output>
                </test-case>
                <test-case id="0-1429" name="function-formatBase.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="68183957" result="Passed" start-time="2025-01-14T17:31:20.3308015Z" end-time="2025-01-14T17:31:20.3308741Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(-100, 2)';&#xA; result: &quot;-1100100&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatBase(-100, 2)'
Result: '"-1100100"'
Expected: '"-1100100"'
]]></output>
                </test-case>
                <test-case id="0-1430" name="function-formatBase.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1398581630" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3308803Z" end-time="2025-01-14T17:31:20.3312054Z" duration="0.000325" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(100, 36)';&#xA; result: &quot;2s&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatBase': No support for radix=36 in formatBase() yet
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$formatBase(100, 36)'
]]></output>
                </test-case>
                <test-case id="0-1431" name="function-formatBase.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1580272677" result="Failed" start-time="2025-01-14T17:31:20.3312151Z" end-time="2025-01-14T17:31:20.3425910Z" duration="0.011376" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(99.5, 2.5)';&#xA; result: &quot;1100100&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1100100"', got '"1100011"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatBase(99.5, 2.5)'
Result: '"1100011"'
Expected: '"1100100"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1100100"', got '"1100011"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1432" name="function-formatBase.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1959969169" result="Passed" start-time="2025-01-14T17:31:20.3426408Z" end-time="2025-01-14T17:31:20.3431034Z" duration="0.000463" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(100, 1)';&#xA; result: error D3100" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3100.
Actually thrown D3100.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$formatBase(100, 1)'
]]></output>
                </test-case>
                <test-case id="0-1433" name="function-formatBase.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1519222266" result="Passed" start-time="2025-01-14T17:31:20.3431179Z" end-time="2025-01-14T17:31:20.3433899Z" duration="0.000272" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(100, 37)';&#xA; result: error D3100" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3100.
Actually thrown D3100.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$formatBase(100, 37)'
]]></output>
                </test-case>
                <test-case id="0-1434" name="function-formatInteger.formatInteger[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1847579395" result="Passed" start-time="2025-01-14T17:31:20.3433993Z" end-time="2025-01-14T17:31:20.3434941Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(undefined, '0')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Description: 'should return result object'
Expr is '$formatInteger(undefined, '0')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1435" name="function-formatInteger.formatInteger[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="454118573" result="Passed" start-time="2025-01-14T17:31:20.3435007Z" end-time="2025-01-14T17:31:20.3436396Z" duration="0.000139" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(123, '000')';&#xA; result: &quot;123&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should format a number'
Expr is '$formatInteger(123, '000')'
Result: '"123"'
Expected: '"123"'
]]></output>
                </test-case>
                <test-case id="0-1436" name="function-formatInteger.formatInteger[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1114705721" result="Passed" start-time="2025-01-14T17:31:20.3436503Z" end-time="2025-01-14T17:31:20.3440001Z" duration="0.000350" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(123, '0000')';&#xA; result: &quot;0123&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(123, '0000')'
Result: '"0123"'
Expected: '"0123"'
]]></output>
                </test-case>
                <test-case id="0-1437" name="function-formatInteger.formatInteger[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1024567689" result="Passed" start-time="2025-01-14T17:31:20.3440102Z" end-time="2025-01-14T17:31:20.3440953Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(-3, '0000')';&#xA; result: &quot;-0003&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(-3, '0000')'
Result: '"-0003"'
Expected: '"-0003"'
]]></output>
                </test-case>
                <test-case id="0-1438" name="function-formatInteger.formatInteger[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="26862271" result="Passed" start-time="2025-01-14T17:31:20.3441049Z" end-time="2025-01-14T17:31:20.3441783Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234, '0;c')';&#xA; result: &quot;1234&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(1234, '0;c')'
Result: '"1234"'
Expected: '"1234"'
]]></output>
                </test-case>
                <test-case id="0-1439" name="function-formatInteger.formatInteger[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="880596899" result="Passed" start-time="2025-01-14T17:31:20.3441854Z" end-time="2025-01-14T17:31:20.3442522Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234, '###0')';&#xA; result: &quot;1234&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(1234, '###0')'
Result: '"1234"'
Expected: '"1234"'
]]></output>
                </test-case>
                <test-case id="0-1440" name="function-formatInteger.formatInteger[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1708052646" result="Passed" start-time="2025-01-14T17:31:20.3442591Z" end-time="2025-01-14T17:31:20.3443356Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, '###0')';&#xA; result: &quot;12&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(12, '###0')'
Result: '"12"'
Expected: '"12"'
]]></output>
                </test-case>
                <test-case id="0-1441" name="function-formatInteger.formatInteger[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="661808499" result="Passed" start-time="2025-01-14T17:31:20.3443428Z" end-time="2025-01-14T17:31:20.3444144Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12.6, '###0')';&#xA; result: &quot;12&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should round down floats'
Expr is '$formatInteger(12.6, '###0')'
Result: '"12"'
Expected: '"12"'
]]></output>
                </test-case>
                <test-case id="0-1442" name="function-formatInteger.formatInteger[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="256081956" result="Failed" start-time="2025-01-14T17:31:20.3444228Z" end-time="2025-01-14T17:31:20.3448629Z" duration="0.000440" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(123, '000;o')';&#xA; result: &quot;123rd&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"123rd"', got '"123"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format a number'
Expr is '$formatInteger(123, '000;o')'
Result: '"123"'
Expected: '"123rd"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"123rd"', got '"123"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1443" name="function-formatInteger.formatInteger[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="118326087" result="Failed" start-time="2025-01-14T17:31:20.3448737Z" end-time="2025-01-14T17:31:20.3452203Z" duration="0.000347" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1, '0;o')';&#xA; result: &quot;1st&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1st"', got '"1"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(1, '0;o')'
Result: '"1"'
Expected: '"1st"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1st"', got '"1"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1444" name="function-formatInteger.formatInteger[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="350473136" result="Failed" start-time="2025-01-14T17:31:20.3452321Z" end-time="2025-01-14T17:31:20.3456863Z" duration="0.000454" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(28, '#0;o')';&#xA; result: &quot;28th&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"28th"', got '"28"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(28, '#0;o')'
Result: '"28"'
Expected: '"28th"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"28th"', got '"28"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1445" name="function-formatInteger.formatInteger[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="324802615" result="Failed" start-time="2025-01-14T17:31:20.3456980Z" end-time="2025-01-14T17:31:20.3461114Z" duration="0.000414" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234, '###0;o')';&#xA; result: &quot;1234th&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1234th"', got '"1234"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(1234, '###0;o')'
Result: '"1234"'
Expected: '"1234th"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1234th"', got '"1234"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1446" name="function-formatInteger.formatInteger[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="272225843" result="Failed" start-time="2025-01-14T17:31:20.3461230Z" end-time="2025-01-14T17:31:20.3466223Z" duration="0.000500" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, '###0;o')';&#xA; result: &quot;12th&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"12th"', got '"12"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(12, '###0;o')'
Result: '"12"'
Expected: '"12th"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"12th"', got '"12"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1447" name="function-formatInteger.formatInteger[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="70227963" result="Failed" start-time="2025-01-14T17:31:20.3466374Z" end-time="2025-01-14T17:31:20.3470740Z" duration="0.000437" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12340, '###١')';&#xA; result: &quot;١٢٣٤٠&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"١٢٣٤٠"', got '"12340١"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(12340, '###١')'
Result: '"12340١"'
Expected: '"١٢٣٤٠"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"١٢٣٤٠"', got '"12340١"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1448" name="function-formatInteger.formatInteger[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="739298195" result="Failed" start-time="2025-01-14T17:31:20.3470859Z" end-time="2025-01-14T17:31:20.3475585Z" duration="0.000473" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12340, '###０')';&#xA; result: &quot;１２３４０&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"１２３４０"', got '"12340０"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(12340, '###０')'
Result: '"12340０"'
Expected: '"１２３４０"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"１２３４０"', got '"12340０"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1449" name="function-formatInteger.formatInteger[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="846414503" result="Failed" start-time="2025-01-14T17:31:20.3475858Z" end-time="2025-01-14T17:31:20.3515335Z" duration="0.003948" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12340, '##0０')';&#xA; result: error D3131" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3131 (), got '"12340０"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should throw error with mixed integer groups'
Expr is '$formatInteger(12340, '##0０')'
Result: '"12340０"'
Expected error D3131
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3131 (), got '"12340０"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1450" name="function-formatInteger.formatInteger[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1606763319" result="Passed" start-time="2025-01-14T17:31:20.3515547Z" end-time="2025-01-14T17:31:20.3517568Z" duration="0.000202" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, '#,##0')';&#xA; result: &quot;12&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(12, '#,##0')'
Result: '"12"'
Expected: '"12"'
]]></output>
                </test-case>
                <test-case id="0-1451" name="function-formatInteger.formatInteger[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="244869251" result="Passed" start-time="2025-01-14T17:31:20.3517689Z" end-time="2025-01-14T17:31:20.3518614Z" duration="0.000093" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1200, '#,##0')';&#xA; result: &quot;1,200&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(1200, '#,##0')'
Result: '"1,200"'
Expected: '"1,200"'
]]></output>
                </test-case>
                <test-case id="0-1452" name="function-formatInteger.formatInteger[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1783825360" result="Passed" start-time="2025-01-14T17:31:20.3518727Z" end-time="2025-01-14T17:31:20.3519525Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(120000, '#,##0')';&#xA; result: &quot;120,000&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(120000, '#,##0')'
Result: '"120,000"'
Expected: '"120,000"'
]]></output>
                </test-case>
                <test-case id="0-1453" name="function-formatInteger.formatInteger[20]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[20]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="423715423" result="Passed" start-time="2025-01-14T17:31:20.3519603Z" end-time="2025-01-14T17:31:20.3520331Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12345678, '#,##0')';&#xA; result: &quot;12,345,678&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(12345678, '#,##0')'
Result: '"12,345,678"'
Expected: '"12,345,678"'
]]></output>
                </test-case>
                <test-case id="0-1454" name="function-formatInteger.formatInteger[21]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[21]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="90627951" result="Passed" start-time="2025-01-14T17:31:20.3520406Z" end-time="2025-01-14T17:31:20.3521087Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890, '#,##0')';&#xA; result: &quot;1,234,567,890&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(1234567890, '#,##0')'
Result: '"1,234,567,890"'
Expected: '"1,234,567,890"'
]]></output>
                </test-case>
                <test-case id="0-1455" name="function-formatInteger.formatInteger[22]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[22]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="664182207" result="Passed" start-time="2025-01-14T17:31:20.3521179Z" end-time="2025-01-14T17:31:20.3521878Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890, '#,###,##0')';&#xA; result: &quot;1,234,567,890&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(1234567890, '#,###,##0')'
Result: '"1,234,567,890"'
Expected: '"1,234,567,890"'
]]></output>
                </test-case>
                <test-case id="0-1456" name="function-formatInteger.formatInteger[23]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[23]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1422424946" result="Failed" start-time="2025-01-14T17:31:20.3521950Z" end-time="2025-01-14T17:31:20.3526663Z" duration="0.000472" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890, '#:###,##0')';&#xA; result: &quot;1234:567,890&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1234:567,890"', got '"1,234,:567,890"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should insert non-regular groups - different chars'
Expr is '$formatInteger(1234567890, '#:###,##0')'
Result: '"1,234,:567,890"'
Expected: '"1234:567,890"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1234:567,890"', got '"1,234,:567,890"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1457" name="function-formatInteger.formatInteger[24]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[24]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1219640860" result="Failed" start-time="2025-01-14T17:31:20.3526765Z" end-time="2025-01-14T17:31:20.3533189Z" duration="0.000643" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890, '##,##,##0')';&#xA; result: &quot;12345,67,890&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"12345,67,890"', got '"1,234,567,890"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should insert non-regular groups - different positions'
Expr is '$formatInteger(1234567890, '##,##,##0')'
Result: '"1,234,567,890"'
Expected: '"12345,67,890"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"12345,67,890"', got '"1,234,567,890"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1458" name="function-formatInteger.formatInteger[25]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[25]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1537708132" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3533407Z" end-time="2025-01-14T17:31:20.3551860Z" duration="0.001846" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(0, 'I')';&#xA; result: &quot;&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '0'
Expr is '$formatInteger(0, 'I')'
]]></output>
                </test-case>
                <test-case id="0-1459" name="function-formatInteger.formatInteger[26]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[26]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="3738328" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3552137Z" end-time="2025-01-14T17:31:20.3556276Z" duration="0.000414" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1984, 'I')';&#xA; result: &quot;MCMLXXXIV&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1984'
Expr is '$formatInteger(1984, 'I')'
]]></output>
                </test-case>
                <test-case id="0-1460" name="function-formatInteger.formatInteger[27]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[27]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1245711859" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3556405Z" end-time="2025-01-14T17:31:20.3559733Z" duration="0.000333" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(99, 'i')';&#xA; result: &quot;xcix&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '99'
Expr is '$formatInteger(99, 'i')'
]]></output>
                </test-case>
                <test-case id="0-1461" name="function-formatInteger.formatInteger[28]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[28]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2069977346" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3559869Z" end-time="2025-01-14T17:31:20.3563384Z" duration="0.000352" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, 'w')';&#xA; result: &quot;twelve&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '12'
Expr is '$formatInteger(12, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1462" name="function-formatInteger.formatInteger[29]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[29]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="364240785" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3563498Z" end-time="2025-01-14T17:31:20.3566343Z" duration="0.000285" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(20, 'w')';&#xA; result: &quot;twenty&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '20'
Expr is '$formatInteger(20, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1463" name="function-formatInteger.formatInteger[30]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[30]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="868992205" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3566442Z" end-time="2025-01-14T17:31:20.3569319Z" duration="0.000288" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(34, 'w')';&#xA; result: &quot;thirty-four&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '34'
Expr is '$formatInteger(34, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1464" name="function-formatInteger.formatInteger[31]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[31]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="935675627" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3569419Z" end-time="2025-01-14T17:31:20.3573272Z" duration="0.000386" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(99, 'W')';&#xA; result: &quot;NINETY-NINE&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '99'
Expr is '$formatInteger(99, 'W')'
]]></output>
                </test-case>
                <test-case id="0-1465" name="function-formatInteger.formatInteger[32]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[32]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1910336635" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3573423Z" end-time="2025-01-14T17:31:20.3576870Z" duration="0.000345" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(100, 'w')';&#xA; result: &quot;one hundred&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '100'
Expr is '$formatInteger(100, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1466" name="function-formatInteger.formatInteger[33]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[33]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1767643313" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3576971Z" end-time="2025-01-14T17:31:20.3579764Z" duration="0.000279" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(555, 'W')';&#xA; result: &quot;FIVE HUNDRED AND FIFTY-FIVE&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '555'
Expr is '$formatInteger(555, 'W')'
]]></output>
                </test-case>
                <test-case id="0-1467" name="function-formatInteger.formatInteger[34]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[34]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1229467207" result="Failed" start-time="2025-01-14T17:31:20.3579862Z" end-time="2025-01-14T17:31:20.3583799Z" duration="0.000394" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(555, 'Ww')';&#xA; result: &quot;Five Hundred and Fifty-Five&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Five Hundred and Fifty-Five"', got '"Ww"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '555'
Expr is '$formatInteger(555, 'Ww')'
Result: '"Ww"'
Expected: '"Five Hundred and Fifty-Five"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Five Hundred and Fifty-Five"', got '"Ww"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1468" name="function-formatInteger.formatInteger[35]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[35]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="859770558" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3583895Z" end-time="2025-01-14T17:31:20.3587244Z" duration="0.000335" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(919, 'w')';&#xA; result: &quot;nine hundred and nineteen&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '919'
Expr is '$formatInteger(919, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1469" name="function-formatInteger.formatInteger[36]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[36]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1795029408" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3587349Z" end-time="2025-01-14T17:31:20.3590052Z" duration="0.000271" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(730, 'w')';&#xA; result: &quot;seven hundred and thirty&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '730'
Expr is '$formatInteger(730, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1470" name="function-formatInteger.formatInteger[37]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[37]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1917025594" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3590186Z" end-time="2025-01-14T17:31:20.3593151Z" duration="0.000297" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1000, 'w')';&#xA; result: &quot;one thousand&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1000'
Expr is '$formatInteger(1000, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1471" name="function-formatInteger.formatInteger[38]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[38]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="748073965" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3593250Z" end-time="2025-01-14T17:31:20.3595688Z" duration="0.000244" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(3730, 'w')';&#xA; result: &quot;three thousand, seven hundred and thirty&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '3730'
Expr is '$formatInteger(3730, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1472" name="function-formatInteger.formatInteger[39]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[39]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="331262476" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3595772Z" end-time="2025-01-14T17:31:20.3599024Z" duration="0.000326" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(327730, 'w')';&#xA; result: &quot;three hundred and twenty-seven thousand, seven hundred and thirty&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '327730'
Expr is '$formatInteger(327730, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1473" name="function-formatInteger.formatInteger[40]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[40]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2032111978" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3599287Z" end-time="2025-01-14T17:31:20.3603134Z" duration="0.000385" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(4327730, 'w')';&#xA; result: &quot;four million, three hundred and twenty-seven thousand, seven hundred and thirty&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '4327730'
Expr is '$formatInteger(4327730, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1474" name="function-formatInteger.formatInteger[41]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[41]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="772560304" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3603266Z" end-time="2025-01-14T17:31:20.3606062Z" duration="0.000280" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1000000000001, 'w')';&#xA; result: &quot;one trillion and one&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e12 + 1'
Expr is '$formatInteger(1000000000001, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1475" name="function-formatInteger.formatInteger[42]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[42]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="203413976" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3606358Z" end-time="2025-01-14T17:31:20.3609328Z" duration="0.000297" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890123, 'w')';&#xA; result: &quot;one trillion, two hundred and thirty-four billion, five hundred and sixty-seven million, eight hundred and ninety thousand, one hundred and twenty-three&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1234567890123'
Expr is '$formatInteger(1234567890123, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1476" name="function-formatInteger.formatInteger[43]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[43]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1682688031" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3609427Z" end-time="2025-01-14T17:31:20.3612161Z" duration="0.000274" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1000000000000000, 'w')';&#xA; result: &quot;one thousand trillion&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e15'
Expr is '$formatInteger(1000000000000000, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1477" name="function-formatInteger.formatInteger[44]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[44]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1070462427" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3612275Z" end-time="2025-01-14T17:31:20.3618949Z" duration="0.000668" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1e+46, 'w')';&#xA; result: &quot;ten billion trillion trillion trillion&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e46'
Expr is '$formatInteger(1e+46, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1478" name="function-formatInteger.formatInteger[45]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[45]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1826481639" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3619267Z" end-time="2025-01-14T17:31:20.3624113Z" duration="0.000485" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890123456, 'w')';&#xA; result: &quot;one thousand, two hundred and thirty-four trillion, five hundred and sixty-seven billion, eight hundred and ninety million, one hundred and twenty-three thousand, four hundred and fifty-six&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1234567890123456'
Expr is '$formatInteger(1234567890123456, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1479" name="function-formatInteger.formatInteger[46]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[46]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="627993435" result="Failed" start-time="2025-01-14T17:31:20.3624248Z" end-time="2025-01-14T17:31:20.3629160Z" duration="0.000491" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, 'w;o')';&#xA; result: &quot;twelfth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"twelfth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '12'
Expr is '$formatInteger(12, 'w;o')'
Result: '"w"'
Expected: '"twelfth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"twelfth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1480" name="function-formatInteger.formatInteger[47]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[47]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="39257263" result="Failed" start-time="2025-01-14T17:31:20.3629304Z" end-time="2025-01-14T17:31:20.3633086Z" duration="0.000378" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(20, 'w;o')';&#xA; result: &quot;twentieth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"twentieth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '20'
Expr is '$formatInteger(20, 'w;o')'
Result: '"w"'
Expected: '"twentieth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"twentieth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1481" name="function-formatInteger.formatInteger[48]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[48]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1604236701" result="Failed" start-time="2025-01-14T17:31:20.3633186Z" end-time="2025-01-14T17:31:20.3636102Z" duration="0.000292" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(34, 'w;o')';&#xA; result: &quot;thirty-fourth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"thirty-fourth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '34'
Expr is '$formatInteger(34, 'w;o')'
Result: '"w"'
Expected: '"thirty-fourth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"thirty-fourth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1482" name="function-formatInteger.formatInteger[49]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[49]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1604979317" result="Failed" start-time="2025-01-14T17:31:20.3636224Z" end-time="2025-01-14T17:31:20.3639703Z" duration="0.000348" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(99, 'W;o')';&#xA; result: &quot;NINETY-NINTH&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"NINETY-NINTH"', got '"W"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '99'
Expr is '$formatInteger(99, 'W;o')'
Result: '"W"'
Expected: '"NINETY-NINTH"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"NINETY-NINTH"', got '"W"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1483" name="function-formatInteger.formatInteger[50]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[50]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1317207929" result="Failed" start-time="2025-01-14T17:31:20.3639797Z" end-time="2025-01-14T17:31:20.3643189Z" duration="0.000339" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(100, 'w;o')';&#xA; result: &quot;one hundredth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"one hundredth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '100'
Expr is '$formatInteger(100, 'w;o')'
Result: '"w"'
Expected: '"one hundredth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"one hundredth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1484" name="function-formatInteger.formatInteger[51]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[51]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="608904285" result="Failed" start-time="2025-01-14T17:31:20.3643293Z" end-time="2025-01-14T17:31:20.3646442Z" duration="0.000315" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(555, 'W;o')';&#xA; result: &quot;FIVE HUNDRED AND FIFTY-FIFTH&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"FIVE HUNDRED AND FIFTY-FIFTH"', got '"W"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '555'
Expr is '$formatInteger(555, 'W;o')'
Result: '"W"'
Expected: '"FIVE HUNDRED AND FIFTY-FIFTH"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"FIVE HUNDRED AND FIFTY-FIFTH"', got '"W"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1485" name="function-formatInteger.formatInteger[52]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[52]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1153712379" result="Failed" start-time="2025-01-14T17:31:20.3646535Z" end-time="2025-01-14T17:31:20.3650117Z" duration="0.000358" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(919, 'w;o')';&#xA; result: &quot;nine hundred and nineteenth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"nine hundred and nineteenth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '919'
Expr is '$formatInteger(919, 'w;o')'
Result: '"w"'
Expected: '"nine hundred and nineteenth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"nine hundred and nineteenth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1486" name="function-formatInteger.formatInteger[53]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[53]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1943930964" result="Failed" start-time="2025-01-14T17:31:20.3650221Z" end-time="2025-01-14T17:31:20.3653679Z" duration="0.000346" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(730, 'w;o')';&#xA; result: &quot;seven hundred and thirtieth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"seven hundred and thirtieth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '730'
Expr is '$formatInteger(730, 'w;o')'
Result: '"w"'
Expected: '"seven hundred and thirtieth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"seven hundred and thirtieth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1487" name="function-formatInteger.formatInteger[54]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[54]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1536253746" result="Failed" start-time="2025-01-14T17:31:20.3653773Z" end-time="2025-01-14T17:31:20.3657599Z" duration="0.000383" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1000, 'w;o')';&#xA; result: &quot;one thousandth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"one thousandth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '1000'
Expr is '$formatInteger(1000, 'w;o')'
Result: '"w"'
Expected: '"one thousandth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"one thousandth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1488" name="function-formatInteger.formatInteger[55]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[55]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1428594315" result="Failed" start-time="2025-01-14T17:31:20.3657720Z" end-time="2025-01-14T17:31:20.3663404Z" duration="0.000569" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(3731, 'w;o')';&#xA; result: &quot;three thousand, seven hundred and thirty-first&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"three thousand, seven hundred and thirty-first"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '3730'
Expr is '$formatInteger(3731, 'w;o')'
Result: '"w"'
Expected: '"three thousand, seven hundred and thirty-first"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"three thousand, seven hundred and thirty-first"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1489" name="function-formatInteger.formatInteger[56]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[56]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1183397188" result="Failed" start-time="2025-01-14T17:31:20.3663520Z" end-time="2025-01-14T17:31:20.3670210Z" duration="0.000669" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(327713, 'w;o')';&#xA; result: &quot;three hundred and twenty-seven thousand, seven hundred and thirteenth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"three hundred and twenty-seven thousand, seven hundred and thirteenth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '327730'
Expr is '$formatInteger(327713, 'w;o')'
Result: '"w"'
Expected: '"three hundred and twenty-seven thousand, seven hundred and thirteenth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"three hundred and twenty-seven thousand, seven hundred and thirteenth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1490" name="function-formatInteger.formatInteger[57]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[57]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1179177274" result="Failed" start-time="2025-01-14T17:31:20.3670382Z" end-time="2025-01-14T17:31:20.3676682Z" duration="0.000630" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(4327732, 'w;o')';&#xA; result: &quot;four million, three hundred and twenty-seven thousand, seven hundred and thirty-second&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"four million, three hundred and twenty-seven thousand, seven hundred and thirty-second"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '4327730'
Expr is '$formatInteger(4327732, 'w;o')'
Result: '"w"'
Expected: '"four million, three hundred and twenty-seven thousand, seven hundred and thirty-second"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"four million, three hundred and twenty-seven thousand, seven hundred and thirty-second"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1491" name="function-formatInteger.formatInteger[58]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[58]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2042548508" result="Failed" start-time="2025-01-14T17:31:20.3676848Z" end-time="2025-01-14T17:31:20.3681055Z" duration="0.000421" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1000000000001, 'w;o')';&#xA; result: &quot;one trillion and first&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"one trillion and first"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '1e12 + 1'
Expr is '$formatInteger(1000000000001, 'w;o')'
Result: '"w"'
Expected: '"one trillion and first"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"one trillion and first"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1492" name="function-formatInteger.formatInteger[59]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[59]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1634343204" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3681177Z" end-time="2025-01-14T17:31:20.3685669Z" duration="0.000449" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1, 'A')';&#xA; result: &quot;A&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1'
Expr is '$formatInteger(1, 'A')'
]]></output>
                </test-case>
                <test-case id="0-1493" name="function-formatInteger.formatInteger[60]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[60]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="23123943" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3685815Z" end-time="2025-01-14T17:31:20.3690254Z" duration="0.000444" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, 'a')';&#xA; result: &quot;l&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '12'
Expr is '$formatInteger(12, 'a')'
]]></output>
                </test-case>
                <test-case id="0-1494" name="function-formatInteger.formatInteger[61]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[61]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1782368687" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3690390Z" end-time="2025-01-14T17:31:20.3695358Z" duration="0.000497" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(26, 'a')';&#xA; result: &quot;z&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '26'
Expr is '$formatInteger(26, 'a')'
]]></output>
                </test-case>
                <test-case id="0-1495" name="function-formatInteger.formatInteger[62]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[62]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1785558947" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3695502Z" end-time="2025-01-14T17:31:20.3699305Z" duration="0.000380" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(27, 'a')';&#xA; result: &quot;aa&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '27'
Expr is '$formatInteger(27, 'a')'
]]></output>
                </test-case>
                <test-case id="0-1496" name="function-formatInteger.formatInteger[63]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[63]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="297567714" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3699436Z" end-time="2025-01-14T17:31:20.3703616Z" duration="0.000418" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(300, 'A')';&#xA; result: &quot;KN&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '300'
Expr is '$formatInteger(300, 'A')'
]]></output>
                </test-case>
                <test-case id="0-1497" name="function-formatInteger.formatInteger[64]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[64]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1534573398" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.3703749Z" end-time="2025-01-14T17:31:20.3707171Z" duration="0.000342" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(123456, 'A')';&#xA; result: &quot;FZPH&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '123456'
Expr is '$formatInteger(123456, 'A')'
]]></output>
                </test-case>
                <test-case id="0-1498" name="function-formatInteger.formatInteger[65]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[65]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1330134107" result="Failed" start-time="2025-01-14T17:31:20.3707275Z" end-time="2025-01-14T17:31:20.3720465Z" duration="0.001319" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(123456, 'α')';&#xA; result: error D3130" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3130 (), got '"α"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'sequence starting with greek alpha, α'
Expr is '$formatInteger(123456, 'α')'
Result: '"α"'
Expected error D3130
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3130 (), got '"α"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1499" name="function-formatNumber.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="587620148" result="Passed" start-time="2025-01-14T17:31:20.3720587Z" end-time="2025-01-14T17:31:20.3733466Z" duration="0.001288" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(12345.6, &quot;#,###.00&quot;)';&#xA; result: &quot;12,345.60&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(12345.6, "#,###.00")'
Result: '"12,345.60"'
Expected: '"12,345.60"'
]]></output>
                </test-case>
                <test-case id="0-1500" name="function-formatNumber.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="704642949" result="Failed" start-time="2025-01-14T17:31:20.3733674Z" end-time="2025-01-14T17:31:20.3746904Z" duration="0.001323" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(12345678.9, &quot;9,999.99&quot;)';&#xA; result: &quot;12,345,678.90&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"12,345,678.90"', got '"12345,678.90"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(12345678.9, "9,999.99")'
Result: '"12345,678.90"'
Expected: '"12,345,678.90"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"12,345,678.90"', got '"12345,678.90"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1501" name="function-formatNumber.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1190242283" result="Passed" start-time="2025-01-14T17:31:20.3747266Z" end-time="2025-01-14T17:31:20.3749194Z" duration="0.000193" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(123412345678.9, &quot;9,9,99.99&quot;)';&#xA; result: &quot;123412345,6,78.90&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(123412345678.9, "9,9,99.99")'
Result: '"123412345,6,78.90"'
Expected: '"123412345,6,78.90"'
]]></output>
                </test-case>
                <test-case id="0-1502" name="function-formatNumber.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1357941052" result="Passed" start-time="2025-01-14T17:31:20.3749297Z" end-time="2025-01-14T17:31:20.3750362Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(1234.56789, &quot;9,999.999,999&quot;)';&#xA; result: &quot;1,234.567,890&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(1234.56789, "9,999.999,999")'
Result: '"1,234.567,890"'
Expected: '"1,234.567,890"'
]]></output>
                </test-case>
                <test-case id="0-1503" name="function-formatNumber.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1091752434" result="Passed" start-time="2025-01-14T17:31:20.3750468Z" end-time="2025-01-14T17:31:20.3751468Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(123.9, &quot;9999&quot;)';&#xA; result: &quot;0124&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(123.9, "9999")'
Result: '"0124"'
Expected: '"0124"'
]]></output>
                </test-case>
                <test-case id="0-1504" name="function-formatNumber.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1076872556" result="Passed" start-time="2025-01-14T17:31:20.3751573Z" end-time="2025-01-14T17:31:20.3752664Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.14, &quot;01%&quot;)';&#xA; result: &quot;14%&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(0.14, "01%")'
Result: '"14%"'
Expected: '"14%"'
]]></output>
                </test-case>
                <test-case id="0-1505" name="function-formatNumber.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="858689354" result="Passed" start-time="2025-01-14T17:31:20.3752792Z" end-time="2025-01-14T17:31:20.3753698Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.4857,&quot;###.###‰&quot;)';&#xA; result: &quot;485.7‰&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(0.4857,"###.###‰")'
Result: '"485.7‰"'
Expected: '"485.7‰"'
]]></output>
                </test-case>
                <test-case id="0-1506" name="function-formatNumber.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2061090422" result="Failed" start-time="2025-01-14T17:31:20.3753776Z" end-time="2025-01-14T17:31:20.3758653Z" duration="0.000488" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.14, &quot;###pm&quot;, {&quot;per-mille&quot;: &quot;pm&quot;})';&#xA; result: &quot;140pm&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"140pm"', got '"pm"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(0.14, "###pm", {"per-mille": "pm"})'
Result: '"pm"'
Expected: '"140pm"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"140pm"', got '"pm"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1507" name="function-formatNumber.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1899197029" result="Passed" start-time="2025-01-14T17:31:20.3758764Z" end-time="2025-01-14T17:31:20.3760472Z" duration="0.000171" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(-6, &quot;000&quot;)';&#xA; result: &quot;-006&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(-6, "000")'
Result: '"-006"'
Expected: '"-006"'
]]></output>
                </test-case>
                <test-case id="0-1508" name="function-formatNumber.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1798638766" result="Passed" start-time="2025-01-14T17:31:20.3760583Z" end-time="2025-01-14T17:31:20.3761634Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(1234.5678, &quot;00.000e0&quot;)';&#xA; result: &quot;12.346e2&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(1234.5678, "00.000e0")'
Result: '"12.346e2"'
Expected: '"12.346e2"'
]]></output>
                </test-case>
                <test-case id="0-1509" name="function-formatNumber.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2034697622" result="Passed" start-time="2025-01-14T17:31:20.3761737Z" end-time="2025-01-14T17:31:20.3762589Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(1234.5678, &quot;00.000e000&quot;)';&#xA; result: &quot;12.346e002&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(1234.5678, "00.000e000")'
Result: '"12.346e002"'
Expected: '"12.346e002"'
]]></output>
                </test-case>
                <test-case id="0-1510" name="function-formatNumber.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1128977823" result="Failed" start-time="2025-01-14T17:31:20.3762665Z" end-time="2025-01-14T17:31:20.3768316Z" duration="0.000565" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(1234.5678, &quot;①①.①①①e①&quot;, {&quot;zero-digit&quot;: &quot;⑟&quot;})';&#xA; result: &quot;①②.③④⑥e②&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"①②.③④⑥e②"', got '"①①1235①①①e①"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(1234.5678, "①①.①①①e①", {"zero-digit": "⑟"})'
Result: '"①①1235①①①e①"'
Expected: '"①②.③④⑥e②"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"①②.③④⑥e②"', got '"①①1235①①①e①"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1511" name="function-formatNumber.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="351962519" result="Passed" start-time="2025-01-14T17:31:20.3768482Z" end-time="2025-01-14T17:31:20.3769943Z" duration="0.000146" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.234, &quot;0.0e0&quot;)';&#xA; result: &quot;2.3e-1&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(0.234, "0.0e0")'
Result: '"2.3e-1"'
Expected: '"2.3e-1"'
]]></output>
                </test-case>
                <test-case id="0-1512" name="function-formatNumber.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1540642868" result="Failed" start-time="2025-01-14T17:31:20.3770047Z" end-time="2025-01-14T17:31:20.3775529Z" duration="0.000548" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.234, &quot;#.00e0&quot;)';&#xA; result: &quot;0.23e0&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"0.23e0"', got '"2.34e-1"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(0.234, "#.00e0")'
Result: '"2.34e-1"'
Expected: '"0.23e0"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"0.23e0"', got '"2.34e-1"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1513" name="function-formatNumber.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="909714697" result="Failed" start-time="2025-01-14T17:31:20.3775657Z" end-time="2025-01-14T17:31:20.3781201Z" duration="0.000555" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.123, &quot;#.e9&quot;)';&#xA; result: &quot;0.1e0&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"0.1e0"', got '"1e-1"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(0.123, "#.e9")'
Result: '"1e-1"'
Expected: '"0.1e0"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"0.1e0"', got '"1e-1"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1514" name="function-formatNumber.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2111964712" result="Passed" start-time="2025-01-14T17:31:20.3781634Z" end-time="2025-01-14T17:31:20.3783408Z" duration="0.000177" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.234, &quot;.00e0&quot;)';&#xA; result: &quot;.23e0&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(0.234, ".00e0")'
Result: '".23e0"'
Expected: '".23e0"'
]]></output>
                </test-case>
                <test-case id="0-1515" name="function-formatNumber.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1788958805" result="Passed" start-time="2025-01-14T17:31:20.3783528Z" end-time="2025-01-14T17:31:20.3785332Z" duration="0.000180" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(2392.14*(-36.58), &quot;000,000.000###;###,###.000###&quot;)';&#xA; result: &quot;87,504.4812&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(2392.14*(-36.58), "000,000.000###;###,###.000###")'
Result: '"87,504.4812"'
Expected: '"87,504.4812"'
]]></output>
                </test-case>
                <test-case id="0-1516" name="function-formatNumber.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="464998029" result="Passed" start-time="2025-01-14T17:31:20.3785460Z" end-time="2025-01-14T17:31:20.3786934Z" duration="0.000148" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(2.14*86.58,&quot;PREFIX##00.000###SUFFIX&quot;)';&#xA; result: &quot;PREFIX185.2812SUFFIX&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(2.14*86.58,"PREFIX##00.000###SUFFIX")'
Result: '"PREFIX185.2812SUFFIX"'
Expected: '"PREFIX185.2812SUFFIX"'
]]></output>
                </test-case>
                <test-case id="0-1517" name="function-formatNumber.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1194516503" result="Failed" start-time="2025-01-14T17:31:20.3787057Z" end-time="2025-01-14T17:31:20.3794000Z" duration="0.000694" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(1E20,&quot;#,######&quot;)';&#xA; result: &quot;100,000000,000000,000000&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"100,000000,000000,000000"', got '"100000000000000,000000"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(1E20,"#,######")'
Result: '"100000000000000,000000"'
Expected: '"100,000000,000000,000000"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"100,000000,000000,000000"', got '"100000000000000,000000"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1518" name="function-formatNumber.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="260087920" result="Failed" start-time="2025-01-14T17:31:20.3794151Z" end-time="2025-01-14T17:31:20.3798600Z" duration="0.000445" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#;#;#&quot;)';&#xA; result: error D3080" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3080 (), got '"20"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#;#;#")'
Result: '"20"'
Expected error D3080
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3080 (), got '"20"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1519" name="function-formatNumber.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1929446895" result="Failed" start-time="2025-01-14T17:31:20.3798721Z" end-time="2025-01-14T17:31:20.3802066Z" duration="0.000335" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#.0.0&quot;)';&#xA; result: error D3081" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3081 (), got '"20.00"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#.0.0")'
Result: '"20.00"'
Expected error D3081
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3081 (), got '"20.00"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1520" name="function-formatNumber.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2113889318" result="Failed" start-time="2025-01-14T17:31:20.3802173Z" end-time="2025-01-14T17:31:20.3805593Z" duration="0.000342" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0%%&quot;)';&#xA; result: error D3082" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3082 (), got '"200000%%"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0%%")'
Result: '"200000%%"'
Expected error D3082
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3082 (), got '"200000%%"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1521" name="function-formatNumber.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="231389567" result="Failed" start-time="2025-01-14T17:31:20.3805709Z" end-time="2025-01-14T17:31:20.3812200Z" duration="0.000650" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0‰‰&quot;)';&#xA; result: error D3083" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3083 (), got '"20000000‰‰"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0‰‰")'
Result: '"20000000‰‰"'
Expected error D3083
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3083 (), got '"20000000‰‰"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1522" name="function-formatNumber.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1948356539" result="Failed" start-time="2025-01-14T17:31:20.3812359Z" end-time="2025-01-14T17:31:20.3818000Z" duration="0.000564" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0%‰&quot;)';&#xA; result: error D3084" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3084 (), got '"2000000%‰"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0%‰")'
Result: '"2000000%‰"'
Expected error D3084
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3084 (), got '"2000000%‰"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1523" name="function-formatNumber.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1823857017" result="Failed" start-time="2025-01-14T17:31:20.3818145Z" end-time="2025-01-14T17:31:20.3823849Z" duration="0.000571" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;.e0&quot;)';&#xA; result: error D3085" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3085 (), got '"e0"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,".e0")'
Result: '"e0"'
Expected error D3085
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3085 (), got '"e0"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1524" name="function-formatNumber.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="615852134" result="Failed" start-time="2025-01-14T17:31:20.3824031Z" end-time="2025-01-14T17:31:20.3828939Z" duration="0.000491" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;0+.e0&quot;)';&#xA; result: error D3086" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3086 (), got '"2+e1"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"0+.e0")'
Result: '"2+e1"'
Expected error D3086
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3086 (), got '"2+e1"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1525" name="function-formatNumber.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2021960733" result="Failed" start-time="2025-01-14T17:31:20.3829096Z" end-time="2025-01-14T17:31:20.3833774Z" duration="0.000468" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;0,.e0&quot;)';&#xA; result: error D3087" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3087 (), got '"2,e1"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"0,.e0")'
Result: '"2,e1"'
Expected error D3087
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3087 (), got '"2,e1"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1526" name="function-formatNumber.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1261214408" result="Failed" start-time="2025-01-14T17:31:20.3833899Z" end-time="2025-01-14T17:31:20.3838638Z" duration="0.000474" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;0,&quot;)';&#xA; result: error D3088" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3088 (), got '"20,"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"0,")'
Result: '"20,"'
Expected error D3088
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3088 (), got '"20,"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1527" name="function-formatNumber.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="308138533" result="Failed" start-time="2025-01-14T17:31:20.3838760Z" end-time="2025-01-14T17:31:20.3844410Z" duration="0.000565" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;0,,0&quot;)';&#xA; result: error D3089" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3089 (), got '"2,,0"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"0,,0")'
Result: '"2,,0"'
Expected error D3089
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3089 (), got '"2,,0"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1528" name="function-formatNumber.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="249743291" result="Failed" start-time="2025-01-14T17:31:20.3844533Z" end-time="2025-01-14T17:31:20.3849251Z" duration="0.000472" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;0#.e0&quot;)';&#xA; result: error D3090" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3090 (), got '"20e0"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"0#.e0")'
Result: '"20e0"'
Expected error D3090
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3090 (), got '"20e0"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1529" name="function-formatNumber.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1134485004" result="Failed" start-time="2025-01-14T17:31:20.3849409Z" end-time="2025-01-14T17:31:20.3853360Z" duration="0.000395" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0.#0e0&quot;)';&#xA; result: error D3091" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3091 (), got '"20.00e0"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0.#0e0")'
Result: '"20.00e0"'
Expected error D3091
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3091 (), got '"20.00e0"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1530" name="function-formatNumber.case031" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case031" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2053329909" result="Failed" start-time="2025-01-14T17:31:20.3853504Z" end-time="2025-01-14T17:31:20.3856899Z" duration="0.000340" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0.0e0%&quot;)';&#xA; result: error D3092" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3092 (), got '"20.0e2%"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0.0e0%")'
Result: '"20.0e2%"'
Expected error D3092
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3092 (), got '"20.0e2%"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1531" name="function-formatNumber.case032" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case032" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="148114633" result="Failed" start-time="2025-01-14T17:31:20.3857049Z" end-time="2025-01-14T17:31:20.3860142Z" duration="0.000309" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0.0e0,0&quot;)';&#xA; result: error D3093" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3093 (), got '"20.0e0,0"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0.0e0,0")'
Result: '"20.0e0,0"'
Expected error D3093
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3093 (), got '"20.0e0,0"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1532" name="function-formatNumber.case033" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case033" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1887811967" result="Passed" start-time="2025-01-14T17:31:20.3860292Z" end-time="2025-01-14T17:31:20.3861253Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(2, '000.000')';&#xA; result: &quot;002.000&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(2, '000.000')'
Result: '"002.000"'
Expected: '"002.000"'
]]></output>
                </test-case>
                <test-case id="0-1533" name="function-formatNumber.case034" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case034" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1238861491" result="Failed" start-time="2025-01-14T17:31:20.3861329Z" end-time="2025-01-14T17:31:20.3864697Z" duration="0.000337" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(2, 'AAA.AAA', {'zero-digit': 'A'})';&#xA; result: &quot;AAC.AAA&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"AAC.AAA"', got '"AAA2AAA"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(2, 'AAA.AAA', {'zero-digit': 'A'})'
Result: '"AAA2AAA"'
Expected: '"AAC.AAA"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"AAC.AAA"', got '"AAA2AAA"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1534" name="function-formatNumber.case035" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case035" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2070834133" result="Failed" start-time="2025-01-14T17:31:20.3864790Z" end-time="2025-01-14T17:31:20.3867923Z" duration="0.000313" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.1, 'AeAAA', {'zero-digit': 'A'})';&#xA; result: &quot;Be-AAB&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Be-AAB"', got '"AeAAA"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(0.1, 'AeAAA', {'zero-digit': 'A'})'
Result: '"AeAAA"'
Expected: '"Be-AAB"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Be-AAB"', got '"AeAAA"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1535" name="function-formatNumber.case036" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case036" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="996498627" result="Passed" start-time="2025-01-14T17:31:20.3868009Z" end-time="2025-01-14T17:31:20.3869823Z" duration="0.000182" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(foo, '#0.00')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(foo, '#0.00')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1536" name="function-fromMillis.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="246295649" result="Failed" start-time="2025-01-14T17:31:20.3869944Z" end-time="2025-01-14T17:31:20.3976619Z" duration="0.010668" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1)';&#xA; result: &quot;1970-01-01T00:00:00.001Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1970-01-01T00:00:00.001Z"', got '"1970-01-01T00:00:00.001+00:00"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$fromMillis(1)'
Result: '"1970-01-01T00:00:00.001+00:00"'
Expected: '"1970-01-01T00:00:00.001Z"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1970-01-01T00:00:00.001Z"', got '"1970-01-01T00:00:00.001+00:00"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1537" name="function-fromMillis.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="513226883" result="Failed" start-time="2025-01-14T17:31:20.3976911Z" end-time="2025-01-14T17:31:20.3984180Z" duration="0.000727" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1509380732935)';&#xA; result: &quot;2017-10-30T16:25:32.935Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2017-10-30T16:25:32.935Z"', got '"2017-10-30T16:25:32.935+00:00"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$fromMillis(1509380732935)'
Result: '"2017-10-30T16:25:32.935+00:00"'
Expected: '"2017-10-30T16:25:32.935Z"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2017-10-30T16:25:32.935Z"', got '"2017-10-30T16:25:32.935+00:00"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1538" name="function-fromMillis.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="240335373" result="Passed" start-time="2025-01-14T17:31:20.3984384Z" end-time="2025-01-14T17:31:20.3985912Z" duration="0.000153" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(foo)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$fromMillis(foo)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1539" name="function-fromMillis.formatDateTime[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1897698578" result="Passed" start-time="2025-01-14T17:31:20.3986013Z" end-time="2025-01-14T17:31:20.3986725Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(undefined, 'undefined')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Description: 'should return nothing'
Expr is '$fromMillis(undefined, 'undefined')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1540" name="function-fromMillis.formatDateTime[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1240105604" result="Failed" start-time="2025-01-14T17:31:20.3986794Z" end-time="2025-01-14T17:31:20.3990024Z" duration="0.000323" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, 'Hello')';&#xA; result: &quot;Hello&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Hello"', got '"10ello"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should return literal'
Expr is '$fromMillis(1521801216617, 'Hello')'
Result: '"10ello"'
Expected: '"Hello"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Hello"', got '"10ello"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1541" name="function-fromMillis.formatDateTime[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="44733935" result="Failed" start-time="2025-01-14T17:31:20.3990114Z" end-time="2025-01-14T17:31:20.3993281Z" duration="0.000317" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, 'Year: [Y0001]')';&#xA; result: &quot;Year: 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Year: 2018"', got '"Year: [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the year'
Expr is '$fromMillis(1521801216617, 'Year: [Y0001]')'
Result: '"Year: [Y0001]"'
Expected: '"Year: 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Year: 2018"', got '"Year: [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1542" name="function-fromMillis.formatDateTime[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1885098627" result="Failed" start-time="2025-01-14T17:31:20.3993398Z" end-time="2025-01-14T17:31:20.3997367Z" duration="0.000397" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, 'Year: &lt;[Y0001]&gt;')';&#xA; result: &quot;Year: &lt;2018&gt;&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Year: <2018>"', got '"Year: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the year'
Expr is '$fromMillis(1521801216617, 'Year: <[Y0001]>')'
Result: '"Year: <[Y0001]>"'
Expected: '"Year: <2018>"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Year: <2018>"', got '"Year: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1543" name="function-fromMillis.formatDateTime[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1541380340" result="Failed" start-time="2025-01-14T17:31:20.3997496Z" end-time="2025-01-14T17:31:20.4001000Z" duration="0.000351" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, 'Year: &lt;[Y9,999,*]&gt;')';&#xA; result: &quot;Year: &lt;2,018&gt;&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Year: <2,018>"', got '"Year: <[Y9,999,*]>"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the year with grouping separator'
Expr is '$fromMillis(1521801216617, 'Year: <[Y9,999,*]>')'
Result: '"Year: <[Y9,999,*]>"'
Expected: '"Year: <2,018>"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Year: <2,018>"', got '"Year: <[Y9,999,*]>"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1544" name="function-fromMillis.formatDateTime[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="54419365" result="Failed" start-time="2025-01-14T17:31:20.4001101Z" end-time="2025-01-14T17:31:20.4004445Z" duration="0.000335" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[[Year: &lt;[Y0001]&gt;')';&#xA; result: &quot;[Year: &lt;2018&gt;&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"[Year: <2018>"', got '"[[Year: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should handle opening square bracket literal'
Expr is '$fromMillis(1521801216617, '[[Year: <[Y0001]>')'
Result: '"[[Year: <[Y0001]>"'
Expected: '"[Year: <2018>"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"[Year: <2018>"', got '"[[Year: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1545" name="function-fromMillis.formatDateTime[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="827214755" result="Failed" start-time="2025-01-14T17:31:20.4004568Z" end-time="2025-01-14T17:31:20.4008270Z" duration="0.000370" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, 'Year]]: &lt;[Y0001]&gt;')';&#xA; result: &quot;Year]: &lt;2018&gt;&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Year]: <2018>"', got '"Year]]: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should handle closing square bracket literal'
Expr is '$fromMillis(1521801216617, 'Year]]: <[Y0001]>')'
Result: '"Year]]: <[Y0001]>"'
Expected: '"Year]: <2018>"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Year]: <2018>"', got '"Year]]: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1546" name="function-fromMillis.formatDateTime[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="501905640" result="Failed" start-time="2025-01-14T17:31:20.4008370Z" end-time="2025-01-14T17:31:20.4011686Z" duration="0.000332" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[[Year]]: [[[Y0001]]]')';&#xA; result: &quot;[Year]: [2018]&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"[Year]: [2018]"', got '"[[Year]]: [[[Y0001]]]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should handle opening and closing square bracket literal'
Expr is '$fromMillis(1521801216617, '[[Year]]: [[[Y0001]]]')'
Result: '"[[Year]]: [[[Y0001]]]"'
Expected: '"[Year]: [2018]"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"[Year]: [2018]"', got '"[[Year]]: [[[Y0001]]]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1547" name="function-fromMillis.formatDateTime[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="724628507" result="Failed" start-time="2025-01-14T17:31:20.4011797Z" end-time="2025-01-14T17:31:20.4023404Z" duration="0.001161" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D#1]/[M#1]/[Y0001]')';&#xA; result: &quot;23/3/2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23/3/2018"', got '"[D#1].[3#1].[Y0001]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the date in European style'
Expr is '$fromMillis(1521801216617, '[D#1]/[M#1]/[Y0001]')'
Result: '"[D#1].[3#1].[Y0001]"'
Expected: '"23/3/2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23/3/2018"', got '"[D#1].[3#1].[Y0001]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1548" name="function-fromMillis.formatDateTime[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="58642878" result="Failed" start-time="2025-01-14T17:31:20.4023680Z" end-time="2025-01-14T17:31:20.4028907Z" duration="0.000523" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1522616700000, '[F0] [FNn]')';&#xA; result: &quot;7 Sunday&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"7 Sunday"', got '"[0] [Nn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sunday should be day 7'
Expr is '$fromMillis(1522616700000, '[F0] [FNn]')'
Result: '"[0] [Nn]"'
Expected: '"7 Sunday"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"7 Sunday"', got '"[0] [Nn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1549" name="function-fromMillis.formatDateTime[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2140893529" result="Failed" start-time="2025-01-14T17:31:20.4029129Z" end-time="2025-01-14T17:31:20.4033488Z" duration="0.000436" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1522703100000, '[F0] [FNn]')';&#xA; result: &quot;1 Monday&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1 Monday"', got '"[0] [Nn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Monday should be day 1'
Expr is '$fromMillis(1522703100000, '[F0] [FNn]')'
Result: '"[0] [Nn]"'
Expected: '"1 Monday"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1 Monday"', got '"[0] [Nn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1550" name="function-fromMillis.formatDateTime[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1320560918" result="Failed" start-time="2025-01-14T17:31:20.4033687Z" end-time="2025-01-14T17:31:20.4038176Z" duration="0.000449" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Y0001]-[M01]-[D01]')';&#xA; result: &quot;2018-03-23&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-03-23"', got '"[Y0001]-[301]-[D01]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the date in ISO 8601 style'
Expr is '$fromMillis(1521801216617, '[Y0001]-[M01]-[D01]')'
Result: '"[Y0001]-[301]-[D01]"'
Expected: '"2018-03-23"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-03-23"', got '"[Y0001]-[301]-[D01]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1551" name="function-fromMillis.formatDateTime[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1250534858" result="Failed" start-time="2025-01-14T17:31:20.4047572Z" end-time="2025-01-14T17:31:20.4054343Z" duration="0.000677" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]')';&#xA; result: &quot;03/23/2018 at 10:33:36&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"03/23/2018 at 10:33:36"', got '"[301].[D01].[Y0001] a [1001]:[3301]:[3601]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the date & time in US style'
Expr is '$fromMillis(1521801216617, '[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]')'
Result: '"[301].[D01].[Y0001] a [1001]:[3301]:[3601]"'
Expected: '"03/23/2018 at 10:33:36"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"03/23/2018 at 10:33:36"', got '"[301].[D01].[Y0001] a [1001]:[3301]:[3601]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1552" name="function-fromMillis.formatDateTime[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1274485478" result="Failed" start-time="2025-01-14T17:31:20.4054532Z" end-time="2025-01-14T17:31:20.4058755Z" duration="0.000422" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z01:01t]')';&#xA; result: &quot;2018-03-23T10:33:36.617Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-03-23T10:33:36.617Z"', got '"[Y]-[301]-[D01]T[1001]:[33]:[36].[6001][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the date & time in ISO 8601 style'
Expr is '$fromMillis(1521801216617, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z01:01t]')'
Result: '"[Y]-[301]-[D01]T[1001]:[33]:[36].[6001][Z01:01]"'
Expected: '"2018-03-23T10:33:36.617Z"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-03-23T10:33:36.617Z"', got '"[Y]-[301]-[D01]T[1001]:[33]:[36].[6001][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1553" name="function-fromMillis.formatDateTime[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1548170859" result="Failed" start-time="2025-01-14T17:31:20.4058873Z" end-time="2025-01-14T17:31:20.4063467Z" duration="0.000460" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Y]-[ M01]-[D 01]T[H01 ]:[ m   ]:[s].[f0  01][Z01:&#xA; 01t]')';&#xA; result: &quot;2018-03-23T10:33:36.617Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-03-23T10:33:36.617Z"', got '"[Y]-[ 301]-[D 01]T[1001 ]:[ 33   ]:[36].[60  01][Z01:\n 01]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should ignore whitespace in variable markers'
Expr is '$fromMillis(1521801216617, '[Y]-[ M01]-[D 01]T[H01 ]:[ m   ]:[s].[f0  01][Z01:
 01t]')'
Result: '"[Y]-[ 301]-[D 01]T[1001 ]:[ 33   ]:[36].[60  01][Z01:\n 01]"'
Expected: '"2018-03-23T10:33:36.617Z"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-03-23T10:33:36.617Z"', got '"[Y]-[ 301]-[D 01]T[1001 ]:[ 33   ]:[36].[60  01][Z01:\n 01]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1554" name="function-fromMillis.formatDateTime[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="621214477" result="Failed" start-time="2025-01-14T17:31:20.4063707Z" end-time="2025-01-14T17:31:20.4068437Z" duration="0.000473" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0100')';&#xA; result: &quot;2018-03-23T13:33:36.617+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-03-23T13:33:36.617+03:00"', got '"[Y]-[301]-[D01]T[1101]:[33]:[36].[6001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for BST +0100'
Expr is '$fromMillis(1521801216617, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0100')'
Result: '"[Y]-[301]-[D01]T[1101]:[33]:[36].[6001][Z0101]"'
Expected: '"2018-03-23T13:33:36.617+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-03-23T13:33:36.617+03:00"', got '"[Y]-[301]-[D01]T[1101]:[33]:[36].[6001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1555" name="function-fromMillis.formatDateTime[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="473253382" result="Failed" start-time="2025-01-14T17:31:20.4068657Z" end-time="2025-01-14T17:31:20.4073631Z" duration="0.000498" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z01:01]')';&#xA; result: &quot;2018-07-11T15:00:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z01:01]')'
Result: '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
Expected: '"2018-07-11T15:00:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1556" name="function-fromMillis.formatDateTime[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1389369391" result="Failed" start-time="2025-01-14T17:31:20.4073943Z" end-time="2025-01-14T17:31:20.4079355Z" duration="0.000541" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z01:01t]')';&#xA; result: &quot;2018-07-11T12:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T12:00:00Z"', got '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for Z'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z01:01t]')'
Result: '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
Expected: '"2018-07-11T12:00:00Z"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T12:00:00Z"', got '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1557" name="function-fromMillis.formatDateTime[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1681567682" result="Failed" start-time="2025-01-14T17:31:20.4079520Z" end-time="2025-01-14T17:31:20.4083044Z" duration="0.000353" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z]', '-0500')';&#xA; result: &quot;2018-07-11T15:00:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][Z]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z]', '-0500')'
Result: '"[Y]-[701]-[D01]T[701]:[0]:[0][Z]"'
Expected: '"2018-07-11T15:00:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][Z]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1558" name="function-fromMillis.formatDateTime[20]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[20]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="475900300" result="Failed" start-time="2025-01-14T17:31:20.4083143Z" end-time="2025-01-14T17:31:20.4087511Z" duration="0.000437" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '-0500')';&#xA; result: &quot;2018-07-11T07:00:00-5&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T07:00:00-5"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '-0500')'
Result: '"[Y]-[701]-[D01]T[701]:[0]:[0][Z0]"'
Expected: '"2018-07-11T07:00:00-5"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T07:00:00-5"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1559" name="function-fromMillis.formatDateTime[21]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[21]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1202395470" result="Failed" start-time="2025-01-14T17:31:20.4087683Z" end-time="2025-01-14T17:31:20.4091589Z" duration="0.000391" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z]', '+1000')';&#xA; result: &quot;2018-07-11T15:00:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z]', '+1000')'
Result: '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z]"'
Expected: '"2018-07-11T15:00:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1560" name="function-fromMillis.formatDateTime[22]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[22]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1744958593" result="Failed" start-time="2025-01-14T17:31:20.4091706Z" end-time="2025-01-14T17:31:20.4095004Z" duration="0.000330" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '+1000')';&#xA; result: &quot;2018-07-11T15:00:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '+1000')'
Result: '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z0]"'
Expected: '"2018-07-11T15:00:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1561" name="function-fromMillis.formatDateTime[23]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[23]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1752951889" result="Failed" start-time="2025-01-14T17:31:20.4095118Z" end-time="2025-01-14T17:31:20.4099106Z" duration="0.000399" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '+0530')';&#xA; result: &quot;2018-07-11T17:30:00+5:30&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T17:30:00+5:30"', got '"[Y]-[701]-[D01]T[1701]:[30]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '+0530')'
Result: '"[Y]-[701]-[D01]T[1701]:[30]:[0][Z0]"'
Expected: '"2018-07-11T17:30:00+5:30"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T17:30:00+5:30"', got '"[Y]-[701]-[D01]T[1701]:[30]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1562" name="function-fromMillis.formatDateTime[24]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[24]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1649453738" result="Failed" start-time="2025-01-14T17:31:20.4099213Z" end-time="2025-01-14T17:31:20.4102866Z" duration="0.000366" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][z]', '-0500')';&#xA; result: &quot;2018-07-11T07:00:00GMT-05:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T07:00:00GMT-05:00"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][-5]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][z]', '-0500')'
Result: '"[Y]-[701]-[D01]T[701]:[0]:[0][-5]"'
Expected: '"2018-07-11T07:00:00GMT-05:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T07:00:00GMT-05:00"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][-5]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1563" name="function-fromMillis.formatDateTime[25]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[25]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="664153762" result="Failed" start-time="2025-01-14T17:31:20.4102967Z" end-time="2025-01-14T17:31:20.4107162Z" duration="0.000420" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1204405500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0530')';&#xA; result: &quot;2008-03-02T00:05:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2008-03-02T00:05:00+03:00"', got '"[Y]-[301]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should rollover day boundaries'
Expr is '$fromMillis(1204405500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0530')'
Result: '"[Y]-[301]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
Expected: '"2008-03-02T00:05:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2008-03-02T00:05:00+03:00"', got '"[Y]-[301]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1564" name="function-fromMillis.formatDateTime[26]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[26]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2128851360" result="Failed" start-time="2025-01-14T17:31:20.4107258Z" end-time="2025-01-14T17:31:20.4113770Z" duration="0.000652" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0530')';&#xA; result: &quot;2009-01-01T00:05:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2009-01-01T00:05:00+03:00"', got '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should rollover year boundaries'
Expr is '$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0530')'
Result: '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
Expected: '"2009-01-01T00:05:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2009-01-01T00:05:00+03:00"', got '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1565" name="function-fromMillis.formatDateTime[27]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[27]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="980863190" result="Failed" start-time="2025-01-14T17:31:20.4113961Z" end-time="2025-01-14T17:31:20.4117181Z" duration="0.000322" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z010101t]', '+0530')';&#xA; result: error D3134" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3134 (), got '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z010101]"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'picture string has 6 digit timezone - error'
Expr is '$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z010101t]', '+0530')'
Result: '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z010101]"'
Expected error D3134
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3134 (), got '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z010101]"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1566" name="function-fromMillis.formatDateTime[28]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[28]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="611634199" result="Failed" start-time="2025-01-14T17:31:20.4117277Z" end-time="2025-01-14T17:31:20.4121093Z" duration="0.000382" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y,2]')';&#xA; result: &quot;23/03/18&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y,2]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should return literal'
Expr is '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y,2]')'
Result: '"[D#1,2].[31,2].[Y,2]"'
Expected: '"23/03/18"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y,2]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1567" name="function-fromMillis.formatDateTime[29]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[29]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="301781377" result="Failed" start-time="2025-01-14T17:31:20.4121201Z" end-time="2025-01-14T17:31:20.4124381Z" duration="0.000318" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2]')';&#xA; result: &quot;23/03/2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23/03/2018"', got '"[D#1,2].[31,2].[Y0001,2]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should return literal'
Expr is '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2]')'
Result: '"[D#1,2].[31,2].[Y0001,2]"'
Expected: '"23/03/2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23/03/2018"', got '"[D#1,2].[31,2].[Y0001,2]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1568" name="function-fromMillis.formatDateTime[30]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[30]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="986364211" result="Failed" start-time="2025-01-14T17:31:20.4124542Z" end-time="2025-01-14T17:31:20.4127415Z" duration="0.000287" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y##01,2-2]')';&#xA; result: &quot;23/03/18&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y##01,2-2]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'width modifier should override pattern'
Expr is '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y##01,2-2]')'
Result: '"[D#1,2].[31,2].[Y##01,2-2]"'
Expected: '"23/03/18"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y##01,2-2]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1569" name="function-fromMillis.formatDateTime[31]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[31]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1115466085" result="Failed" start-time="2025-01-14T17:31:20.4127499Z" end-time="2025-01-14T17:31:20.4130810Z" duration="0.000331" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2-2]')';&#xA; result: &quot;23/03/18&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y0001,2-2]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'width modifier should override pattern'
Expr is '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2-2]')'
Result: '"[D#1,2].[31,2].[Y0001,2-2]"'
Expected: '"23/03/18"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y0001,2-2]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1570" name="function-fromMillis.formatDateTime[32]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[32]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1542663156" result="Failed" start-time="2025-01-14T17:31:20.4130901Z" end-time="2025-01-14T17:31:20.4133710Z" duration="0.000281" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D1] [M01] [YI]')';&#xA; result: &quot;23 03 MMXVIII&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23 03 MMXVIII"', got '"[D1] [301] [YI]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'year in roman numerals'
Expr is '$fromMillis(1521801216617, '[D1] [M01] [YI]')'
Result: '"[D1] [301] [YI]"'
Expected: '"23 03 MMXVIII"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23 03 MMXVIII"', got '"[D1] [301] [YI]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1571" name="function-fromMillis.formatDateTime[33]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[33]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2099254793" result="Failed" start-time="2025-01-14T17:31:20.4133795Z" end-time="2025-01-14T17:31:20.4137002Z" duration="0.000321" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Da] [MA] [Yi]')';&#xA; result: &quot;w C mmxviii&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"w C mmxviii"', got '"[Da] [3A] [Yi]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day/month in letters, year in roman numerals'
Expr is '$fromMillis(1521801216617, '[Da] [MA] [Yi]')'
Result: '"[Da] [3A] [Yi]"'
Expected: '"w C mmxviii"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"w C mmxviii"', got '"[Da] [3A] [Yi]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1572" name="function-fromMillis.formatDateTime[34]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[34]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="954181130" result="Failed" start-time="2025-01-14T17:31:20.4137101Z" end-time="2025-01-14T17:31:20.4139911Z" duration="0.000281" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D1o] [M01] [Y]')';&#xA; result: &quot;23rd 03 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23rd 03 2018"', got '"[D1o] [301] [Y]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day in ordinal numerals'
Expr is '$fromMillis(1521801216617, '[D1o] [M01] [Y]')'
Result: '"[D1o] [301] [Y]"'
Expected: '"23rd 03 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23rd 03 2018"', got '"[D1o] [301] [Y]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1573" name="function-fromMillis.formatDateTime[35]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[35]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="509872989" result="Failed" start-time="2025-01-14T17:31:20.4140064Z" end-time="2025-01-14T17:31:20.4143240Z" duration="0.000318" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Yw]')';&#xA; result: &quot;two thousand and eighteen&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"two thousand and eighteen"', got '"[Yw]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'year in words'
Expr is '$fromMillis(1521801216617, '[Yw]')'
Result: '"[Yw]"'
Expected: '"two thousand and eighteen"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"two thousand and eighteen"', got '"[Yw]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1574" name="function-fromMillis.formatDateTime[36]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[36]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="689341291" result="Failed" start-time="2025-01-14T17:31:20.4143401Z" end-time="2025-01-14T17:31:20.4146596Z" duration="0.000320" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Dwo] [M01] [Y]')';&#xA; result: &quot;twenty-third 03 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"twenty-third 03 2018"', got '"[Dwo] [301] [Y]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day of month in ordinal words'
Expr is '$fromMillis(1521801216617, '[Dwo] [M01] [Y]')'
Result: '"[Dwo] [301] [Y]"'
Expected: '"twenty-third 03 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"twenty-third 03 2018"', got '"[Dwo] [301] [Y]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1575" name="function-fromMillis.formatDateTime[37]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[37]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2069155383" result="Failed" start-time="2025-01-14T17:31:20.4147047Z" end-time="2025-01-14T17:31:20.4152001Z" duration="0.000495" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D1o] [MNn] [Y]')';&#xA; result: &quot;23rd March 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23rd March 2018"', got '"[D1o] [3Nn] [Y]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'month in words'
Expr is '$fromMillis(1521801216617, '[D1o] [MNn] [Y]')'
Result: '"[D1o] [3Nn] [Y]"'
Expected: '"23rd March 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23rd March 2018"', got '"[D1o] [3Nn] [Y]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1576" name="function-fromMillis.formatDateTime[38]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[38]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="493774587" result="Failed" start-time="2025-01-14T17:31:20.4152160Z" end-time="2025-01-14T17:31:20.4158159Z" duration="0.000600" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D1o] [MN] [Y]')';&#xA; result: &quot;23rd MARCH 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23rd MARCH 2018"', got '"[D1o] [3N] [Y]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'month in uppercase words'
Expr is '$fromMillis(1521801216617, '[D1o] [MN] [Y]')'
Result: '"[D1o] [3N] [Y]"'
Expected: '"23rd MARCH 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23rd MARCH 2018"', got '"[D1o] [3N] [Y]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1577" name="function-fromMillis.formatDateTime[39]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[39]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="406976199" result="Failed" start-time="2025-01-14T17:31:20.4158364Z" end-time="2025-01-14T17:31:20.4163166Z" duration="0.000480" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[FNn], [D1o] [MNn] [Y]')';&#xA; result: &quot;Friday, 23rd March 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Friday, 23rd March 2018"', got '"[6Nn], [D1o] [3Nn] [Y]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day/month in words'
Expr is '$fromMillis(1521801216617, '[FNn], [D1o] [MNn] [Y]')'
Result: '"[6Nn], [D1o] [3Nn] [Y]"'
Expected: '"Friday, 23rd March 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Friday, 23rd March 2018"', got '"[6Nn], [D1o] [3Nn] [Y]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1578" name="function-fromMillis.formatDateTime[40]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[40]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1769437652" result="Failed" start-time="2025-01-14T17:31:20.4163305Z" end-time="2025-01-14T17:31:20.4168488Z" duration="0.000518" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[FNn], the [Dwo] of [MNn] [Y] [E]')';&#xA; result: &quot;Friday, the twenty-third of March 2018 ISO&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Friday, the twenty-third of March 2018 ISO"', got '"[6Nn], 10e [Dwo] o6 [3Nn] [Y] [E]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day/date/month in words'
Expr is '$fromMillis(1521801216617, '[FNn], the [Dwo] of [MNn] [Y] [E]')'
Result: '"[6Nn], 10e [Dwo] o6 [3Nn] [Y] [E]"'
Expected: '"Friday, the twenty-third of March 2018 ISO"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Friday, the twenty-third of March 2018 ISO"', got '"[6Nn], 10e [Dwo] o6 [3Nn] [Y] [E]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1579" name="function-fromMillis.formatDateTime[41]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[41]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1936121026" result="Failed" start-time="2025-01-14T17:31:20.4168617Z" end-time="2025-01-14T17:31:20.4173491Z" duration="0.000488" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[FNn,3-3], [D1o] [MNn,3-3] [Y] [C]')';&#xA; result: &quot;Fri, 23rd Mar 2018 ISO&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Fri, 23rd Mar 2018 ISO"', got '"[6Nn,3-3], [D1o] [3Nn,3-3] [Y] [C]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'abbreviated day/month in words'
Expr is '$fromMillis(1521801216617, '[FNn,3-3], [D1o] [MNn,3-3] [Y] [C]')'
Result: '"[6Nn,3-3], [D1o] [3Nn,3-3] [Y] [C]"'
Expected: '"Fri, 23rd Mar 2018 ISO"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Fri, 23rd Mar 2018 ISO"', got '"[6Nn,3-3], [D1o] [3Nn,3-3] [Y] [C]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1580" name="function-fromMillis.formatDateTime[42]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[42]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1520055093" result="Failed" start-time="2025-01-14T17:31:20.4173622Z" end-time="2025-01-14T17:31:20.4178993Z" duration="0.000537" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')';&#xA; result: &quot;friday, 23/3/2018 10:33:36 am&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"friday, 23/3/2018 10:33:36 am"', got '"[6], [D].[3].[Y] [10]:[33]:[36] [P]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should apply default modifiers to day/date/time'
Expr is '$fromMillis(1521801216617, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')'
Result: '"[6], [D].[3].[Y] [10]:[33]:[36] [P]"'
Expected: '"friday, 23/3/2018 10:33:36 am"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"friday, 23/3/2018 10:33:36 am"', got '"[6], [D].[3].[Y] [10]:[33]:[36] [P]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1581" name="function-fromMillis.formatDateTime[43]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[43]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="536585901" result="Failed" start-time="2025-01-14T17:31:20.4179205Z" end-time="2025-01-14T17:31:20.4184212Z" duration="0.000501" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1204405500000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')';&#xA; result: &quot;saturday, 1/3/2008 9:05:00 pm&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"saturday, 1/3/2008 9:05:00 pm"', got '"[], [D].[3].[Y] [9]:[5]:[0] [P]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should apply default modifiers to day/date/time 12hr pm'
Expr is '$fromMillis(1204405500000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')'
Result: '"[], [D].[3].[Y] [9]:[5]:[0] [P]"'
Expected: '"saturday, 1/3/2008 9:05:00 pm"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"saturday, 1/3/2008 9:05:00 pm"', got '"[], [D].[3].[Y] [9]:[5]:[0] [P]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1582" name="function-fromMillis.formatDateTime[44]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[44]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="249495655" result="Failed" start-time="2025-01-14T17:31:20.4184435Z" end-time="2025-01-14T17:31:20.4188166Z" duration="0.000373" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1199664000000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')';&#xA; result: &quot;monday, 7/1/2008 12:00:00 am&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"monday, 7/1/2008 12:00:00 am"', got '"[], [D].[1].[Y] [12]:[0]:[0] [P]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should apply default modifiers to day/date/time 12hr midnight'
Expr is '$fromMillis(1199664000000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')'
Result: '"[], [D].[1].[Y] [12]:[0]:[0] [P]"'
Expected: '"monday, 7/1/2008 12:00:00 am"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"monday, 7/1/2008 12:00:00 am"', got '"[], [D].[1].[Y] [12]:[0]:[0] [P]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1583" name="function-fromMillis.formatDateTime[45]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[45]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="256333409" result="Failed" start-time="2025-01-14T17:31:20.4188330Z" end-time="2025-01-14T17:31:20.4192115Z" duration="0.000379" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1514808000000, '[dwo] day of the year')';&#xA; result: &quot;first day of the year&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"first day of the year"', got '"[1wo] 1a18 o0 12e 18ear"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '1st Jan should be day 1'
Expr is '$fromMillis(1514808000000, '[dwo] day of the year')'
Result: '"[1wo] 1a18 o0 12e 18ear"'
Expected: '"first day of the year"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"first day of the year"', got '"[1wo] 1a18 o0 12e 18ear"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1584" name="function-fromMillis.formatDateTime[46]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[46]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1961407733" result="Failed" start-time="2025-01-14T17:31:20.4192269Z" end-time="2025-01-14T17:31:20.4196082Z" duration="0.000382" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1546257600000, '[d] days in [Y0001]')';&#xA; result: &quot;365 days in 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"365 days in 2018"', got '"[31] 31a180 in [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '31st Dec should be day 365'
Expr is '$fromMillis(1546257600000, '[d] days in [Y0001]')'
Result: '"[31] 31a180 in [Y0001]"'
Expected: '"365 days in 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"365 days in 2018"', got '"[31] 31a180 in [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1585" name="function-fromMillis.formatDateTime[47]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[47]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="802795051" result="Failed" start-time="2025-01-14T17:31:20.4196239Z" end-time="2025-01-14T17:31:20.4201839Z" duration="0.000560" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1483185600000, '[d] days in [Y0001]')';&#xA; result: &quot;366 days in 2016&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"366 days in 2016"', got '"[31] 31a160 in [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '31st Dec should be day 366 in a leap year'
Expr is '$fromMillis(1483185600000, '[d] days in [Y0001]')'
Result: '"[31] 31a160 in [Y0001]"'
Expected: '"366 days in 2016"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"366 days in 2016"', got '"[31] 31a160 in [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1586" name="function-fromMillis.formatDateTime[48]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[48]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1021112802" result="Failed" start-time="2025-01-14T17:31:20.4202043Z" end-time="2025-01-14T17:31:20.4208291Z" duration="0.000625" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1514808000000, 'Week: [W]')';&#xA; result: &quot;Week: 1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Monday 1st Jan should be in the first week of 2018'
Expr is '$fromMillis(1514808000000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 1"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1587" name="function-fromMillis.formatDateTime[49]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[49]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="339641108" result="Failed" start-time="2025-01-14T17:31:20.4208418Z" end-time="2025-01-14T17:31:20.4213144Z" duration="0.000473" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1515326400000, 'Week: [W]')';&#xA; result: &quot;Week: 1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sunday 7st Jan should be in the first week of 2018'
Expr is '$fromMillis(1515326400000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 1"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1588" name="function-fromMillis.formatDateTime[50]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[50]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="617647014" result="Failed" start-time="2025-01-14T17:31:20.4213249Z" end-time="2025-01-14T17:31:20.4217160Z" duration="0.000392" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1545739200000, 'Week: [W]')';&#xA; result: &quot;Week: 52&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sunday 25th Dec should be in week 52 of 2018'
Expr is '$fromMillis(1545739200000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 52"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1589" name="function-fromMillis.formatDateTime[51]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[51]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1597580751" result="Failed" start-time="2025-01-14T17:31:20.4217328Z" end-time="2025-01-14T17:31:20.4220538Z" duration="0.000321" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1388577600000, 'Week: [W]')';&#xA; result: &quot;Week: 1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Wed 1st Jan 2014 should be in week 1'
Expr is '$fromMillis(1388577600000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 1"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1590" name="function-fromMillis.formatDateTime[52]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[52]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1754612883" result="Failed" start-time="2025-01-14T17:31:20.4220686Z" end-time="2025-01-14T17:31:20.4224207Z" duration="0.000352" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419854400000, 'Week: [W]')';&#xA; result: &quot;Week: 1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 29th Dec 2014 should be in week 1 of 2015'
Expr is '$fromMillis(1419854400000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 1"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1591" name="function-fromMillis.formatDateTime[53]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[53]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="712211614" result="Failed" start-time="2025-01-14T17:31:20.4224359Z" end-time="2025-01-14T17:31:20.4227851Z" duration="0.000349" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419768000000, 'Week: [W]')';&#xA; result: &quot;Week: 52&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 28th Dec 2014 should be in week 52 of 2014'
Expr is '$fromMillis(1419768000000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 52"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1592" name="function-fromMillis.formatDateTime[54]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[54]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="37326583" result="Failed" start-time="2025-01-14T17:31:20.4228005Z" end-time="2025-01-14T17:31:20.4231158Z" duration="0.000315" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419336000000, 'Week: [W]')';&#xA; result: &quot;Week: 52&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tues 23th Dec 2014 should be in week 52 of 2014'
Expr is '$fromMillis(1419336000000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 52"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1593" name="function-fromMillis.formatDateTime[55]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[55]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1185423550" result="Failed" start-time="2025-01-14T17:31:20.4231309Z" end-time="2025-01-14T17:31:20.4234888Z" duration="0.000358" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1420113600000, 'Week: [W]')';&#xA; result: &quot;Week: 1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thur 1st Jan 2015 should be in week 1 of 2015'
Expr is '$fromMillis(1420113600000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 1"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1594" name="function-fromMillis.formatDateTime[56]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[56]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="152739985" result="Failed" start-time="2025-01-14T17:31:20.4235036Z" end-time="2025-01-14T17:31:20.4238150Z" duration="0.000312" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1420459200000, 'Week: [W]')';&#xA; result: &quot;Week: 2&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 2"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 5th Jan 2015 should be in week 2 of 2015'
Expr is '$fromMillis(1420459200000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 2"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 2"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1595" name="function-fromMillis.formatDateTime[57]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[57]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1634637362" result="Failed" start-time="2025-01-14T17:31:20.4238296Z" end-time="2025-01-14T17:31:20.4241140Z" duration="0.000285" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1451304000000, 'Week: [W]')';&#xA; result: &quot;Week: 53&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 28th Dec 2015 should be in week 53 of 2015'
Expr is '$fromMillis(1451304000000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 53"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1596" name="function-fromMillis.formatDateTime[58]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[58]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="542763844" result="Failed" start-time="2025-01-14T17:31:20.4241228Z" end-time="2025-01-14T17:31:20.4257619Z" duration="0.001640" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1451563200000, 'Week: [W]')';&#xA; result: &quot;Week: 53&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thur 31th Dec 2015 should be in week 53 of 2015'
Expr is '$fromMillis(1451563200000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 53"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1597" name="function-fromMillis.formatDateTime[59]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[59]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1220944865" result="Failed" start-time="2025-01-14T17:31:20.4257805Z" end-time="2025-01-14T17:31:20.4262924Z" duration="0.000512" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1451736000000, 'Week: [W]')';&#xA; result: &quot;Week: 53&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sat 2nd Jan 2016 should be in week 53 of 2015'
Expr is '$fromMillis(1451736000000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 53"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1598" name="function-fromMillis.formatDateTime[60]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[60]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1560012627" result="Failed" start-time="2025-01-14T17:31:20.4263132Z" end-time="2025-01-14T17:31:20.4266653Z" duration="0.000352" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1359460800000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 5 of January&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tue 29th Jan 2013 should be in week 5 of Jan'
Expr is '$fromMillis(1359460800000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 5 of January"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1599" name="function-fromMillis.formatDateTime[61]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[61]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1221039822" result="Failed" start-time="2025-01-14T17:31:20.4266756Z" end-time="2025-01-14T17:31:20.4269718Z" duration="0.000296" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1359633600000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 5 of January&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thur 31st Jan 2013 should be in week 5 of Jan'
Expr is '$fromMillis(1359633600000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 5 of January"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1600" name="function-fromMillis.formatDateTime[62]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[62]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="215580556" result="Failed" start-time="2025-01-14T17:31:20.4269809Z" end-time="2025-01-14T17:31:20.4273046Z" duration="0.000324" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1359720000000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 5 of January&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thur 1st Feb 2013 should be in week 5 of Jan'
Expr is '$fromMillis(1359720000000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 5 of January"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1601" name="function-fromMillis.formatDateTime[63]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[63]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="200124263" result="Failed" start-time="2025-01-14T17:31:20.4273144Z" end-time="2025-01-14T17:31:20.4276929Z" duration="0.000379" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1514808000000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 1 of January&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 1st Jan 2018 should be in week 1 of Jan'
Expr is '$fromMillis(1514808000000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 1 of January"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1602" name="function-fromMillis.formatDateTime[64]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[64]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1885747943" result="Failed" start-time="2025-01-14T17:31:20.4277033Z" end-time="2025-01-14T17:31:20.4280212Z" duration="0.000318" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1483272000000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 5 of December&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 5 of December"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 1st Jan 2017 should be in week 5 of Dec'
Expr is '$fromMillis(1483272000000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 5 of December"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 5 of December"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1603" name="function-fromMillis.formatDateTime[65]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[65]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1090660440" result="Failed" start-time="2025-01-14T17:31:20.4280313Z" end-time="2025-01-14T17:31:20.4283398Z" duration="0.000309" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1533038400000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 1 of August&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1 of August"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tues 31st July 2018 should be in week 1 of Aug'
Expr is '$fromMillis(1533038400000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 1 of August"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1 of August"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1604" name="function-fromMillis.formatDateTime[66]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[66]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="598230373" result="Failed" start-time="2025-01-14T17:31:20.4283486Z" end-time="2025-01-14T17:31:20.4286318Z" duration="0.000283" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419940800000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 1 of January&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tues 30th Dec 2014 should be in week 1 of Jan'
Expr is '$fromMillis(1419940800000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 1 of January"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1605" name="function-fromMillis.formatDateTime[67]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[67]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1368789772" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4286405Z" end-time="2025-01-14T17:31:20.4313115Z" duration="0.002671" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-10-21T13:05:00Z').[$fromMillis(), $fromMillis($, (),'-0500'), $fromMillis($, (),'0000')] ';&#xA; result: [&quot;2018-10-21T13:05:00Z&quot;,&quot;2018-10-21T16:05:00+03:00&quot;,&quot;2018-10-21T13:05:00Z&quot;]" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018-10-21T13:05:00Z']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalPathStep(Node step, JArray array, EvaluationEnvironment env, Boolean lastStep) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 1282
   at Jsonata.Net.Native.Eval.EvalProcessor.evalPath(PathNode node, JToken data, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 1244
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 86
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Undefined picture string defaults to ISO 8601'
Expr is '$toMillis('2018-10-21T13:05:00Z').[$fromMillis(), $fromMillis($, (),'-0500'), $fromMillis($, (),'0000')] '
]]></output>
                </test-case>
                <test-case id="0-1606" name="function-fromMillis.formatDateTime[68]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[68]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="296353728" result="Failed" start-time="2025-01-14T17:31:20.4313442Z" end-time="2025-01-14T17:31:20.4319015Z" duration="0.000558" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419940800000, '[YN]-[M]-[D]')';&#xA; result: error D3133" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3133 (), got '"[YN]-[12]-[D]"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'throws error asking for year name'
Expr is '$fromMillis(1419940800000, '[YN]-[M]-[D]')'
Result: '"[YN]-[12]-[D]"'
Expected error D3133
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3133 (), got '"[YN]-[12]-[D]"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1607" name="function-fromMillis.formatDateTime[69]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[69]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="764612489" result="Failed" start-time="2025-01-14T17:31:20.4319196Z" end-time="2025-01-14T17:31:20.4324109Z" duration="0.000492" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419940800000, '[YN]-[M')';&#xA; result: error D3135" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3135 (), got '"[YN]-[12"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'throws error for component with no closing bracket'
Expr is '$fromMillis(1419940800000, '[YN]-[M')'
Result: '"[YN]-[12"'
Expected error D3135
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3135 (), got '"[YN]-[12"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1608" name="function-fromMillis.isoWeekDate[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="858829568" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4324324Z" end-time="2025-01-14T17:31:20.4333552Z" duration="0.000923" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2005-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2004-W53-6&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2005-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sat 1 Jan 2005'
Expr is '($ts := $toMillis('2005-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1609" name="function-fromMillis.isoWeekDate[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="699542741" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4333904Z" end-time="2025-01-14T17:31:20.4338123Z" duration="0.000422" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2005-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2004-W53-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2005-01-02']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 2 Jan 2005'
Expr is '($ts := $toMillis('2005-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1610" name="function-fromMillis.isoWeekDate[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2126962442" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4338261Z" end-time="2025-01-14T17:31:20.4341828Z" duration="0.000357" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2005-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2005-W52-6&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2005-12-31']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sat 31 Dec 2005'
Expr is '($ts := $toMillis('2005-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1611" name="function-fromMillis.isoWeekDate[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="982393192" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4341942Z" end-time="2025-01-14T17:31:20.4344948Z" duration="0.000301" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2006-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2005-W52-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2006-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 1 Jan 2006'
Expr is '($ts := $toMillis('2006-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1612" name="function-fromMillis.isoWeekDate[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2059613677" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4345071Z" end-time="2025-01-14T17:31:20.4348566Z" duration="0.000350" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2006-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2006-W01-1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2006-01-02']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 2 Jan 2006'
Expr is '($ts := $toMillis('2006-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1613" name="function-fromMillis.isoWeekDate[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="687262921" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4348669Z" end-time="2025-01-14T17:31:20.4351703Z" duration="0.000304" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2006-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2006-W52-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2006-12-31']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 31 Dec 2006'
Expr is '($ts := $toMillis('2006-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1614" name="function-fromMillis.isoWeekDate[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1829824024" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4351799Z" end-time="2025-01-14T17:31:20.4354706Z" duration="0.000291" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2007-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2007-W01-1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2007-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 1 Jan 2007'
Expr is '($ts := $toMillis('2007-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1615" name="function-fromMillis.isoWeekDate[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1208372692" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4354797Z" end-time="2025-01-14T17:31:20.4357935Z" duration="0.000314" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2007-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2007-W52-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2007-12-30']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 30 Dec 2007'
Expr is '($ts := $toMillis('2007-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1616" name="function-fromMillis.isoWeekDate[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1503456234" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4358028Z" end-time="2025-01-14T17:31:20.4360842Z" duration="0.000282" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2007-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2008-W01-1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2007-12-31']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 31 Dec 2007'
Expr is '($ts := $toMillis('2007-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1617" name="function-fromMillis.isoWeekDate[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1393120329" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4360929Z" end-time="2025-01-14T17:31:20.4364514Z" duration="0.000359" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2008-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2008-W01-2&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2008-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tue 1 Jan 2008'
Expr is '($ts := $toMillis('2008-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1618" name="function-fromMillis.isoWeekDate[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="850229676" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4364621Z" end-time="2025-01-14T17:31:20.4368259Z" duration="0.000364" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2008-12-28', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2008-W52-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2008-12-28']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 28 Dec 2008'
Expr is '($ts := $toMillis('2008-12-28', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1619" name="function-fromMillis.isoWeekDate[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1326056309" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4368390Z" end-time="2025-01-14T17:31:20.4372932Z" duration="0.000454" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2008-12-29', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W01-1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2008-12-29']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 29 Dec 2008'
Expr is '($ts := $toMillis('2008-12-29', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1620" name="function-fromMillis.isoWeekDate[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2107234035" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4373077Z" end-time="2025-01-14T17:31:20.4377307Z" duration="0.000423" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2008-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W01-2&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2008-12-30']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tue 30 Dec 2008'
Expr is '($ts := $toMillis('2008-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1621" name="function-fromMillis.isoWeekDate[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="271993091" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4377456Z" end-time="2025-01-14T17:31:20.4382500Z" duration="0.000505" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2008-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W01-3&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2008-12-31']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Wed 31 Dec 2008'
Expr is '($ts := $toMillis('2008-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1622" name="function-fromMillis.isoWeekDate[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1831618010" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4382632Z" end-time="2025-01-14T17:31:20.4386696Z" duration="0.000407" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2009-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W01-4&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2009-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thu 1 Jan 2009'
Expr is '($ts := $toMillis('2009-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1623" name="function-fromMillis.isoWeekDate[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1536267107" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4386823Z" end-time="2025-01-14T17:31:20.4390056Z" duration="0.000324" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2009-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W53-4&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2009-12-31']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thu 31 Dec 2009'
Expr is '($ts := $toMillis('2009-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1624" name="function-fromMillis.isoWeekDate[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1508336849" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4390169Z" end-time="2025-01-14T17:31:20.4392965Z" duration="0.000280" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2010-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W53-5&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2010-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Fri 1 Jan 2010'
Expr is '($ts := $toMillis('2010-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1625" name="function-fromMillis.isoWeekDate[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="830451542" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4393052Z" end-time="2025-01-14T17:31:20.4395885Z" duration="0.000284" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2010-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W53-6&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2010-01-02']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sat 2 Jan 2010'
Expr is '($ts := $toMillis('2010-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1626" name="function-fromMillis.isoWeekDate[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2061928210" result="Failed" label="Error" start-time="2025-01-14T17:31:20.4395987Z" end-time="2025-01-14T17:31:20.4399120Z" duration="0.000313" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2010-01-03', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W53-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2010-01-03']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 428
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 100
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 3 Jan 2010'
Expr is '($ts := $toMillis('2010-01-03', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1627" name="function-join.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1916241227" result="Passed" start-time="2025-01-14T17:31:20.4399215Z" end-time="2025-01-14T17:31:20.4400078Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join(&quot;hello&quot;)';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join("hello")'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1628" name="function-join.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="357133004" result="Passed" start-time="2025-01-14T17:31:20.4400183Z" end-time="2025-01-14T17:31:20.4400852Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join([&quot;hello&quot;])';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join(["hello"])'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1629" name="function-join.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1202187576" result="Passed" start-time="2025-01-14T17:31:20.4400923Z" end-time="2025-01-14T17:31:20.4401522Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join([&quot;hello&quot;, &quot;world&quot;])';&#xA; result: &quot;helloworld&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join(["hello", "world"])'
Result: '"helloworld"'
Expected: '"helloworld"'
]]></output>
                </test-case>
                <test-case id="0-1630" name="function-join.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1526391539" result="Passed" start-time="2025-01-14T17:31:20.4401582Z" end-time="2025-01-14T17:31:20.4402161Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join([&quot;hello&quot;, &quot;world&quot;], &quot;, &quot;)';&#xA; result: &quot;hello, world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join(["hello", "world"], ", ")'
Result: '"hello, world"'
Expected: '"hello, world"'
]]></output>
                </test-case>
                <test-case id="0-1631" name="function-join.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1420313369" result="Passed" start-time="2025-01-14T17:31:20.4402222Z" end-time="2025-01-14T17:31:20.4402781Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join([], &quot;, &quot;)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join([], ", ")'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1632" name="function-join.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="994447219" result="Passed" start-time="2025-01-14T17:31:20.4402843Z" end-time="2025-01-14T17:31:20.4403980Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join(Account.Order.Product.Description.Colour, &quot;, &quot;)';&#xA; result: &quot;Purple, Orange, Purple, Black&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join(Account.Order.Product.Description.Colour, ", ")'
Result: '"Purple, Orange, Purple, Black"'
Expected: '"Purple, Orange, Purple, Black"'
]]></output>
                </test-case>
                <test-case id="0-1633" name="function-join.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="548397830" result="Passed" start-time="2025-01-14T17:31:20.4404063Z" end-time="2025-01-14T17:31:20.4405072Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join(Account.Order.Product.Description.Colour, no.sep)';&#xA; result: &quot;PurpleOrangePurpleBlack&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join(Account.Order.Product.Description.Colour, no.sep)'
Result: '"PurpleOrangePurpleBlack"'
Expected: '"PurpleOrangePurpleBlack"'
]]></output>
                </test-case>
                <test-case id="0-1634" name="function-join.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1720540470" result="Passed" start-time="2025-01-14T17:31:20.4405140Z" end-time="2025-01-14T17:31:20.4405998Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join(Account.blah.Product.Description.Colour, &quot;, &quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$join(Account.blah.Product.Description.Colour, ", ")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1635" name="function-join.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1319930830" result="Passed" start-time="2025-01-14T17:31:20.4406065Z" end-time="2025-01-14T17:31:20.4409152Z" duration="0.000309" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$join(true, &quot;, &quot;)';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$join(true, ", ")'
]]></output>
                </test-case>
                <test-case id="0-1636" name="function-join.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="798321605" result="Passed" start-time="2025-01-14T17:31:20.4409254Z" end-time="2025-01-14T17:31:20.4411972Z" duration="0.000272" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$join([1,2,3], &quot;, &quot;)';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$join([1,2,3], ", ")'
]]></output>
                </test-case>
                <test-case id="0-1637" name="function-join.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1306318862" result="Passed" start-time="2025-01-14T17:31:20.4412082Z" end-time="2025-01-14T17:31:20.4415355Z" duration="0.000327" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$join([&quot;hello&quot;], 3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$join(["hello"], 3)'
]]></output>
                </test-case>
                <test-case id="0-1638" name="function-join.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1805586683" result="Passed" start-time="2025-01-14T17:31:20.4415470Z" end-time="2025-01-14T17:31:20.4417765Z" duration="0.000230" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$join()';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$join()'
]]></output>
                </test-case>
                <test-case id="0-1639" name="function-keys.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="592617961" result="Passed" start-time="2025-01-14T17:31:20.4417992Z" end-time="2025-01-14T17:31:20.4424639Z" duration="0.000665" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys(Account)';&#xA; result: [&quot;Account Name&quot;,&quot;Order&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$keys(Account)'
Result: '["Account Name","Order"]'
Expected: '["Account Name","Order"]'
]]></output>
                </test-case>
                <test-case id="0-1640" name="function-keys.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="506441323" result="Passed" start-time="2025-01-14T17:31:20.4424747Z" end-time="2025-01-14T17:31:20.4431380Z" duration="0.000664" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys(Account.Order.Product)';&#xA; result: [&quot;Product Name&quot;,&quot;ProductID&quot;,&quot;SKU&quot;,&quot;Description&quot;,&quot;Price&quot;,&quot;Quantity&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$keys(Account.Order.Product)'
Result: '["Product Name","ProductID","SKU","Description","Price","Quantity"]'
Expected: '["Product Name","ProductID","SKU","Description","Price","Quantity"]'
]]></output>
                </test-case>
                <test-case id="0-1641" name="function-keys.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="256500313" result="Passed" start-time="2025-01-14T17:31:20.4431507Z" end-time="2025-01-14T17:31:20.4433132Z" duration="0.000163" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys({})';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$keys({})'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1642" name="function-keys.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1628295187" result="Passed" start-time="2025-01-14T17:31:20.4433235Z" end-time="2025-01-14T17:31:20.4434251Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys({&quot;foo&quot;:{}})';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$keys({"foo":{}})'
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-1643" name="function-keys.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2065587920" result="Passed" start-time="2025-01-14T17:31:20.4434328Z" end-time="2025-01-14T17:31:20.4434960Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys(&quot;foo&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$keys("foo")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1644" name="function-keys.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1618101956" result="Passed" start-time="2025-01-14T17:31:20.4435026Z" end-time="2025-01-14T17:31:20.4435688Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys(function(){1})';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$keys(function(){1})'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1645" name="function-keys.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="772219691" result="Passed" start-time="2025-01-14T17:31:20.4435753Z" end-time="2025-01-14T17:31:20.4436498Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys([&quot;foo&quot;, &quot;bar&quot;])';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$keys(["foo", "bar"])'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1646" name="function-length.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="800081584" result="Passed" start-time="2025-01-14T17:31:20.4436566Z" end-time="2025-01-14T17:31:20.4437986Z" duration="0.000142" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;&quot;)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$length("")'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1647" name="function-length.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1497547309" result="Passed" start-time="2025-01-14T17:31:20.4438083Z" end-time="2025-01-14T17:31:20.4440631Z" duration="0.000255" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;hello&quot;)';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$length("hello")'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-1648" name="function-length.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1503083173" result="Passed" start-time="2025-01-14T17:31:20.4440739Z" end-time="2025-01-14T17:31:20.4441640Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(missing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$length(missing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1649" name="function-length.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1091850940" result="Passed" start-time="2025-01-14T17:31:20.4441722Z" end-time="2025-01-14T17:31:20.4442741Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;\u03BB-calculus&quot;)';&#xA; result: 10" />
                  </properties>
                  <output><![CDATA[Expr is '$length("\u03BB-calculus")'
Result: '10'
Expected: '10'
]]></output>
                </test-case>
                <test-case id="0-1650" name="function-length.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="131181128" result="Failed" start-time="2025-01-14T17:31:20.4442819Z" end-time="2025-01-14T17:31:20.4449179Z" duration="0.000636" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;\uD834\uDD1E&quot;)';&#xA; result: 1" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '1', got '2'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$length("\uD834\uDD1E")'
Result: '2'
Expected: '1'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '1', got '2'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1651" name="function-length.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1297127162" result="Failed" start-time="2025-01-14T17:31:20.4449311Z" end-time="2025-01-14T17:31:20.4454801Z" duration="0.000549" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;𝄞&quot;)';&#xA; result: 1" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '1', got '2'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$length("𝄞")'
Result: '2'
Expected: '1'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '1', got '2'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1652" name="function-length.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="370715189" result="Passed" start-time="2025-01-14T17:31:20.4454921Z" end-time="2025-01-14T17:31:20.4456079Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;超明體繁&quot;)';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '$length("超明體繁")'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1653" name="function-length.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="233956318" result="Passed" start-time="2025-01-14T17:31:20.4456208Z" end-time="2025-01-14T17:31:20.4457236Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;\t&quot;)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$length("\t")'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1654" name="function-length.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1261289434" result="Passed" start-time="2025-01-14T17:31:20.4457327Z" end-time="2025-01-14T17:31:20.4458240Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;\n&quot;)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$length("\n")'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1655" name="function-length.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2091071112" result="Passed" start-time="2025-01-14T17:31:20.4458326Z" end-time="2025-01-14T17:31:20.4460986Z" duration="0.000266" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length(1234)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length(1234)'
]]></output>
                </test-case>
                <test-case id="0-1656" name="function-length.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="515989900" result="Passed" start-time="2025-01-14T17:31:20.4461092Z" end-time="2025-01-14T17:31:20.4477169Z" duration="0.001608" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length(null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length(null)'
]]></output>
                </test-case>
                <test-case id="0-1657" name="function-length.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="349480836" result="Passed" start-time="2025-01-14T17:31:20.4479027Z" end-time="2025-01-14T17:31:20.4485599Z" duration="0.000657" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length(true)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length(true)'
]]></output>
                </test-case>
                <test-case id="0-1658" name="function-length.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1729807238" result="Passed" start-time="2025-01-14T17:31:20.4485778Z" end-time="2025-01-14T17:31:20.4490033Z" duration="0.000426" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length([&quot;str&quot;])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length(["str"])'
]]></output>
                </test-case>
                <test-case id="0-1659" name="function-length.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1915262478" result="Passed" start-time="2025-01-14T17:31:20.4490196Z" end-time="2025-01-14T17:31:20.4493327Z" duration="0.000313" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length()';&#xA; result: error T0411" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0411.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length()'
]]></output>
                </test-case>
                <test-case id="0-1660" name="function-length.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1454345209" result="Passed" start-time="2025-01-14T17:31:20.4493461Z" end-time="2025-01-14T17:31:20.4497005Z" duration="0.000355" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length()';&#xA; result: error T0411" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0411.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length()'
]]></output>
                </test-case>
                <test-case id="0-1661" name="function-length.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="527596148" result="Passed" start-time="2025-01-14T17:31:20.4497133Z" end-time="2025-01-14T17:31:20.4501087Z" duration="0.000396" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;Hello&quot;, &quot;World&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length("Hello", "World")'
]]></output>
                </test-case>
                <test-case id="0-1662" name="function-length.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="407479485" result="Failed" start-time="2025-01-14T17:31:20.4501227Z" end-time="2025-01-14T17:31:20.4509897Z" duration="0.000868" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;𝄞💩&quot;)';&#xA; result: 2" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '2', got '4'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$length("𝄞💩")'
Result: '4'
Expected: '2'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '2', got '4'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1663" name="function-lookup.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lookup.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1804125639" result="Passed" start-time="2025-01-14T17:31:20.4510132Z" end-time="2025-01-14T17:31:20.4512268Z" duration="0.000214" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup(Account, &quot;Account Name&quot;)';&#xA; result: &quot;Firefly&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup(Account, "Account Name")'
Result: '"Firefly"'
Expected: '"Firefly"'
]]></output>
                </test-case>
                <test-case id="0-1664" name="function-lookup.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lookup.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1320634849" result="Passed" start-time="2025-01-14T17:31:20.4512394Z" end-time="2025-01-14T17:31:20.4514618Z" duration="0.000223" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup(Account.Order.Product, &quot;Product Name&quot;)';&#xA; result: [&quot;Bowler Hat&quot;,&quot;Trilby hat&quot;,&quot;Bowler Hat&quot;,&quot;Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup(Account.Order.Product, "Product Name")'
Result: '["Bowler Hat","Trilby hat","Bowler Hat","Cloak"]'
Expected: '["Bowler Hat","Trilby hat","Bowler Hat","Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-1665" name="function-lookup.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lookup.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="706649073" result="Passed" start-time="2025-01-14T17:31:20.4514749Z" end-time="2025-01-14T17:31:20.4516246Z" duration="0.000150" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup(Account.Order.Product.ProductID, &quot;Product Name&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup(Account.Order.Product.ProductID, "Product Name")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1666" name="function-lookup.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lookup.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2135429620" result="Passed" start-time="2025-01-14T17:31:20.4516365Z" end-time="2025-01-14T17:31:20.4517375Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup($$, &quot;gust&quot;)';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup($$, "gust")'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-1667" name="function-lowercase.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lowercase.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1511215847" result="Passed" start-time="2025-01-14T17:31:20.4517476Z" end-time="2025-01-14T17:31:20.4518885Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(&quot;Hello World&quot;)';&#xA; result: &quot;hello world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase("Hello World")'
Result: '"hello world"'
Expected: '"hello world"'
]]></output>
                </test-case>
                <test-case id="0-1668" name="function-lowercase.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lowercase.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1114206098" result="Passed" start-time="2025-01-14T17:31:20.4519003Z" end-time="2025-01-14T17:31:20.4520213Z" duration="0.000121" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1669" name="function-max.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="509893194" result="Passed" start-time="2025-01-14T17:31:20.4520320Z" end-time="2025-01-14T17:31:20.4526741Z" duration="0.000642" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max(Account.Order.Product.(Price * Quantity))';&#xA; result: 137.8" />
                  </properties>
                  <output><![CDATA[Expr is '$max(Account.Order.Product.(Price * Quantity))'
Result: '137.8'
Expected: '137.8'
]]></output>
                </test-case>
                <test-case id="0-1670" name="function-max.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="410051087" result="Passed" start-time="2025-01-14T17:31:20.4526883Z" end-time="2025-01-14T17:31:20.4530363Z" duration="0.000348" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$max(Product.(Price * Quantity))';&#xA; result: [68.9,137.8]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$max(Product.(Price * Quantity))'
Result: '[68.9,137.8]'
Expected: '[68.9,137.8]'
]]></output>
                </test-case>
                <test-case id="0-1671" name="function-max.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="197137372" result="Passed" start-time="2025-01-14T17:31:20.4530468Z" end-time="2025-01-14T17:31:20.4531996Z" duration="0.000153" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(OrderID &amp; &quot;: &quot; &amp; $count(Product.(Price*Quantity)))';&#xA; result: [&quot;order103: 2&quot;,&quot;order104: 2&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(OrderID & ": " & $count(Product.(Price*Quantity)))'
Result: '["order103: 2","order104: 2"]'
Expected: '["order103: 2","order104: 2"]'
]]></output>
                </test-case>
                <test-case id="0-1672" name="function-max.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1735017293" result="Passed" start-time="2025-01-14T17:31:20.4532095Z" end-time="2025-01-14T17:31:20.4532994Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max([])';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$max([])'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1673" name="function-max.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="257611715" result="Passed" start-time="2025-01-14T17:31:20.4533105Z" end-time="2025-01-14T17:31:20.4533942Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max([1,2,3])';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$max([1,2,3])'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1674" name="function-max.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="819614986" result="Passed" start-time="2025-01-14T17:31:20.4534046Z" end-time="2025-01-14T17:31:20.4537300Z" duration="0.000326" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([&quot;1&quot;,&quot;2&quot;,&quot;3&quot;])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max(["1","2","3"])'
]]></output>
                </test-case>
                <test-case id="0-1675" name="function-max.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1850733722" result="Passed" start-time="2025-01-14T17:31:20.4537419Z" end-time="2025-01-14T17:31:20.4539887Z" duration="0.000247" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([&quot;1&quot;,&quot;2&quot;,3])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max(["1","2",3])'
]]></output>
                </test-case>
                <test-case id="0-1676" name="function-max.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="791181551" result="Passed" start-time="2025-01-14T17:31:20.4539996Z" end-time="2025-01-14T17:31:20.4540764Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max(1)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$max(1)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1677" name="function-max.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1913513737" result="Passed" start-time="2025-01-14T17:31:20.4540837Z" end-time="2025-01-14T17:31:20.4541518Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max([-1,-5])';&#xA; result: -1" />
                  </properties>
                  <output><![CDATA[Expr is '$max([-1,-5])'
Result: '-1'
Expected: '-1'
]]></output>
                </test-case>
                <test-case id="0-1678" name="function-max.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2065648798" result="Passed" start-time="2025-01-14T17:31:20.4541585Z" end-time="2025-01-14T17:31:20.4544033Z" duration="0.000245" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max([],[])'
]]></output>
                </test-case>
                <test-case id="0-1679" name="function-max.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="736117158" result="Passed" start-time="2025-01-14T17:31:20.4544167Z" end-time="2025-01-14T17:31:20.4547328Z" duration="0.000316" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([1,2,3],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max([1,2,3],[])'
]]></output>
                </test-case>
                <test-case id="0-1680" name="function-max.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="30369958" result="Passed" start-time="2025-01-14T17:31:20.4547466Z" end-time="2025-01-14T17:31:20.4550125Z" duration="0.000266" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max([],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1681" name="function-max.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="564380901" result="Passed" start-time="2025-01-14T17:31:20.4550244Z" end-time="2025-01-14T17:31:20.4553804Z" duration="0.000356" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([1,2],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max([1,2],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1682" name="function-max.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="413158054" result="Passed" start-time="2025-01-14T17:31:20.4554044Z" end-time="2025-01-14T17:31:20.4555125Z" duration="0.000108" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max(undefined)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$max(undefined)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1683" name="function-max.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1412765711" result="Passed" start-time="2025-01-14T17:31:20.4555233Z" end-time="2025-01-14T17:31:20.4560846Z" duration="0.000561" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$min(Account.Order.Product.(Price * Quantity))';&#xA; result: 21.67" />
                  </properties>
                  <output><![CDATA[Expr is '$min(Account.Order.Product.(Price * Quantity))'
Result: '21.67'
Expected: '21.67'
]]></output>
                </test-case>
                <test-case id="0-1684" name="function-max.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1071006448" result="Passed" start-time="2025-01-14T17:31:20.4560977Z" end-time="2025-01-14T17:31:20.4563956Z" duration="0.000298" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$min(Product.(Price * Quantity))';&#xA; result: [21.67,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$min(Product.(Price * Quantity))'
Result: '[21.67,107.99]'
Expected: '[21.67,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1685" name="function-max.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="229264377" result="Passed" start-time="2025-01-14T17:31:20.4564068Z" end-time="2025-01-14T17:31:20.4565712Z" duration="0.000164" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(OrderID &amp; &quot;: &quot; &amp; $min(Product.(Price*Quantity)))';&#xA; result: [&quot;order103: 21.67&quot;,&quot;order104: 107.99&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(OrderID & ": " & $min(Product.(Price*Quantity)))'
Result: '["order103: 21.67","order104: 107.99"]'
Expected: '["order103: 21.67","order104: 107.99"]'
]]></output>
                </test-case>
                <test-case id="0-1686" name="function-max.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1049598180" result="Passed" start-time="2025-01-14T17:31:20.4565804Z" end-time="2025-01-14T17:31:20.4566496Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$min([])';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$min([])'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1687" name="function-max.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="760490901" result="Passed" start-time="2025-01-14T17:31:20.4566566Z" end-time="2025-01-14T17:31:20.4567458Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$min([1,2,3])';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$min([1,2,3])'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1688" name="function-max.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1434592043" result="Passed" start-time="2025-01-14T17:31:20.4567553Z" end-time="2025-01-14T17:31:20.4572476Z" duration="0.000493" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([&quot;1&quot;,&quot;2&quot;,&quot;3&quot;])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min(["1","2","3"])'
]]></output>
                </test-case>
                <test-case id="0-1689" name="function-max.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1776953005" result="Passed" start-time="2025-01-14T17:31:20.4572637Z" end-time="2025-01-14T17:31:20.4578060Z" duration="0.000543" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([&quot;1&quot;,&quot;2&quot;,3])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min(["1","2",3])'
]]></output>
                </test-case>
                <test-case id="0-1690" name="function-max.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="803940930" result="Passed" start-time="2025-01-14T17:31:20.4578371Z" end-time="2025-01-14T17:31:20.4579637Z" duration="0.000127" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$min(1)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$min(1)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1691" name="function-max.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="448840769" result="Passed" start-time="2025-01-14T17:31:20.4579737Z" end-time="2025-01-14T17:31:20.4582246Z" duration="0.000251" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min([],[])'
]]></output>
                </test-case>
                <test-case id="0-1692" name="function-max.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1723995271" result="Passed" start-time="2025-01-14T17:31:20.4582344Z" end-time="2025-01-14T17:31:20.4584795Z" duration="0.000245" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([1,2,3],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min([1,2,3],[])'
]]></output>
                </test-case>
                <test-case id="0-1693" name="function-max.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2037807852" result="Passed" start-time="2025-01-14T17:31:20.4584896Z" end-time="2025-01-14T17:31:20.4586950Z" duration="0.000206" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min([],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1694" name="function-max.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1285756399" result="Passed" start-time="2025-01-14T17:31:20.4587069Z" end-time="2025-01-14T17:31:20.4590567Z" duration="0.000350" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([1,2],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min([1,2],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1695" name="function-max.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2126328822" result="Passed" start-time="2025-01-14T17:31:20.4590679Z" end-time="2025-01-14T17:31:20.4591642Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$min(undefined)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$min(undefined)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1696" name="function-merge.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-merge.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1996504475" result="Passed" start-time="2025-01-14T17:31:20.4591746Z" end-time="2025-01-14T17:31:20.4593813Z" duration="0.000207" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$merge(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$merge(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1697" name="function-merge.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-merge.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1971653195" result="Passed" start-time="2025-01-14T17:31:20.4594362Z" end-time="2025-01-14T17:31:20.4602095Z" duration="0.000773" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$merge({&quot;a&quot;:1})';&#xA; result: {&quot;a&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$merge({"a":1})'
Result: '{"a":1}'
Expected: '{"a":1}'
]]></output>
                </test-case>
                <test-case id="0-1698" name="function-merge.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-merge.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="744953071" result="Passed" start-time="2025-01-14T17:31:20.4602242Z" end-time="2025-01-14T17:31:20.4606091Z" duration="0.000385" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$merge([{&quot;a&quot;:1}, {&quot;b&quot;:2}])';&#xA; result: {&quot;a&quot;:1,&quot;b&quot;:2}" />
                  </properties>
                  <output><![CDATA[Expr is '$merge([{"a":1}, {"b":2}])'
Result: '{"a":1,"b":2}'
Expected: '{"a":1,"b":2}'
]]></output>
                </test-case>
                <test-case id="0-1699" name="function-merge.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-merge.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="911452883" result="Passed" start-time="2025-01-14T17:31:20.4606205Z" end-time="2025-01-14T17:31:20.4607564Z" duration="0.000136" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$merge([{&quot;a&quot;: 1}, {&quot;b&quot;: 2, &quot;c&quot;: 3}])';&#xA; result: {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}" />
                  </properties>
                  <output><![CDATA[Expr is '$merge([{"a": 1}, {"b": 2, "c": 3}])'
Result: '{"a":1,"b":2,"c":3}'
Expected: '{"a":1,"b":2,"c":3}'
]]></output>
                </test-case>
                <test-case id="0-1700" name="function-merge.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-merge.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="784273718" result="Passed" start-time="2025-01-14T17:31:20.4607674Z" end-time="2025-01-14T17:31:20.4609011Z" duration="0.000134" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$merge([{&quot;a&quot;: 1}, {&quot;b&quot;: 2, &quot;a&quot;: 3}])';&#xA; result: {&quot;a&quot;:3,&quot;b&quot;:2}" />
                  </properties>
                  <output><![CDATA[Expr is '$merge([{"a": 1}, {"b": 2, "a": 3}])'
Result: '{"a":3,"b":2}'
Expected: '{"a":3,"b":2}'
]]></output>
                </test-case>
                <test-case id="0-1701" name="function-number.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1436349384" result="Passed" start-time="2025-01-14T17:31:20.4609111Z" end-time="2025-01-14T17:31:20.4609914Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(0)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$number(0)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1702" name="function-number.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="383341211" result="Passed" start-time="2025-01-14T17:31:20.4610001Z" end-time="2025-01-14T17:31:20.4610716Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(10)';&#xA; result: 10" />
                  </properties>
                  <output><![CDATA[Expr is '$number(10)'
Result: '10'
Expected: '10'
]]></output>
                </test-case>
                <test-case id="0-1703" name="function-number.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="993189979" result="Passed" start-time="2025-01-14T17:31:20.4610802Z" end-time="2025-01-14T17:31:20.4611581Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(-0.05)';&#xA; result: -0.05" />
                  </properties>
                  <output><![CDATA[Expr is '$number(-0.05)'
Result: '-0.05'
Expected: '-0.05'
]]></output>
                </test-case>
                <test-case id="0-1704" name="function-number.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="681799853" result="Passed" start-time="2025-01-14T17:31:20.4611656Z" end-time="2025-01-14T17:31:20.4612281Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;0&quot;)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$number("0")'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1705" name="function-number.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2081527403" result="Passed" start-time="2025-01-14T17:31:20.4612343Z" end-time="2025-01-14T17:31:20.4612954Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;-0.05&quot;)';&#xA; result: -0.05" />
                  </properties>
                  <output><![CDATA[Expr is '$number("-0.05")'
Result: '-0.05'
Expected: '-0.05'
]]></output>
                </test-case>
                <test-case id="0-1706" name="function-number.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1709593516" result="Passed" start-time="2025-01-14T17:31:20.4613020Z" end-time="2025-01-14T17:31:20.4613631Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;1e2&quot;)';&#xA; result: 100" />
                  </properties>
                  <output><![CDATA[Expr is '$number("1e2")'
Result: '100'
Expected: '100'
]]></output>
                </test-case>
                <test-case id="0-1707" name="function-number.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="113103474" result="Passed" start-time="2025-01-14T17:31:20.4613704Z" end-time="2025-01-14T17:31:20.4614315Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;1.0e-2&quot;)';&#xA; result: 0.01" />
                  </properties>
                  <output><![CDATA[Expr is '$number("1.0e-2")'
Result: '0.01'
Expected: '0.01'
]]></output>
                </test-case>
                <test-case id="0-1708" name="function-number.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1561824979" result="Passed" start-time="2025-01-14T17:31:20.4614382Z" end-time="2025-01-14T17:31:20.4614968Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;1e0&quot;)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$number("1e0")'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1709" name="function-number.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1558039359" result="Passed" start-time="2025-01-14T17:31:20.4615031Z" end-time="2025-01-14T17:31:20.4618563Z" duration="0.000353" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;10e500&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("10e500")'
]]></output>
                </test-case>
                <test-case id="0-1710" name="function-number.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1299889561" result="Passed" start-time="2025-01-14T17:31:20.4618663Z" end-time="2025-01-14T17:31:20.4621328Z" duration="0.000267" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;Hello world&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("Hello world")'
]]></output>
                </test-case>
                <test-case id="0-1711" name="function-number.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="749959810" result="Passed" start-time="2025-01-14T17:31:20.4621439Z" end-time="2025-01-14T17:31:20.4624490Z" duration="0.000305" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;1/2&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("1/2")'
]]></output>
                </test-case>
                <test-case id="0-1712" name="function-number.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="431315685" result="Passed" start-time="2025-01-14T17:31:20.4624618Z" end-time="2025-01-14T17:31:20.4627320Z" duration="0.000270" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;1234 hello&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("1234 hello")'
]]></output>
                </test-case>
                <test-case id="0-1713" name="function-number.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="993690080" result="Passed" start-time="2025-01-14T17:31:20.4627421Z" end-time="2025-01-14T17:31:20.4630083Z" duration="0.000266" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("")'
]]></output>
                </test-case>
                <test-case id="0-1714" name="function-number.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1884892520" result="Passed" start-time="2025-01-14T17:31:20.4630190Z" end-time="2025-01-14T17:31:20.4631080Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(true)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$number(true)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1715" name="function-number.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="889964308" result="Passed" start-time="2025-01-14T17:31:20.4631157Z" end-time="2025-01-14T17:31:20.4631743Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(false)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$number(false)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1716" name="function-number.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="114438094" result="Passed" start-time="2025-01-14T17:31:20.4631813Z" end-time="2025-01-14T17:31:20.4632658Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(Account.blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$number(Account.blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1717" name="function-number.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1142197421" result="Passed" start-time="2025-01-14T17:31:20.4632723Z" end-time="2025-01-14T17:31:20.4634716Z" duration="0.000199" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number(null)'
]]></output>
                </test-case>
                <test-case id="0-1718" name="function-number.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="733119191" result="Passed" start-time="2025-01-14T17:31:20.4634802Z" end-time="2025-01-14T17:31:20.4636883Z" duration="0.000208" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number([])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number([])'
]]></output>
                </test-case>
                <test-case id="0-1719" name="function-number.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1091370472" result="Passed" start-time="2025-01-14T17:31:20.4636971Z" end-time="2025-01-14T17:31:20.4641684Z" duration="0.000472" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;[1]&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("[1]")'
]]></output>
                </test-case>
                <test-case id="0-1720" name="function-number.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1804534540" result="Passed" start-time="2025-01-14T17:31:20.4642147Z" end-time="2025-01-14T17:31:20.4645910Z" duration="0.000376" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number([1,2])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number([1,2])'
]]></output>
                </test-case>
                <test-case id="0-1721" name="function-number.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1374938719" result="Passed" start-time="2025-01-14T17:31:20.4646046Z" end-time="2025-01-14T17:31:20.4649450Z" duration="0.000341" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number([&quot;hello&quot;])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number(["hello"])'
]]></output>
                </test-case>
                <test-case id="0-1722" name="function-number.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="76623804" result="Passed" start-time="2025-01-14T17:31:20.4649584Z" end-time="2025-01-14T17:31:20.4653302Z" duration="0.000372" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number([&quot;2&quot;])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number(["2"])'
]]></output>
                </test-case>
                <test-case id="0-1723" name="function-number.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1484736740" result="Passed" start-time="2025-01-14T17:31:20.4653442Z" end-time="2025-01-14T17:31:20.4655942Z" duration="0.000250" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number({})';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number({})'
]]></output>
                </test-case>
                <test-case id="0-1724" name="function-number.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1853435911" result="Passed" start-time="2025-01-14T17:31:20.4656070Z" end-time="2025-01-14T17:31:20.4658529Z" duration="0.000246" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number({&quot;hello&quot;:&quot;world&quot;})';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number({"hello":"world"})'
]]></output>
                </test-case>
                <test-case id="0-1725" name="function-number.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2108693965" result="Passed" start-time="2025-01-14T17:31:20.4658652Z" end-time="2025-01-14T17:31:20.4662149Z" duration="0.000350" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number($number)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number($number)'
]]></output>
                </test-case>
                <test-case id="0-1726" name="function-number.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="620625748" result="Passed" start-time="2025-01-14T17:31:20.4662277Z" end-time="2025-01-14T17:31:20.4665966Z" duration="0.000369" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(function(){5})';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number(function(){5})'
]]></output>
                </test-case>
                <test-case id="0-1727" name="function-number.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1844693088" result="Passed" start-time="2025-01-14T17:31:20.4666098Z" end-time="2025-01-14T17:31:20.4669371Z" duration="0.000328" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(1,2)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number(1,2)'
]]></output>
                </test-case>
                <test-case id="0-1728" name="function-number.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1119338963" result="Passed" start-time="2025-01-14T17:31:20.4669501Z" end-time="2025-01-14T17:31:20.4670596Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number('00')';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$number('00')'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1729" name="function-number.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="840769811" result="Passed" start-time="2025-01-14T17:31:20.4670708Z" end-time="2025-01-14T17:31:20.4671878Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number('0123')';&#xA; result: 123" />
                  </properties>
                  <output><![CDATA[Expr is '$number('0123')'
Result: '123'
Expected: '123'
]]></output>
                </test-case>
                <test-case id="0-1730" name="function-number.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2001712894" result="Passed" start-time="2025-01-14T17:31:20.4671985Z" end-time="2025-01-14T17:31:20.4672923Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number('-007')';&#xA; result: -7" />
                  </properties>
                  <output><![CDATA[Expr is '$number('-007')'
Result: '-7'
Expected: '-7'
]]></output>
                </test-case>
                <test-case id="0-1731" name="function-number.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="967012003" result="Passed" start-time="2025-01-14T17:31:20.4673036Z" end-time="2025-01-14T17:31:20.4674192Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number('000.00123000')';&#xA; result: 0.00123" />
                  </properties>
                  <output><![CDATA[Expr is '$number('000.00123000')'
Result: '0.00123'
Expected: '0.00123'
]]></output>
                </test-case>
                <test-case id="0-1732" name="function-pad.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1168560666" result="Passed" start-time="2025-01-14T17:31:20.4674302Z" end-time="2025-01-14T17:31:20.4678769Z" duration="0.000447" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, 5)';&#xA; result: &quot;foo  &quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", 5)'
Result: '"foo  "'
Expected: '"foo  "'
]]></output>
                </test-case>
                <test-case id="0-1733" name="function-pad.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1154195915" result="Passed" start-time="2025-01-14T17:31:20.4678905Z" end-time="2025-01-14T17:31:20.4683042Z" duration="0.000414" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, -5)';&#xA; result: &quot;  foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", -5)'
Result: '"  foo"'
Expected: '"  foo"'
]]></output>
                </test-case>
                <test-case id="0-1734" name="function-pad.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2099327087" result="Passed" start-time="2025-01-14T17:31:20.4683170Z" end-time="2025-01-14T17:31:20.4684991Z" duration="0.000182" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, -5, &quot;#&quot;)';&#xA; result: &quot;##foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", -5, "#")'
Result: '"##foo"'
Expected: '"##foo"'
]]></output>
                </test-case>
                <test-case id="0-1735" name="function-pad.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="741504221" result="Passed" start-time="2025-01-14T17:31:20.4685121Z" end-time="2025-01-14T17:31:20.4686286Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, 5, &quot;&quot;)';&#xA; result: &quot;foo  &quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", 5, "")'
Result: '"foo  "'
Expected: '"foo  "'
]]></output>
                </test-case>
                <test-case id="0-1736" name="function-pad.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="181039690" result="Passed" start-time="2025-01-14T17:31:20.4686405Z" end-time="2025-01-14T17:31:20.4687472Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, 1)';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", 1)'
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-1737" name="function-pad.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1567451722" result="Passed" start-time="2025-01-14T17:31:20.4687567Z" end-time="2025-01-14T17:31:20.4688458Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, 8, &quot;-+&quot;)';&#xA; result: &quot;foo-+-+-&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", 8, "-+")'
Result: '"foo-+-+-"'
Expected: '"foo-+-+-"'
]]></output>
                </test-case>
                <test-case id="0-1738" name="function-pad.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="730965858" result="Passed" start-time="2025-01-14T17:31:20.4688540Z" end-time="2025-01-14T17:31:20.4689399Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(nothing, 1)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$pad(nothing, 1)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1739" name="function-pad.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1136962692" result="Failed" start-time="2025-01-14T17:31:20.4689477Z" end-time="2025-01-14T17:31:20.4718888Z" duration="0.002942" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad('a𝄞💩', 7)';&#xA; result: &quot;a𝄞💩    &quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"a𝄞💩    "', got '"a𝄞💩  "'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$pad('a𝄞💩', 7)'
Result: '"a𝄞💩  "'
Expected: '"a𝄞💩    "'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"a𝄞💩    "', got '"a𝄞💩  "'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1740" name="function-pad.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="667154508" result="Failed" start-time="2025-01-14T17:31:20.4719229Z" end-time="2025-01-14T17:31:20.4726841Z" duration="0.000762" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad('𝄞💩', -7)';&#xA; result: &quot;     𝄞💩&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"     𝄞💩"', got '"   𝄞💩"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$pad('𝄞💩', -7)'
Result: '"   𝄞💩"'
Expected: '"     𝄞💩"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"     𝄞💩"', got '"   𝄞💩"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1741" name="function-pad.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="936494706" result="Failed" start-time="2025-01-14T17:31:20.4727031Z" end-time="2025-01-14T17:31:20.4733355Z" duration="0.000633" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad('a𝄞💩', 7, '💩')';&#xA; result: &quot;a𝄞💩💩💩💩💩&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"a𝄞💩💩💩💩💩"', got '"a𝄞💩💩"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$pad('a𝄞💩', 7, '💩')'
Result: '"a𝄞💩💩"'
Expected: '"a𝄞💩💩💩💩💩"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"a𝄞💩💩💩💩💩"', got '"a𝄞💩💩"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1742" name="function-pad.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1346149569" result="Failed" start-time="2025-01-14T17:31:20.4733535Z" end-time="2025-01-14T17:31:20.4738918Z" duration="0.000538" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad('a𝄞💩', 6, '💩')';&#xA; result: &quot;a𝄞💩💩💩💩&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"a𝄞💩💩💩💩"', got '"a𝄞💩\ud83d"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$pad('a𝄞💩', 6, '💩')'
Result: '"a𝄞💩\ud83d"'
Expected: '"a𝄞💩💩💩💩"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"a𝄞💩💩💩💩"', got '"a𝄞💩\ud83d"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1743" name="function-parseInteger.parseInteger[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2024036331" result="Passed" start-time="2025-01-14T17:31:20.4739059Z" end-time="2025-01-14T17:31:20.4740440Z" duration="0.000138" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger(undefined, '0')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Description: 'should return result object'
Expr is '$parseInteger(undefined, '0')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1744" name="function-parseInteger.parseInteger[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="477063444" result="Passed" start-time="2025-01-14T17:31:20.4740547Z" end-time="2025-01-14T17:31:20.4742460Z" duration="0.000191" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('123', '000')';&#xA; result: 123" />
                  </properties>
                  <output><![CDATA[Description: 'should parse a number'
Expr is '$parseInteger('123', '000')'
Result: '123'
Expected: '123'
]]></output>
                </test-case>
                <test-case id="0-1745" name="function-parseInteger.parseInteger[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="53981120" result="Passed" start-time="2025-01-14T17:31:20.4742548Z" end-time="2025-01-14T17:31:20.4744874Z" duration="0.000233" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('0123', '0000')';&#xA; result: 123" />
                  </properties>
                  <output><![CDATA[Description: 'should parse number padded with zeros'
Expr is '$parseInteger('0123', '0000')'
Result: '123'
Expected: '123'
]]></output>
                </test-case>
                <test-case id="0-1746" name="function-parseInteger.parseInteger[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="17525084" result="Passed" start-time="2025-01-14T17:31:20.4744972Z" end-time="2025-01-14T17:31:20.4745710Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1234', '0')';&#xA; result: 1234" />
                  </properties>
                  <output><![CDATA[Description: 'should parse number'
Expr is '$parseInteger('1234', '0')'
Result: '1234'
Expected: '1234'
]]></output>
                </test-case>
                <test-case id="0-1747" name="function-parseInteger.parseInteger[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="730305191" result="Passed" start-time="2025-01-14T17:31:20.4745775Z" end-time="2025-01-14T17:31:20.4746362Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1234', '###0')';&#xA; result: 1234" />
                  </properties>
                  <output><![CDATA[Description: 'should parse number with optional digits'
Expr is '$parseInteger('1234', '###0')'
Result: '1234'
Expected: '1234'
]]></output>
                </test-case>
                <test-case id="0-1748" name="function-parseInteger.parseInteger[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="152915332" result="Passed" start-time="2025-01-14T17:31:20.4746426Z" end-time="2025-01-14T17:31:20.4747012Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('12', '###0')';&#xA; result: 12" />
                  </properties>
                  <output><![CDATA[Description: 'should parse number with optional digits'
Expr is '$parseInteger('12', '###0')'
Result: '12'
Expected: '12'
]]></output>
                </test-case>
                <test-case id="0-1749" name="function-parseInteger.parseInteger[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="395792091" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4747074Z" end-time="2025-01-14T17:31:20.4758406Z" duration="0.001133" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('123rd', '000;o')';&#xA; result: 123" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '123rd' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should parse a number'
Expr is '$parseInteger('123rd', '000;o')'
]]></output>
                </test-case>
                <test-case id="0-1750" name="function-parseInteger.parseInteger[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2011890728" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4758551Z" end-time="2025-01-14T17:31:20.4761858Z" duration="0.000331" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1st', '0;o')';&#xA; result: 1" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '1st' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$parseInteger('1st', '0;o')'
]]></output>
                </test-case>
                <test-case id="0-1751" name="function-parseInteger.parseInteger[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="854307054" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4761962Z" end-time="2025-01-14T17:31:20.4765172Z" duration="0.000321" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('28th', '#0;o')';&#xA; result: 28" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '28th' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$parseInteger('28th', '#0;o')'
]]></output>
                </test-case>
                <test-case id="0-1752" name="function-parseInteger.parseInteger[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1238534004" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4765271Z" end-time="2025-01-14T17:31:20.4767884Z" duration="0.000261" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1234th', '###0;o')';&#xA; result: 1234" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '1234th' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$parseInteger('1234th', '###0;o')'
]]></output>
                </test-case>
                <test-case id="0-1753" name="function-parseInteger.parseInteger[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1801066246" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4767984Z" end-time="2025-01-14T17:31:20.4770577Z" duration="0.000259" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('12th', '###0;o')';&#xA; result: 12" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '12th' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$parseInteger('12th', '###0;o')'
]]></output>
                </test-case>
                <test-case id="0-1754" name="function-parseInteger.parseInteger[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1254401990" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4770665Z" end-time="2025-01-14T17:31:20.4773267Z" duration="0.000260" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('١٢٣٤٠', '###١')';&#xA; result: 12340" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '١٢٣٤٠' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('١٢٣٤٠', '###١')'
]]></output>
                </test-case>
                <test-case id="0-1755" name="function-parseInteger.parseInteger[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1556818646" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4773365Z" end-time="2025-01-14T17:31:20.4775931Z" duration="0.000257" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('１２３４０', '###０')';&#xA; result: 12340" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '１２３４０' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('１２３４０', '###０')'
]]></output>
                </test-case>
                <test-case id="0-1756" name="function-parseInteger.parseInteger[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1359725580" result="Passed" start-time="2025-01-14T17:31:20.4776027Z" end-time="2025-01-14T17:31:20.4776812Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('12', '#,##0')';&#xA; result: 12" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('12', '#,##0')'
Result: '12'
Expected: '12'
]]></output>
                </test-case>
                <test-case id="0-1757" name="function-parseInteger.parseInteger[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1046088118" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4776879Z" end-time="2025-01-14T17:31:20.4779713Z" duration="0.000284" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1,200', '#,##0')';&#xA; result: 1200" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '1,200' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('1,200', '#,##0')'
]]></output>
                </test-case>
                <test-case id="0-1758" name="function-parseInteger.parseInteger[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1287237715" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4779818Z" end-time="2025-01-14T17:31:20.4783348Z" duration="0.000353" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('12,345,678', '#,##0')';&#xA; result: 12345678" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '12,345,678' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('12,345,678', '#,##0')'
]]></output>
                </test-case>
                <test-case id="0-1759" name="function-parseInteger.parseInteger[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="720589535" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4783471Z" end-time="2025-01-14T17:31:20.4787928Z" duration="0.000446" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1,234,567,890', '#,##0')';&#xA; result: 1234567890" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '1,234,567,890' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('1,234,567,890', '#,##0')'
]]></output>
                </test-case>
                <test-case id="0-1760" name="function-parseInteger.parseInteger[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1460901655" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4788058Z" end-time="2025-01-14T17:31:20.4792119Z" duration="0.000406" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1,234,567,890', '#,###,##0')';&#xA; result: 1234567890" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '1,234,567,890' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('1,234,567,890', '#,###,##0')'
]]></output>
                </test-case>
                <test-case id="0-1761" name="function-parseInteger.parseInteger[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2012384075" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4792230Z" end-time="2025-01-14T17:31:20.4795812Z" duration="0.000358" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1234:567,890', '#:###,##0')';&#xA; result: 1234567890" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '1234:567,890' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert non-regular groups - different chars'
Expr is '$parseInteger('1234:567,890', '#:###,##0')'
]]></output>
                </test-case>
                <test-case id="0-1762" name="function-parseInteger.parseInteger[20]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[20]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1141248158" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4795944Z" end-time="2025-01-14T17:31:20.4799384Z" duration="0.000344" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('12345,67,890', '##,##,##0')';&#xA; result: 1234567890" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '12345,67,890' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert non-regular groups - different positions'
Expr is '$parseInteger('12345,67,890', '##,##,##0')'
]]></output>
                </test-case>
                <test-case id="0-1763" name="function-parseInteger.parseInteger[21]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[21]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="721055168" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4799501Z" end-time="2025-01-14T17:31:20.4802397Z" duration="0.000290" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('', 'I')';&#xA; result: 0" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string '' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '0'
Expr is '$parseInteger('', 'I')'
]]></output>
                </test-case>
                <test-case id="0-1764" name="function-parseInteger.parseInteger[22]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[22]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1703810112" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4802536Z" end-time="2025-01-14T17:31:20.4807160Z" duration="0.000463" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('MCMLXXXIV', 'I')';&#xA; result: 1984" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'MCMLXXXIV' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1984'
Expr is '$parseInteger('MCMLXXXIV', 'I')'
]]></output>
                </test-case>
                <test-case id="0-1765" name="function-parseInteger.parseInteger[23]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[23]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="332877558" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4807319Z" end-time="2025-01-14T17:31:20.4812532Z" duration="0.000522" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('xcix', 'i')';&#xA; result: 99" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'xcix' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '99'
Expr is '$parseInteger('xcix', 'i')'
]]></output>
                </test-case>
                <test-case id="0-1766" name="function-parseInteger.parseInteger[24]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[24]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1728882791" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4812679Z" end-time="2025-01-14T17:31:20.4817442Z" duration="0.000477" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('twelve', 'w')';&#xA; result: 12" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'twelve' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '12'
Expr is '$parseInteger('twelve', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1767" name="function-parseInteger.parseInteger[25]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[25]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1424603417" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4817617Z" end-time="2025-01-14T17:31:20.4822194Z" duration="0.000458" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('twenty', 'w')';&#xA; result: 20" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'twenty' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '20'
Expr is '$parseInteger('twenty', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1768" name="function-parseInteger.parseInteger[26]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[26]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1041846640" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4822336Z" end-time="2025-01-14T17:31:20.4826734Z" duration="0.000440" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('thirty-four', 'w')';&#xA; result: 34" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'thirty-four' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '34'
Expr is '$parseInteger('thirty-four', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1769" name="function-parseInteger.parseInteger[27]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[27]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1143388299" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4827117Z" end-time="2025-01-14T17:31:20.4832871Z" duration="0.000575" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('NINETY-NINE', 'W')';&#xA; result: 99" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'NINETY-NINE' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '99'
Expr is '$parseInteger('NINETY-NINE', 'W')'
]]></output>
                </test-case>
                <test-case id="0-1770" name="function-parseInteger.parseInteger[28]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[28]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="708924618" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4833034Z" end-time="2025-01-14T17:31:20.4837975Z" duration="0.000494" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one hundred', 'w')';&#xA; result: 100" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'one hundred' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '100'
Expr is '$parseInteger('one hundred', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1771" name="function-parseInteger.parseInteger[29]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[29]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="694470019" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4838144Z" end-time="2025-01-14T17:31:20.4843268Z" duration="0.000513" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('FIVE HUNDRED AND FIFTY-FIVE', 'W')';&#xA; result: 555" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'FIVE HUNDRED AND FIFTY-FIVE' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '555'
Expr is '$parseInteger('FIVE HUNDRED AND FIFTY-FIVE', 'W')'
]]></output>
                </test-case>
                <test-case id="0-1772" name="function-parseInteger.parseInteger[30]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[30]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="411231563" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4843439Z" end-time="2025-01-14T17:31:20.4847868Z" duration="0.000443" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('Five Hundred and Fifty-Five', 'Ww')';&#xA; result: 555" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'Five Hundred and Fifty-Five' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '555'
Expr is '$parseInteger('Five Hundred and Fifty-Five', 'Ww')'
]]></output>
                </test-case>
                <test-case id="0-1773" name="function-parseInteger.parseInteger[31]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[31]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1743640146" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4848161Z" end-time="2025-01-14T17:31:20.4853494Z" duration="0.000534" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('nine hundred and nineteen', 'w')';&#xA; result: 919" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'nine hundred and nineteen' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '919'
Expr is '$parseInteger('nine hundred and nineteen', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1774" name="function-parseInteger.parseInteger[32]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[32]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="424215964" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4853654Z" end-time="2025-01-14T17:31:20.4857832Z" duration="0.000418" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('seven hundred and thirty', 'w')';&#xA; result: 730" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'seven hundred and thirty' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '730'
Expr is '$parseInteger('seven hundred and thirty', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1775" name="function-parseInteger.parseInteger[33]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[33]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="868039834" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4857976Z" end-time="2025-01-14T17:31:20.4862038Z" duration="0.000406" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one thousand', 'w')';&#xA; result: 1000" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'one thousand' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1000'
Expr is '$parseInteger('one thousand', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1776" name="function-parseInteger.parseInteger[34]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[34]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="28789150" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4862168Z" end-time="2025-01-14T17:31:20.4866242Z" duration="0.000408" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('three thousand, seven hundred and thirty', 'w')';&#xA; result: 3730" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'three thousand, seven hundred and thirty' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '3730'
Expr is '$parseInteger('three thousand, seven hundred and thirty', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1777" name="function-parseInteger.parseInteger[35]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[35]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="200071120" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4866374Z" end-time="2025-01-14T17:31:20.4871121Z" duration="0.000475" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirty', 'w')';&#xA; result: 327730" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'three hundred and twenty-seven thousand, seven hundred and thirty' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '327730'
Expr is '$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirty', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1778" name="function-parseInteger.parseInteger[36]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[36]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1007673296" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4871308Z" end-time="2025-01-14T17:31:20.4878699Z" duration="0.000739" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty', 'w')';&#xA; result: 4327730" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'four million, three hundred and twenty-seven thousand, seven hundred and thirty' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '4327730'
Expr is '$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1779" name="function-parseInteger.parseInteger[37]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[37]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1799454791" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4878925Z" end-time="2025-01-14T17:31:20.4885594Z" duration="0.000667" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one trillion and one', 'w')';&#xA; result: 1000000000001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'one trillion and one' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e12 + 1'
Expr is '$parseInteger('one trillion and one', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1780" name="function-parseInteger.parseInteger[38]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[38]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2091168881" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4885757Z" end-time="2025-01-14T17:31:20.4889682Z" duration="0.000393" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one trillion, two hundred and thirty-four billion, five hundred and sixty-seven million, eight hundred and ninety thousand, one hundred and twenty-three', 'w')';&#xA; result: 1234567890123" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'one trillion, two hundred and thirty-four billion, five hundred and sixty-seven million, eight hundred and ninety thousand, one hundred and twenty-three' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1234567890123'
Expr is '$parseInteger('one trillion, two hundred and thirty-four billion, five hundred and sixty-seven million, eight hundred and ninety thousand, one hundred and twenty-three', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1781" name="function-parseInteger.parseInteger[39]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[39]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2037804204" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4889806Z" end-time="2025-01-14T17:31:20.4893231Z" duration="0.000343" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one thousand trillion', 'w')';&#xA; result: 1000000000000000" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'one thousand trillion' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e15'
Expr is '$parseInteger('one thousand trillion', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1782" name="function-parseInteger.parseInteger[40]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[40]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1691777756" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4893356Z" end-time="2025-01-14T17:31:20.4897549Z" duration="0.000420" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('ten billion trillion trillion trillion', 'w')';&#xA; result: 1E+46" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'ten billion trillion trillion trillion' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e46'
Expr is '$parseInteger('ten billion trillion trillion trillion', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1783" name="function-parseInteger.parseInteger[41]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[41]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="723546872" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4897680Z" end-time="2025-01-14T17:31:20.4901071Z" duration="0.000339" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('twelfth', 'w;o')';&#xA; result: 12" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'twelfth' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '12'
Expr is '$parseInteger('twelfth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1784" name="function-parseInteger.parseInteger[42]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[42]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="976362730" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4901182Z" end-time="2025-01-14T17:31:20.4904414Z" duration="0.000323" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('twentieth', 'w;o')';&#xA; result: 20" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'twentieth' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '20'
Expr is '$parseInteger('twentieth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1785" name="function-parseInteger.parseInteger[43]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[43]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1147405840" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4904518Z" end-time="2025-01-14T17:31:20.4907421Z" duration="0.000291" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('thirty-fourth', 'w;o')';&#xA; result: 34" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'thirty-fourth' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '34'
Expr is '$parseInteger('thirty-fourth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1786" name="function-parseInteger.parseInteger[44]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[44]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1875961646" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4907549Z" end-time="2025-01-14T17:31:20.4910649Z" duration="0.000310" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('NINETY-NINTH', 'W;o')';&#xA; result: 99" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'NINETY-NINTH' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '99'
Expr is '$parseInteger('NINETY-NINTH', 'W;o')'
]]></output>
                </test-case>
                <test-case id="0-1787" name="function-parseInteger.parseInteger[45]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[45]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1514978067" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4910755Z" end-time="2025-01-14T17:31:20.4913270Z" duration="0.000252" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one hundredth', 'w;o')';&#xA; result: 100" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'one hundredth' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '100'
Expr is '$parseInteger('one hundredth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1788" name="function-parseInteger.parseInteger[46]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[46]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2047277572" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4913361Z" end-time="2025-01-14T17:31:20.4915784Z" duration="0.000242" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('FIVE HUNDRED AND FIFTY-FIFTH', 'W;o')';&#xA; result: 555" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'FIVE HUNDRED AND FIFTY-FIFTH' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '555'
Expr is '$parseInteger('FIVE HUNDRED AND FIFTY-FIFTH', 'W;o')'
]]></output>
                </test-case>
                <test-case id="0-1789" name="function-parseInteger.parseInteger[47]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[47]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="542508441" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4915870Z" end-time="2025-01-14T17:31:20.4919988Z" duration="0.000412" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('nine hundred and nineteenth', 'w;o')';&#xA; result: 919" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'nine hundred and nineteenth' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '919'
Expr is '$parseInteger('nine hundred and nineteenth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1790" name="function-parseInteger.parseInteger[48]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[48]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1529262288" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4920132Z" end-time="2025-01-14T17:31:20.4923846Z" duration="0.000372" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('seven hundred and thirtieth', 'w;o')';&#xA; result: 730" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'seven hundred and thirtieth' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '730'
Expr is '$parseInteger('seven hundred and thirtieth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1791" name="function-parseInteger.parseInteger[49]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[49]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1282435219" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4923982Z" end-time="2025-01-14T17:31:20.4928647Z" duration="0.000467" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('Seven Hundred and Thirty-Third', 'Ww;o')';&#xA; result: 733" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'Seven Hundred and Thirty-Third' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '733'
Expr is '$parseInteger('Seven Hundred and Thirty-Third', 'Ww;o')'
]]></output>
                </test-case>
                <test-case id="0-1792" name="function-parseInteger.parseInteger[50]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[50]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="280214007" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4928804Z" end-time="2025-01-14T17:31:20.4935797Z" duration="0.000700" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one thousandth', 'w;o')';&#xA; result: 1000" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'one thousandth' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1000'
Expr is '$parseInteger('one thousandth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1793" name="function-parseInteger.parseInteger[51]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[51]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="10376323" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4935963Z" end-time="2025-01-14T17:31:20.4941284Z" duration="0.000532" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('three thousand, seven hundred and thirty-first', 'w;o')';&#xA; result: 3731" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'three thousand, seven hundred and thirty-first' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '3730'
Expr is '$parseInteger('three thousand, seven hundred and thirty-first', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1794" name="function-parseInteger.parseInteger[52]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[52]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1823544684" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4941440Z" end-time="2025-01-14T17:31:20.4956513Z" duration="0.001508" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirteenth', 'w;o')';&#xA; result: 327713" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'three hundred and twenty-seven thousand, seven hundred and thirteenth' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '327730'
Expr is '$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirteenth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1795" name="function-parseInteger.parseInteger[53]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[53]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="802254080" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4956736Z" end-time="2025-01-14T17:31:20.4961542Z" duration="0.000481" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty-second', 'w;o')';&#xA; result: 4327732" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'four million, three hundred and twenty-seven thousand, seven hundred and thirty-second' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '4327730'
Expr is '$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty-second', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1796" name="function-parseInteger.parseInteger[54]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[54]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1942730195" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4961711Z" end-time="2025-01-14T17:31:20.4966328Z" duration="0.000462" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one trillion and first', 'w;o')';&#xA; result: 1000000000001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'one trillion and first' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e12 + 1'
Expr is '$parseInteger('one trillion and first', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1797" name="function-parseInteger.parseInteger[55]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[55]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="625094401" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4966481Z" end-time="2025-01-14T17:31:20.4969864Z" duration="0.000338" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('A', 'A')';&#xA; result: 1" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'A' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1'
Expr is '$parseInteger('A', 'A')'
]]></output>
                </test-case>
                <test-case id="0-1798" name="function-parseInteger.parseInteger[56]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[56]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="320226219" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4969999Z" end-time="2025-01-14T17:31:20.4972856Z" duration="0.000286" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('l', 'a')';&#xA; result: 12" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'l' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '12'
Expr is '$parseInteger('l', 'a')'
]]></output>
                </test-case>
                <test-case id="0-1799" name="function-parseInteger.parseInteger[57]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[57]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="144185886" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4972990Z" end-time="2025-01-14T17:31:20.4976115Z" duration="0.000313" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('z', 'a')';&#xA; result: 26" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'z' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '26'
Expr is '$parseInteger('z', 'a')'
]]></output>
                </test-case>
                <test-case id="0-1800" name="function-parseInteger.parseInteger[58]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[58]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="472581976" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4976248Z" end-time="2025-01-14T17:31:20.4979768Z" duration="0.000352" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('aa', 'a')';&#xA; result: 27" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'aa' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '27'
Expr is '$parseInteger('aa', 'a')'
]]></output>
                </test-case>
                <test-case id="0-1801" name="function-parseInteger.parseInteger[59]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[59]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="740405314" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4979886Z" end-time="2025-01-14T17:31:20.4982664Z" duration="0.000278" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('KN', 'A')';&#xA; result: 300" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'KN' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '300'
Expr is '$parseInteger('KN', 'A')'
]]></output>
                </test-case>
                <test-case id="0-1802" name="function-parseInteger.parseInteger[60]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[60]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1835942198" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.4982909Z" end-time="2025-01-14T17:31:20.4985638Z" duration="0.000273" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('FZPH', 'A')';&#xA; result: 123456" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': The input string 'FZPH' was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '123456'
Expr is '$parseInteger('FZPH', 'A')'
]]></output>
                </test-case>
                <test-case id="0-1803" name="function-parseInteger.parseInteger[61]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[61]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1157010680" result="Failed" start-time="2025-01-14T17:31:20.4985752Z" end-time="2025-01-14T17:31:20.4993062Z" duration="0.000731" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('50', '#')';&#xA; result: error D3130" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3130 (), got '50']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'unsupported picture string'
Expr is '$parseInteger('50', '#')'
Result: '50'
Expected error D3130
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3130 (), got '50']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1804" name="function-power.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1834351120" result="Passed" start-time="2025-01-14T17:31:20.4993435Z" end-time="2025-01-14T17:31:20.4998539Z" duration="0.000511" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$power(4, 2)';&#xA; result: 16" />
                  </properties>
                  <output><![CDATA[Expr is '$power(4, 2)'
Result: '16'
Expected: '16'
]]></output>
                </test-case>
                <test-case id="0-1805" name="function-power.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1317420709" result="Passed" start-time="2025-01-14T17:31:20.4998708Z" end-time="2025-01-14T17:31:20.5003721Z" duration="0.000502" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$power(4, 0.5)';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$power(4, 0.5)'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1806" name="function-power.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="443075491" result="Passed" start-time="2025-01-14T17:31:20.5004200Z" end-time="2025-01-14T17:31:20.5006016Z" duration="0.000182" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$power(10, -2)';&#xA; result: 0.01" />
                  </properties>
                  <output><![CDATA[Expr is '$power(10, -2)'
Result: '0.01'
Expected: '0.01'
]]></output>
                </test-case>
                <test-case id="0-1807" name="function-power.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1642377505" result="Passed" start-time="2025-01-14T17:31:20.5006174Z" end-time="2025-01-14T17:31:20.5007319Z" duration="0.000115" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$power(-2, 3)';&#xA; result: -8" />
                  </properties>
                  <output><![CDATA[Expr is '$power(-2, 3)'
Result: '-8'
Expected: '-8'
]]></output>
                </test-case>
                <test-case id="0-1808" name="function-power.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1376850282" result="Passed" start-time="2025-01-14T17:31:20.5007452Z" end-time="2025-01-14T17:31:20.5008519Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$power(nothing, 3)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$power(nothing, 3)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1809" name="function-power.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="386362156" result="Passed" start-time="2025-01-14T17:31:20.5009258Z" end-time="2025-01-14T17:31:20.5014554Z" duration="0.000530" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$power(-2, 1/3)';&#xA; result: error D3061" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3061.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$power(-2, 1/3)'
]]></output>
                </test-case>
                <test-case id="0-1810" name="function-power.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1528029496" result="Passed" start-time="2025-01-14T17:31:20.5014962Z" end-time="2025-01-14T17:31:20.5019459Z" duration="0.000450" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$power(100, 1000)';&#xA; result: error D3061" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3061.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$power(100, 1000)'
]]></output>
                </test-case>
                <test-case id="0-1811" name="function-replace.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1159654460" result="Passed" start-time="2025-01-14T17:31:20.5020187Z" end-time="2025-01-14T17:31:20.5033355Z" duration="0.001318" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;Hello World&quot;, &quot;World&quot;, &quot;Everyone&quot;)';&#xA; result: &quot;Hello Everyone&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("Hello World", "World", "Everyone")'
Result: '"Hello Everyone"'
Expected: '"Hello Everyone"'
]]></output>
                </test-case>
                <test-case id="0-1812" name="function-replace.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="38414822" result="Passed" start-time="2025-01-14T17:31:20.5033570Z" end-time="2025-01-14T17:31:20.5116914Z" duration="0.008335" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;the cat sat on the mat&quot;, &quot;at&quot;, &quot;it&quot;)';&#xA; result: &quot;the cit sit on the mit&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("the cat sat on the mat", "at", "it")'
Result: '"the cit sit on the mit"'
Expected: '"the cit sit on the mit"'
]]></output>
                </test-case>
                <test-case id="0-1813" name="function-replace.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1635266571" result="Passed" start-time="2025-01-14T17:31:20.5117173Z" end-time="2025-01-14T17:31:20.5119120Z" duration="0.000195" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;the cat sat on the mat&quot;, &quot;at&quot;, &quot;it&quot;, 0)';&#xA; result: &quot;the cat sat on the mat&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("the cat sat on the mat", "at", "it", 0)'
Result: '"the cat sat on the mat"'
Expected: '"the cat sat on the mat"'
]]></output>
                </test-case>
                <test-case id="0-1814" name="function-replace.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="776904301" result="Passed" start-time="2025-01-14T17:31:20.5119211Z" end-time="2025-01-14T17:31:20.5120091Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;the cat sat on the mat&quot;, &quot;at&quot;, &quot;it&quot;, 2)';&#xA; result: &quot;the cit sit on the mat&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("the cat sat on the mat", "at", "it", 2)'
Result: '"the cit sit on the mat"'
Expected: '"the cit sit on the mat"'
]]></output>
                </test-case>
                <test-case id="0-1815" name="function-replace.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1570581098" result="Passed" start-time="2025-01-14T17:31:20.5120166Z" end-time="2025-01-14T17:31:20.5120934Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(nothing, &quot;at&quot;, &quot;it&quot;, 2)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$replace(nothing, "at", "it", 2)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1816" name="function-replace.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="320606319" result="Passed" start-time="2025-01-14T17:31:20.5121009Z" end-time="2025-01-14T17:31:20.5124448Z" duration="0.000344" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello")'
]]></output>
                </test-case>
                <test-case id="0-1817" name="function-replace.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="417701286" result="Passed" start-time="2025-01-14T17:31:20.5124543Z" end-time="2025-01-14T17:31:20.5131527Z" duration="0.000699" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;, &quot;l&quot;, &quot;1&quot;, null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello", "l", "1", null)'
]]></output>
                </test-case>
                <test-case id="0-1818" name="function-replace.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1892176085" result="Passed" start-time="2025-01-14T17:31:20.5131693Z" end-time="2025-01-14T17:31:20.5135429Z" duration="0.000374" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;, &quot;l&quot;, &quot;1&quot;, -2)';&#xA; result: error D3011" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3011.
Actually thrown D3011.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello", "l", "1", -2)'
]]></output>
                </test-case>
                <test-case id="0-1819" name="function-replace.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="556404272" result="Passed" start-time="2025-01-14T17:31:20.5135565Z" end-time="2025-01-14T17:31:20.5138504Z" duration="0.000294" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;, 1)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello", 1)'
]]></output>
                </test-case>
                <test-case id="0-1820" name="function-replace.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="604399559" result="Passed" start-time="2025-01-14T17:31:20.5138626Z" end-time="2025-01-14T17:31:20.5141775Z" duration="0.000315" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;, &quot;&quot;, &quot;bye&quot;)';&#xA; result: error D3010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3010.
Actually thrown D3010.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello", "", "bye")'
]]></output>
                </test-case>
                <test-case id="0-1821" name="function-replace.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="213904724" result="Passed" start-time="2025-01-14T17:31:20.5141895Z" end-time="2025-01-14T17:31:20.5144564Z" duration="0.000267" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;, 2, 1)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello", 2, 1)'
]]></output>
                </test-case>
                <test-case id="0-1822" name="function-replace.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1524809492" result="Passed" start-time="2025-01-14T17:31:20.5144670Z" end-time="2025-01-14T17:31:20.5146796Z" duration="0.000213" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(123, 2, 1)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace(123, 2, 1)'
]]></output>
                </test-case>
                <test-case id="0-1823" name="function-reverse.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-reverse.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="499338199" result="Passed" start-time="2025-01-14T17:31:20.5146896Z" end-time="2025-01-14T17:31:20.5152526Z" duration="0.000563" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$reverse([1..5])';&#xA; result: [5,4,3,2,1]" />
                  </properties>
                  <output><![CDATA[Expr is '$reverse([1..5])'
Result: '[5,4,3,2,1]'
Expected: '[5,4,3,2,1]'
]]></output>
                </test-case>
                <test-case id="0-1824" name="function-reverse.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-reverse.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1761609658" result="Passed" start-time="2025-01-14T17:31:20.5152676Z" end-time="2025-01-14T17:31:20.5156134Z" duration="0.000346" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[[$], [$reverse($)], [$]]';&#xA; result: [[1,2,3],[3,2,1],[1,2,3]]" />
                  </properties>
                  <output><![CDATA[Expr is '[[$], [$reverse($)], [$]]'
Result: '[[1,2,3],[3,2,1],[1,2,3]]'
Expected: '[[1,2,3],[3,2,1],[1,2,3]]'
]]></output>
                </test-case>
                <test-case id="0-1825" name="function-reverse.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-reverse.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1573973046" result="Passed" start-time="2025-01-14T17:31:20.5156260Z" end-time="2025-01-14T17:31:20.5157576Z" duration="0.000132" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$reverse(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$reverse(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1826" name="function-reverse.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-reverse.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="414256012" result="Passed" start-time="2025-01-14T17:31:20.5157684Z" end-time="2025-01-14T17:31:20.5158953Z" duration="0.000127" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$reverse([1])';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '$reverse([1])'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1827" name="function-round.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="400855240" result="Passed" start-time="2025-01-14T17:31:20.5159074Z" end-time="2025-01-14T17:31:20.5162343Z" duration="0.000327" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(4)';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '$round(4)'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1828" name="function-round.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2067579109" result="Passed" start-time="2025-01-14T17:31:20.5162454Z" end-time="2025-01-14T17:31:20.5166061Z" duration="0.000361" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(2.3)';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$round(2.3)'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1829" name="function-round.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1769445531" result="Passed" start-time="2025-01-14T17:31:20.5166193Z" end-time="2025-01-14T17:31:20.5167382Z" duration="0.000119" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(2.7)';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$round(2.7)'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1830" name="function-round.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1072793286" result="Passed" start-time="2025-01-14T17:31:20.5167487Z" end-time="2025-01-14T17:31:20.5168566Z" duration="0.000108" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(2.5)';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$round(2.5)'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1831" name="function-round.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1551178396" result="Passed" start-time="2025-01-14T17:31:20.5168674Z" end-time="2025-01-14T17:31:20.5169952Z" duration="0.000128" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(3.5)';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '$round(3.5)'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1832" name="function-round.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2027328548" result="Passed" start-time="2025-01-14T17:31:20.5170066Z" end-time="2025-01-14T17:31:20.5171104Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(-0.5)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$round(-0.5)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1833" name="function-round.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="863487410" result="Passed" start-time="2025-01-14T17:31:20.5171217Z" end-time="2025-01-14T17:31:20.5172263Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(-0.3)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$round(-0.3)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1834" name="function-round.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1326872815" result="Passed" start-time="2025-01-14T17:31:20.5172355Z" end-time="2025-01-14T17:31:20.5173003Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(0.5)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$round(0.5)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1835" name="function-round.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1350763567" result="Passed" start-time="2025-01-14T17:31:20.5173071Z" end-time="2025-01-14T17:31:20.5174954Z" duration="0.000189" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(-7.5)';&#xA; result: -8" />
                  </properties>
                  <output><![CDATA[Expr is '$round(-7.5)'
Result: '-8'
Expected: '-8'
]]></output>
                </test-case>
                <test-case id="0-1836" name="function-round.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="201862006" result="Passed" start-time="2025-01-14T17:31:20.5175076Z" end-time="2025-01-14T17:31:20.5176111Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(-8.5)';&#xA; result: -8" />
                  </properties>
                  <output><![CDATA[Expr is '$round(-8.5)'
Result: '-8'
Expected: '-8'
]]></output>
                </test-case>
                <test-case id="0-1837" name="function-round.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="534767076" result="Passed" start-time="2025-01-14T17:31:20.5176236Z" end-time="2025-01-14T17:31:20.5177617Z" duration="0.000138" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(4.49, 1)';&#xA; result: 4.5" />
                  </properties>
                  <output><![CDATA[Expr is '$round(4.49, 1)'
Result: '4.5'
Expected: '4.5'
]]></output>
                </test-case>
                <test-case id="0-1838" name="function-round.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1036679399" result="Passed" start-time="2025-01-14T17:31:20.5177743Z" end-time="2025-01-14T17:31:20.5179115Z" duration="0.000137" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(4.525, 2)';&#xA; result: 4.52" />
                  </properties>
                  <output><![CDATA[Expr is '$round(4.525, 2)'
Result: '4.52'
Expected: '4.52'
]]></output>
                </test-case>
                <test-case id="0-1839" name="function-round.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1806425668" result="Passed" start-time="2025-01-14T17:31:20.5179380Z" end-time="2025-01-14T17:31:20.5181001Z" duration="0.000162" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(4.515, 2)';&#xA; result: 4.52" />
                  </properties>
                  <output><![CDATA[Expr is '$round(4.515, 2)'
Result: '4.52'
Expected: '4.52'
]]></output>
                </test-case>
                <test-case id="0-1840" name="function-round.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="704330349" result="Passed" start-time="2025-01-14T17:31:20.5181127Z" end-time="2025-01-14T17:31:20.5182570Z" duration="0.000144" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(12345, -2)';&#xA; result: 12300" />
                  </properties>
                  <output><![CDATA[Expr is '$round(12345, -2)'
Result: '12300'
Expected: '12300'
]]></output>
                </test-case>
                <test-case id="0-1841" name="function-round.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="233584141" result="Passed" start-time="2025-01-14T17:31:20.5182670Z" end-time="2025-01-14T17:31:20.5183443Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(12450, -2)';&#xA; result: 12400" />
                  </properties>
                  <output><![CDATA[Expr is '$round(12450, -2)'
Result: '12400'
Expected: '12400'
]]></output>
                </test-case>
                <test-case id="0-1842" name="function-round.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="138127785" result="Passed" start-time="2025-01-14T17:31:20.5183516Z" end-time="2025-01-14T17:31:20.5184298Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(12350, -2)';&#xA; result: 12400" />
                  </properties>
                  <output><![CDATA[Expr is '$round(12350, -2)'
Result: '12400'
Expected: '12400'
]]></output>
                </test-case>
                <test-case id="0-1843" name="function-round.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1660915416" result="Passed" start-time="2025-01-14T17:31:20.5184410Z" end-time="2025-01-14T17:31:20.5185267Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(6.022e-23, 24)';&#xA; result: 6E-23" />
                  </properties>
                  <output><![CDATA[Expr is '$round(6.022e-23, 24)'
Result: '0.000000000000000000000060'
Expected: '6E-23'
]]></output>
                </test-case>
                <test-case id="0-1844" name="function-round.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1161962592" result="Passed" start-time="2025-01-14T17:31:20.5185368Z" end-time="2025-01-14T17:31:20.5186057Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(unknown)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$round(unknown)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1845" name="function-shuffle.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="369607828" result="Passed" start-time="2025-01-14T17:31:20.5186136Z" end-time="2025-01-14T17:31:20.5193598Z" duration="0.000746" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count($shuffle([1..10]))';&#xA; result: 10" />
                  </properties>
                  <output><![CDATA[Expr is '$count($shuffle([1..10]))'
Result: '10'
Expected: '10'
]]></output>
                </test-case>
                <test-case id="0-1846" name="function-shuffle.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1244020397" result="Passed" start-time="2025-01-14T17:31:20.5193709Z" end-time="2025-01-14T17:31:20.5206143Z" duration="0.001244" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort($shuffle([1..10]))';&#xA; result: [1,2,3,4,5,6,7,8,9,10]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort($shuffle([1..10]))'
Result: '[1,2,3,4,5,6,7,8,9,10]'
Expected: '[1,2,3,4,5,6,7,8,9,10]'
]]></output>
                </test-case>
                <test-case id="0-1847" name="function-shuffle.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="792431083" result="Passed" start-time="2025-01-14T17:31:20.5206329Z" end-time="2025-01-14T17:31:20.5207865Z" duration="0.000154" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$shuffle(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$shuffle(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1848" name="function-shuffle.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1380955669" result="Passed" start-time="2025-01-14T17:31:20.5207952Z" end-time="2025-01-14T17:31:20.5208941Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$shuffle([1])';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '$shuffle([1])'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1849" name="function-sift.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sift.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="252963586" result="Passed" start-time="2025-01-14T17:31:20.5209023Z" end-time="2025-01-14T17:31:20.5215953Z" duration="0.000693" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sift(λ($v){$v.**.Postcode})';&#xA; result: {&quot;Address&quot;:{&quot;Street&quot;:&quot;Hursley Park&quot;,&quot;City&quot;:&quot;Winchester&quot;,&quot;Postcode&quot;:&quot;SO21 2JN&quot;},&quot;Other&quot;:{&quot;Over 18 ?&quot;:true,&quot;Misc&quot;:null,&quot;Alternative.Address&quot;:{&quot;Street&quot;:&quot;Brick Lane&quot;,&quot;City&quot;:&quot;London&quot;,&quot;Postcode&quot;:&quot;E1 6RF&quot;}}}" />
                  </properties>
                  <output><![CDATA[Expr is '$sift(λ($v){$v.**.Postcode})'
Result: '{"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"},"Other":{"Over 18 ?":true,"Misc":null,"Alternative.Address":{"Street":"Brick Lane","City":"London","Postcode":"E1 6RF"}}}'
Expected: '{"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"},"Other":{"Over 18 ?":true,"Misc":null,"Alternative.Address":{"Street":"Brick Lane","City":"London","Postcode":"E1 6RF"}}}'
]]></output>
                </test-case>
                <test-case id="0-1850" name="function-sift.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sift.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="481647761" result="Passed" start-time="2025-01-14T17:31:20.5216120Z" end-time="2025-01-14T17:31:20.5226491Z" duration="0.001038" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '**[*].$sift(λ($v){$v.Postcode})';&#xA; result: [{&quot;Address&quot;:{&quot;Street&quot;:&quot;Hursley Park&quot;,&quot;City&quot;:&quot;Winchester&quot;,&quot;Postcode&quot;:&quot;SO21 2JN&quot;}},{&quot;Alternative.Address&quot;:{&quot;Street&quot;:&quot;Brick Lane&quot;,&quot;City&quot;:&quot;London&quot;,&quot;Postcode&quot;:&quot;E1 6RF&quot;}}]" />
                  </properties>
                  <output><![CDATA[Expr is '**[*].$sift(λ($v){$v.Postcode})'
Result: '[{"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"}},{"Alternative.Address":{"Street":"Brick Lane","City":"London","Postcode":"E1 6RF"}}]'
Expected: '[{"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"}},{"Alternative.Address":{"Street":"Brick Lane","City":"London","Postcode":"E1 6RF"}}]'
]]></output>
                </test-case>
                <test-case id="0-1851" name="function-sift.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sift.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1525028909" result="Passed" start-time="2025-01-14T17:31:20.5226688Z" end-time="2025-01-14T17:31:20.5252240Z" duration="0.002555" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sift(λ($v, $k){$k ~&gt; /^A/})';&#xA; result: {&quot;Age&quot;:28,&quot;Address&quot;:{&quot;Street&quot;:&quot;Hursley Park&quot;,&quot;City&quot;:&quot;Winchester&quot;,&quot;Postcode&quot;:&quot;SO21 2JN&quot;}}" />
                  </properties>
                  <output><![CDATA[Expr is '$sift(λ($v, $k){$k ~> /^A/})'
Result: '{"Age":28,"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"}}'
Expected: '{"Age":28,"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"}}'
]]></output>
                </test-case>
                <test-case id="0-1852" name="function-sift.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sift.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="880401963" result="Passed" start-time="2025-01-14T17:31:20.5252451Z" end-time="2025-01-14T17:31:20.5254692Z" duration="0.000224" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sift({'a': 1, 'b': 0}, $boolean)';&#xA; result: {&quot;a&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$sift({'a': 1, 'b': 0}, $boolean)'
Result: '{"a":1}'
Expected: '{"a":1}'
]]></output>
                </test-case>
                <test-case id="0-1853" name="function-sift.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sift.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1911305594" result="Passed" start-time="2025-01-14T17:31:20.5254784Z" end-time="2025-01-14T17:31:20.5256157Z" duration="0.000137" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sift({'a': 'hello', 'b': 'world', 'hello': 'again'}, λ($v,$k,$o){$lookup($o, $v)})';&#xA; result: {&quot;a&quot;:&quot;hello&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is '$sift({'a': 'hello', 'b': 'world', 'hello': 'again'}, λ($v,$k,$o){$lookup($o, $v)})'
Result: '{"a":"hello"}'
Expected: '{"a":"hello"}'
]]></output>
                </test-case>
                <test-case id="0-1854" name="function-signatures.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1687269974" result="Passed" start-time="2025-01-14T17:31:20.5256269Z" end-time="2025-01-14T17:31:20.5332048Z" duration="0.007579" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg)&lt;b:b&gt;{$not($arg)}(true)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arg)<b:b>{$not($arg)}(true)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1855" name="function-signatures.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="258677252" result="Passed" start-time="2025-01-14T17:31:20.5332435Z" end-time="2025-01-14T17:31:20.5345992Z" duration="0.001356" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg)&lt;b:b&gt;{$not($arg)}(foo)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arg)<b:b>{$not($arg)}(foo)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1856" name="function-signatures.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1363079469" result="Passed" start-time="2025-01-14T17:31:20.5346236Z" end-time="2025-01-14T17:31:20.5357467Z" duration="0.001123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg)&lt;x:b&gt;{$not($arg)}(null)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arg)<x:b>{$not($arg)}(null)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1857" name="function-signatures.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1336603999" result="Passed" start-time="2025-01-14T17:31:20.5357804Z" end-time="2025-01-14T17:31:20.5380719Z" duration="0.002292" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'function($x,$y)&lt;n-n:n&gt;{$x+$y}(2, 6)';&#xA; result: 8" />
                  </properties>
                  <output><![CDATA[Expr is 'function($x,$y)<n-n:n>{$x+$y}(2, 6)'
Result: '8'
Expected: '8'
]]></output>
                </test-case>
                <test-case id="0-1858" name="function-signatures.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1542884669" result="Passed" start-time="2025-01-14T17:31:20.5381032Z" end-time="2025-01-14T17:31:20.5474653Z" duration="0.009362" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..5].function($x,$y)&lt;n-n:n&gt;{$x+$y}(6)';&#xA; result: [7,8,9,10,11]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..5].function($x,$y)<n-n:n>{$x+$y}(6)'
Result: '[7,8,9,10,11]'
Expected: '[7,8,9,10,11]'
]]></output>
                </test-case>
                <test-case id="0-1859" name="function-signatures.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="260378074" result="Passed" start-time="2025-01-14T17:31:20.5475027Z" end-time="2025-01-14T17:31:20.5534685Z" duration="0.005966" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..5].function($x,$y)&lt;n-n:n&gt;{$x+$y}(2, 6)';&#xA; result: [8,8,8,8,8]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..5].function($x,$y)<n-n:n>{$x+$y}(2, 6)'
Result: '[8,8,8,8,8]'
Expected: '[8,8,8,8,8]'
]]></output>
                </test-case>
                <test-case id="0-1860" name="function-signatures.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="903164697" result="Passed" start-time="2025-01-14T17:31:20.5535118Z" end-time="2025-01-14T17:31:20.5561304Z" duration="0.002619" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Age.function($x,$y)&lt;n-n:n&gt;{$x+$y}(6)';&#xA; result: 34" />
                  </properties>
                  <output><![CDATA[Expr is 'Age.function($x,$y)<n-n:n>{$x+$y}(6)'
Result: '34'
Expected: '34'
]]></output>
                </test-case>
                <test-case id="0-1861" name="function-signatures.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="42220251" result="Passed" start-time="2025-01-14T17:31:20.5561719Z" end-time="2025-01-14T17:31:20.5575605Z" duration="0.001389" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($str)&lt;s-&gt;{$uppercase($str)}(&quot;hello&quot;)';&#xA; result: &quot;HELLO&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($str)<s->{$uppercase($str)}("hello")'
Result: '"HELLO"'
Expected: '"HELLO"'
]]></output>
                </test-case>
                <test-case id="0-1862" name="function-signatures.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1722282043" result="Passed" start-time="2025-01-14T17:31:20.5575888Z" end-time="2025-01-14T17:31:20.5635792Z" duration="0.005991" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Description.Colour.λ($str)&lt;s-&gt;{$uppercase($str)}()';&#xA; result: [&quot;PURPLE&quot;,&quot;ORANGE&quot;,&quot;PURPLE&quot;,&quot;BLACK&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Description.Colour.λ($str)<s->{$uppercase($str)}()'
Result: '["PURPLE","ORANGE","PURPLE","BLACK"]'
Expected: '["PURPLE","ORANGE","PURPLE","BLACK"]'
]]></output>
                </test-case>
                <test-case id="0-1863" name="function-signatures.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1754888398" result="Passed" start-time="2025-01-14T17:31:20.5636140Z" end-time="2025-01-14T17:31:20.5649103Z" duration="0.001297" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($str, $prefix)&lt;s-s&gt;{$prefix &amp; $str}(&quot;World&quot;, &quot;Hello &quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($str, $prefix)<s-s>{$prefix & $str}("World", "Hello ")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-1864" name="function-signatures.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1461052517" result="Passed" start-time="2025-01-14T17:31:20.5649312Z" end-time="2025-01-14T17:31:20.5666364Z" duration="0.001705" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'FirstName.λ($str, $prefix)&lt;s-s&gt;{$prefix &amp; $str}(&quot;Hello &quot;)';&#xA; result: &quot;Hello Fred&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'FirstName.λ($str, $prefix)<s-s>{$prefix & $str}("Hello ")'
Result: '"Hello Fred"'
Expected: '"Hello Fred"'
]]></output>
                </test-case>
                <test-case id="0-1865" name="function-signatures.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2124334747" result="Passed" start-time="2025-01-14T17:31:20.5666643Z" end-time="2025-01-14T17:31:20.5681456Z" duration="0.001482" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}(&quot;a&quot;)';&#xA; result: &quot;a&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}("a")'
Result: '"a"'
Expected: '"a"'
]]></output>
                </test-case>
                <test-case id="0-1866" name="function-signatures.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1279809559" result="Passed" start-time="2025-01-14T17:31:20.5681775Z" end-time="2025-01-14T17:31:20.5699560Z" duration="0.001779" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}([&quot;a&quot;])';&#xA; result: &quot;a&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(["a"])'
Result: '"a"'
Expected: '"a"'
]]></output>
                </test-case>
                <test-case id="0-1867" name="function-signatures.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1322411059" result="Passed" start-time="2025-01-14T17:31:20.5699868Z" end-time="2025-01-14T17:31:20.5712764Z" duration="0.001290" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}(&quot;a&quot;, &quot;-&quot;)';&#xA; result: &quot;a&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}("a", "-")'
Result: '"a"'
Expected: '"a"'
]]></output>
                </test-case>
                <test-case id="0-1868" name="function-signatures.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="308393756" result="Passed" start-time="2025-01-14T17:31:20.5713014Z" end-time="2025-01-14T17:31:20.5724003Z" duration="0.001099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}([&quot;a&quot;], &quot;-&quot;)';&#xA; result: &quot;a&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(["a"], "-")'
Result: '"a"'
Expected: '"a"'
]]></output>
                </test-case>
                <test-case id="0-1869" name="function-signatures.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1573624381" result="Passed" start-time="2025-01-14T17:31:20.5724194Z" end-time="2025-01-14T17:31:20.5735520Z" duration="0.001133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}([&quot;a&quot;, &quot;b&quot;], &quot;-&quot;)';&#xA; result: &quot;a-b&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(["a", "b"], "-")'
Result: '"a-b"'
Expected: '"a-b"'
]]></output>
                </test-case>
                <test-case id="0-1870" name="function-signatures.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1368719092" result="Passed" start-time="2025-01-14T17:31:20.5735737Z" end-time="2025-01-14T17:31:20.5746430Z" duration="0.001069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;as?:s&gt;{$join($arr, $sep)}([&quot;a&quot;, &quot;b&quot;], &quot;-&quot;)';&#xA; result: &quot;a-b&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<as?:s>{$join($arr, $sep)}(["a", "b"], "-")'
Result: '"a-b"'
Expected: '"a-b"'
]]></output>
                </test-case>
                <test-case id="0-1871" name="function-signatures.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1933322890" result="Passed" start-time="2025-01-14T17:31:20.5746630Z" end-time="2025-01-14T17:31:20.5758715Z" duration="0.001209" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}([], &quot;-&quot;)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}([], "-")'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1872" name="function-signatures.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1528505534" result="Passed" start-time="2025-01-14T17:31:20.5758963Z" end-time="2025-01-14T17:31:20.5770255Z" duration="0.001129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}(foo, &quot;-&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(foo, "-")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1873" name="function-signatures.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="85750417" result="Passed" start-time="2025-01-14T17:31:20.5770474Z" end-time="2025-01-14T17:31:20.5780442Z" duration="0.000997" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($obj)&lt;o&gt;{$obj}({&quot;hello&quot;: &quot;world&quot;})';&#xA; result: {&quot;hello&quot;:&quot;world&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($obj)<o>{$obj}({"hello": "world"})'
Result: '{"hello":"world"}'
Expected: '{"hello":"world"}'
]]></output>
                </test-case>
                <test-case id="0-1874" name="function-signatures.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1999557570" result="Passed" start-time="2025-01-14T17:31:20.5780655Z" end-time="2025-01-14T17:31:20.5790708Z" duration="0.001005" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr)&lt;a&lt;a&lt;n&gt;&gt;&gt;{$arr}([[1]])';&#xA; result: [[1]]" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr)<a<a<n>>>{$arr}([[1]])'
Result: '[[1]]'
Expected: '[[1]]'
]]></output>
                </test-case>
                <test-case id="0-1875" name="function-signatures.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="370815418" result="Passed" start-time="2025-01-14T17:31:20.5790984Z" end-time="2025-01-14T17:31:20.5800062Z" duration="0.000908" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($num)&lt;(ns)-:n&gt;{$number($num)}(5)';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($num)<(ns)-:n>{$number($num)}(5)'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-1876" name="function-signatures.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="75776939" result="Passed" start-time="2025-01-14T17:31:20.5800285Z" end-time="2025-01-14T17:31:20.5809410Z" duration="0.000913" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($num)&lt;(ns)-:n&gt;{$number($num)}(&quot;5&quot;)';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($num)<(ns)-:n>{$number($num)}("5")'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-1877" name="function-signatures.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2011377723" result="Passed" start-time="2025-01-14T17:31:20.5809725Z" end-time="2025-01-14T17:31:20.5876887Z" duration="0.006717" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..5].λ($num)&lt;(ns)-:n&gt;{$number($num)}()';&#xA; result: [1,2,3,4,5]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..5].λ($num)<(ns)-:n>{$number($num)}()'
Result: '[1,2,3,4,5]'
Expected: '[1,2,3,4,5]'
]]></output>
                </test-case>
                <test-case id="0-1878" name="function-signatures.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1484859254" result="Passed" start-time="2025-01-14T17:31:20.5877205Z" end-time="2025-01-14T17:31:20.5906251Z" duration="0.002905" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($twice := function($f)&lt;f:f&gt;{function($x)&lt;n:n&gt;{$f($f($x))}};$add2 := function($x)&lt;n:n&gt;{$x+2};$add4 := $twice($add2);$add4(5))';&#xA; result: 9" />
                  </properties>
                  <output><![CDATA[Expr is '($twice := function($f)<f:f>{function($x)<n:n>{$f($f($x))}};$add2 := function($x)<n:n>{$x+2};$add4 := $twice($add2);$add4(5))'
Result: '9'
Expected: '9'
]]></output>
                </test-case>
                <test-case id="0-1879" name="function-signatures.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1392001830" result="Passed" start-time="2025-01-14T17:31:20.5906574Z" end-time="2025-01-14T17:31:20.5932684Z" duration="0.002611" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($twice := function($f)&lt;f&lt;n:n&gt;:f&lt;n:n&gt;&gt;{function($x)&lt;n:n&gt;{$f($f($x))}};$add2 := function($x)&lt;n:n&gt;{$x+2};$add4 := $twice($add2);$add4(5))';&#xA; result: 9" />
                  </properties>
                  <output><![CDATA[Expr is '($twice := function($f)<f<n:n>:f<n:n>>{function($x)<n:n>{$f($f($x))}};$add2 := function($x)<n:n>{$x+2};$add4 := $twice($add2);$add4(5))'
Result: '9'
Expected: '9'
]]></output>
                </test-case>
                <test-case id="0-1880" name="function-signatures.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="329952649" result="Passed" start-time="2025-01-14T17:31:20.5932981Z" end-time="2025-01-14T17:31:20.5936705Z" duration="0.000373" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg)&lt;n&lt;n&gt;&gt;{$arg}(5)';&#xA; result: error S0401" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0401.
Actually thrown S0401.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arg)<n<n>>{$arg}(5)'
]]></output>
                </test-case>
                <test-case id="0-1881" name="function-signatures.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1769308576" result="Passed" start-time="2025-01-14T17:31:20.5936886Z" end-time="2025-01-14T17:31:20.5948240Z" duration="0.001136" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg1, $arg2)&lt;nn:a&gt;{[$arg1, $arg2]}(1,&quot;2&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arg1, $arg2)<nn:a>{[$arg1, $arg2]}(1,"2")'
]]></output>
                </test-case>
                <test-case id="0-1882" name="function-signatures.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1167383218" result="Passed" start-time="2025-01-14T17:31:20.5948437Z" end-time="2025-01-14T17:31:20.5960184Z" duration="0.001175" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg1, $arg2)&lt;nn:a&gt;{[$arg1, $arg2]}(1,3,&quot;2&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arg1, $arg2)<nn:a>{[$arg1, $arg2]}(1,3,"2")'
]]></output>
                </test-case>
                <test-case id="0-1883" name="function-signatures.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1814615523" result="Passed" start-time="2025-01-14T17:31:20.5960412Z" end-time="2025-01-14T17:31:20.5985213Z" duration="0.002480" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg1, $arg2)&lt;nn+:a&gt;{[$arg1, $arg2]}(1,3, 2,&quot;g&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arg1, $arg2)<nn+:a>{[$arg1, $arg2]}(1,3, 2,"g")'
]]></output>
                </test-case>
                <test-case id="0-1884" name="function-signatures.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1287797770" result="Failed" start-time="2025-01-14T17:31:20.5985552Z" end-time="2025-01-14T17:31:20.6002650Z" duration="0.001710" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr)&lt;a&lt;n&gt;&gt;{$arr}([&quot;3&quot;]) ';&#xA; result: error T0412" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error T0412 (), got '["3"]']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is 'λ($arr)<a<n>>{$arr}(["3"]) '
Result: '["3"]'
Expected error T0412
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error T0412 (), got '["3"]']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1885" name="function-signatures.case031" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case031" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1695248024" result="Passed" start-time="2025-01-14T17:31:20.6002916Z" end-time="2025-01-14T17:31:20.6014660Z" duration="0.001175" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr)&lt;a&lt;n&gt;&gt;{$arr}([1, 2, &quot;3&quot;]) ';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arr)<a<n>>{$arr}([1, 2, "3"]) '
]]></output>
                </test-case>
                <test-case id="0-1886" name="function-signatures.case032" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case032" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="670776433" result="Failed" start-time="2025-01-14T17:31:20.6014866Z" end-time="2025-01-14T17:31:20.6027089Z" duration="0.001222" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr)&lt;a&lt;n&gt;&gt;{$arr}(&quot;f&quot;)';&#xA; result: error T0412" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error T0412 (), got '["f"]']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is 'λ($arr)<a<n>>{$arr}("f")'
Result: '["f"]'
Expected error T0412
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error T0412 (), got '["f"]']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1887" name="function-signatures.case033" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case033" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="116022954" result="Failed" start-time="2025-01-14T17:31:20.6027301Z" end-time="2025-01-14T17:31:20.6047426Z" duration="0.002013" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($fun := λ($arr)&lt;a&lt;n&gt;&gt;{$arr};$fun(&quot;f&quot;))';&#xA; result: error T0412" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error T0412 (), got '["f"]']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '($fun := λ($arr)<a<n>>{$arr};$fun("f"))'
Result: '["f"]'
Expected error T0412
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error T0412 (), got '["f"]']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1888" name="function-signatures.case034" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case034" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1323701083" result="Passed" start-time="2025-01-14T17:31:20.6047829Z" end-time="2025-01-14T17:31:20.6052594Z" duration="0.000477" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr)&lt;(sa&lt;n&gt;)&gt;&gt;{$arr}([[1]])';&#xA; result: error S0402" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0402.
Actually thrown XXX.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arr)<(sa<n>)>>{$arr}([[1]])'
]]></output>
                </test-case>
                <test-case id="0-1889" name="function-sort.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1068195563" result="Passed" start-time="2025-01-14T17:31:20.6052745Z" end-time="2025-01-14T17:31:20.6054439Z" duration="0.000170" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$sort(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1890" name="function-sort.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2135167745" result="Passed" start-time="2025-01-14T17:31:20.6054545Z" end-time="2025-01-14T17:31:20.6057315Z" duration="0.000277" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(1)';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort(1)'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1891" name="function-sort.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1012741654" result="Passed" start-time="2025-01-14T17:31:20.6057418Z" end-time="2025-01-14T17:31:20.6058628Z" duration="0.000121" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort([1,3,2])';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort([1,3,2])'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1892" name="function-sort.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1139366054" result="Passed" start-time="2025-01-14T17:31:20.6058710Z" end-time="2025-01-14T17:31:20.6059826Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort([1,3,22,11])';&#xA; result: [1,3,11,22]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort([1,3,22,11])'
Result: '[1,3,11,22]'
Expected: '[1,3,11,22]'
]]></output>
                </test-case>
                <test-case id="0-1893" name="function-sort.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="776301325" result="Passed" start-time="2025-01-14T17:31:20.6059908Z" end-time="2025-01-14T17:31:20.6060730Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[[$], [$sort($)], [$]]';&#xA; result: [[1,3,2],[1,2,3],[1,3,2]]" />
                  </properties>
                  <output><![CDATA[Expr is '[[$], [$sort($)], [$]]'
Result: '[[1,3,2],[1,2,3],[1,3,2]]'
Expected: '[[1,3,2],[1,2,3],[1,3,2]]'
]]></output>
                </test-case>
                <test-case id="0-1894" name="function-sort.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="903260971" result="Passed" start-time="2025-01-14T17:31:20.6060802Z" end-time="2025-01-14T17:31:20.6061867Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(Account.Order.Product.Price)';&#xA; result: [21.67,34.45,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort(Account.Order.Product.Price)'
Result: '[21.67,34.45,34.45,107.99]'
Expected: '[21.67,34.45,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1895" name="function-sort.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="662110098" result="Passed" start-time="2025-01-14T17:31:20.6061974Z" end-time="2025-01-14T17:31:20.6065518Z" duration="0.000354" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(Account.Order.Product.&quot;Product Name&quot;)';&#xA; result: [&quot;Bowler Hat&quot;,&quot;Bowler Hat&quot;,&quot;Cloak&quot;,&quot;Trilby hat&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort(Account.Order.Product."Product Name")'
Result: '["Bowler Hat","Bowler Hat","Cloak","Trilby hat"]'
Expected: '["Bowler Hat","Bowler Hat","Cloak","Trilby hat"]'
]]></output>
                </test-case>
                <test-case id="0-1896" name="function-sort.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="658785745" result="Passed" start-time="2025-01-14T17:31:20.6065617Z" end-time="2025-01-14T17:31:20.6068588Z" duration="0.000297" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$sort(Account.Order.Product)';&#xA; result: error D3070" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3070.
Actually thrown D3070.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$sort(Account.Order.Product)'
]]></output>
                </test-case>
                <test-case id="0-1897" name="function-sort.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="530723034" result="Passed" start-time="2025-01-14T17:31:20.6068683Z" end-time="2025-01-14T17:31:20.6071662Z" duration="0.000298" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(Account.Order.Product, function($a, $b) { $a.(Price * Quantity) &gt; $b.(Price * Quantity) }).(Price &amp; &quot; x &quot; &amp; Quantity)';&#xA; result: [&quot;21.67 x 1&quot;,&quot;34.45 x 2&quot;,&quot;107.99 x 1&quot;,&quot;34.45 x 4&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort(Account.Order.Product, function($a, $b) { $a.(Price * Quantity) > $b.(Price * Quantity) }).(Price & " x " & Quantity)'
Result: '["21.67 x 1","34.45 x 2","107.99 x 1","34.45 x 4"]'
Expected: '["21.67 x 1","34.45 x 2","107.99 x 1","34.45 x 4"]'
]]></output>
                </test-case>
                <test-case id="0-1898" name="function-sort.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="199862899" result="Failed" start-time="2025-01-14T17:31:20.6071762Z" end-time="2025-01-14T17:31:20.6076616Z" duration="0.000486" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(Account.Order.Product, function($a, $b) { $a.Price &gt; $b.Price }).SKU';&#xA; result: [&quot;0406634348&quot;,&quot;0406654608&quot;,&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '["0406634348","0406654608","040657863","0406654603"]', got '["0406634348","040657863","0406654608","0406654603"]'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$sort(Account.Order.Product, function($a, $b) { $a.Price > $b.Price }).SKU'
Result: '["0406634348","040657863","0406654608","0406654603"]'
Expected: '["0406634348","0406654608","040657863","0406654603"]'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '["0406634348","0406654608","040657863","0406654603"]', got '["0406634348","040657863","0406654608","0406654603"]'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1899" name="function-sort.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1185111492" result="Failed" start-time="2025-01-14T17:31:20.6076728Z" end-time="2025-01-14T17:31:20.6083288Z" duration="0.000656" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&#xA;                (Account.Order.Product&#xA;                  ~&gt; $sort(λ($a,$b){$a.Quantity &lt; $b.Quantity})&#xA;                  ~&gt; $sort(λ($a,$b){$a.Price &gt; $b.Price})&#xA;                ).SKU&#xA;            ';&#xA; result: [&quot;0406634348&quot;,&quot;040657863&quot;,&quot;0406654608&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '["0406634348","040657863","0406654608","0406654603"]', got '["0406634348","0406654608","040657863","0406654603"]'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '
                (Account.Order.Product
                  ~> $sort(λ($a,$b){$a.Quantity < $b.Quantity})
                  ~> $sort(λ($a,$b){$a.Price > $b.Price})
                ).SKU
            '
Result: '["0406634348","0406654608","040657863","0406654603"]'
Expected: '["0406634348","040657863","0406654608","0406654603"]'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '["0406634348","040657863","0406654608","0406654603"]', got '["0406634348","0406654608","040657863","0406654603"]'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1900" name="function-split.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1237281916" result="Passed" start-time="2025-01-14T17:31:20.6083488Z" end-time="2025-01-14T17:31:20.6100458Z" duration="0.001698" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;Hello World&quot;, &quot; &quot;)';&#xA; result: [&quot;Hello&quot;,&quot;World&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("Hello World", " ")'
Result: '["Hello","World"]'
Expected: '["Hello","World"]'
]]></output>
                </test-case>
                <test-case id="0-1901" name="function-split.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2069092985" result="Passed" start-time="2025-01-14T17:31:20.6100857Z" end-time="2025-01-14T17:31:20.6105303Z" duration="0.000445" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;Hello&quot;, &quot; &quot;)';&#xA; result: [&quot;Hello&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("Hello", " ")'
Result: '["Hello"]'
Expected: '["Hello"]'
]]></output>
                </test-case>
                <test-case id="0-1902" name="function-split.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="484037327" result="Passed" start-time="2025-01-14T17:31:20.6105445Z" end-time="2025-01-14T17:31:20.6106782Z" duration="0.000134" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;Hello  World&quot;, &quot; &quot;)';&#xA; result: [&quot;Hello&quot;,&quot;&quot;,&quot;World&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("Hello  World", " ")'
Result: '["Hello","","World"]'
Expected: '["Hello","","World"]'
]]></output>
                </test-case>
                <test-case id="0-1903" name="function-split.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1954814935" result="Passed" start-time="2025-01-14T17:31:20.6106882Z" end-time="2025-01-14T17:31:20.6108122Z" duration="0.000124" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;Hello&quot;, &quot;&quot;)';&#xA; result: [&quot;H&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("Hello", "")'
Result: '["H","e","l","l","o"]'
Expected: '["H","e","l","l","o"]'
]]></output>
                </test-case>
                <test-case id="0-1904" name="function-split.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1031728141" result="Passed" start-time="2025-01-14T17:31:20.6108210Z" end-time="2025-01-14T17:31:20.6109203Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sum($split(&quot;12345&quot;, &quot;&quot;).$number($))';&#xA; result: 15" />
                  </properties>
                  <output><![CDATA[Expr is '$sum($split("12345", "").$number($))'
Result: '15'
Expected: '15'
]]></output>
                </test-case>
                <test-case id="0-1905" name="function-split.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="695808518" result="Passed" start-time="2025-01-14T17:31:20.6109316Z" end-time="2025-01-14T17:31:20.6111356Z" duration="0.000204" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;)';&#xA; result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ")'
Result: '["a","b","c","d"]'
Expected: '["a","b","c","d"]'
]]></output>
                </test-case>
                <test-case id="0-1906" name="function-split.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2144007022" result="Passed" start-time="2025-01-14T17:31:20.6111454Z" end-time="2025-01-14T17:31:20.6112242Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, 2)';&#xA; result: [&quot;a&quot;,&quot;b&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", 2)'
Result: '["a","b"]'
Expected: '["a","b"]'
]]></output>
                </test-case>
                <test-case id="0-1907" name="function-split.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="794651546" result="Passed" start-time="2025-01-14T17:31:20.6112312Z" end-time="2025-01-14T17:31:20.6113138Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, 2.5)';&#xA; result: [&quot;a&quot;,&quot;b&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", 2.5)'
Result: '["a","b"]'
Expected: '["a","b"]'
]]></output>
                </test-case>
                <test-case id="0-1908" name="function-split.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2059231671" result="Passed" start-time="2025-01-14T17:31:20.6113242Z" end-time="2025-01-14T17:31:20.6114098Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, 10)';&#xA; result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", 10)'
Result: '["a","b","c","d"]'
Expected: '["a","b","c","d"]'
]]></output>
                </test-case>
                <test-case id="0-1909" name="function-split.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1316454556" result="Passed" start-time="2025-01-14T17:31:20.6114181Z" end-time="2025-01-14T17:31:20.6114874Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, 0)';&#xA; result: []" />
                  </properties>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", 0)'
Result: '[]'
Expected: '[]'
]]></output>
                </test-case>
                <test-case id="0-1910" name="function-split.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="182900313" result="Passed" start-time="2025-01-14T17:31:20.6114945Z" end-time="2025-01-14T17:31:20.6115556Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(nothing, &quot; &quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$split(nothing, " ")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1911" name="function-split.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1499185393" result="Passed" start-time="2025-01-14T17:31:20.6115621Z" end-time="2025-01-14T17:31:20.6119129Z" duration="0.000351" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, -3)';&#xA; result: error D3020" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3020.
Actually thrown D3020.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", -3)'
]]></output>
                </test-case>
                <test-case id="0-1912" name="function-split.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1999228392" result="Passed" start-time="2025-01-14T17:31:20.6119232Z" end-time="2025-01-14T17:31:20.6121656Z" duration="0.000243" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", null)'
]]></output>
                </test-case>
                <test-case id="0-1913" name="function-split.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="150882839" result="Passed" start-time="2025-01-14T17:31:20.6121748Z" end-time="2025-01-14T17:31:20.6140418Z" duration="0.001867" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, -5)';&#xA; result: error D3020" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3020.
Actually thrown D3020.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", -5)'
]]></output>
                </test-case>
                <test-case id="0-1914" name="function-split.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2077909072" result="Passed" start-time="2025-01-14T17:31:20.6140628Z" end-time="2025-01-14T17:31:20.6144084Z" duration="0.000346" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, &quot;2&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", "2")'
]]></output>
                </test-case>
                <test-case id="0-1915" name="function-split.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1281339768" result="Passed" start-time="2025-01-14T17:31:20.6144199Z" end-time="2025-01-14T17:31:20.6146987Z" duration="0.000279" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, true)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split("a, b, c, d", true)'
]]></output>
                </test-case>
                <test-case id="0-1916" name="function-split.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1022320680" result="Passed" start-time="2025-01-14T17:31:20.6147113Z" end-time="2025-01-14T17:31:20.6149733Z" duration="0.000262" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(12345, 3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split(12345, 3)'
]]></output>
                </test-case>
                <test-case id="0-1917" name="function-split.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2055150167" result="Passed" start-time="2025-01-14T17:31:20.6149848Z" end-time="2025-01-14T17:31:20.6152069Z" duration="0.000222" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(12345)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split(12345)'
]]></output>
                </test-case>
                <test-case id="0-1918" name="function-split.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="467090628" result="Passed" start-time="2025-01-14T17:31:20.6152178Z" end-time="2025-01-14T17:31:20.6153516Z" duration="0.000134" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split('12💩345💩6', '💩')';&#xA; result: [&quot;12&quot;,&quot;345&quot;,&quot;6&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split('12💩345💩6', '💩')'
Result: '["12","345","6"]'
Expected: '["12","345","6"]'
]]></output>
                </test-case>
                <test-case id="0-1919" name="function-spread.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-spread.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1913288140" result="Passed" start-time="2025-01-14T17:31:20.6153603Z" end-time="2025-01-14T17:31:20.6159017Z" duration="0.000542" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$spread(&quot;Hello World&quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$spread("Hello World")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-1920" name="function-spread.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-spread.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1453558314" result="Passed" start-time="2025-01-14T17:31:20.6159122Z" end-time="2025-01-14T17:31:20.6163043Z" duration="0.000392" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$spread((Account.Order.Product.Description))';&#xA; result: [{&quot;Colour&quot;:&quot;Purple&quot;},{&quot;Width&quot;:300},{&quot;Height&quot;:200},{&quot;Depth&quot;:210},{&quot;Weight&quot;:0.75},{&quot;Colour&quot;:&quot;Orange&quot;},{&quot;Width&quot;:300},{&quot;Height&quot;:200},{&quot;Depth&quot;:210},{&quot;Weight&quot;:0.6},{&quot;Colour&quot;:&quot;Purple&quot;},{&quot;Width&quot;:300},{&quot;Height&quot;:200},{&quot;Depth&quot;:210},{&quot;Weight&quot;:0.75},{&quot;Colour&quot;:&quot;Black&quot;},{&quot;Width&quot;:30},{&quot;Height&quot;:20},{&quot;Depth&quot;:210},{&quot;Weight&quot;:2}]" />
                  </properties>
                  <output><![CDATA[Expr is '$spread((Account.Order.Product.Description))'
Result: '[{"Colour":"Purple"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.75},{"Colour":"Orange"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.6},{"Colour":"Purple"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.75},{"Colour":"Black"},{"Width":30},{"Height":20},{"Depth":210},{"Weight":2}]'
Expected: '[{"Colour":"Purple"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.75},{"Colour":"Orange"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.6},{"Colour":"Purple"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.75},{"Colour":"Black"},{"Width":30},{"Height":20},{"Depth":210},{"Weight":2}]'
]]></output>
                </test-case>
                <test-case id="0-1921" name="function-spread.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-spread.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1163786605" result="Passed" start-time="2025-01-14T17:31:20.6163145Z" end-time="2025-01-14T17:31:20.6164307Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$spread(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$spread(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1922" name="function-spread.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-spread.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2146193623" result="Passed" start-time="2025-01-14T17:31:20.6164412Z" end-time="2025-01-14T17:31:20.6165743Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string($spread(function($x){$x*$x}))';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string($spread(function($x){$x*$x}))'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1923" name="function-sqrt.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1387681840" result="Passed" start-time="2025-01-14T17:31:20.6166161Z" end-time="2025-01-14T17:31:20.6168951Z" duration="0.000279" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sqrt(4)';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$sqrt(4)'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1924" name="function-sqrt.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1585940283" result="Passed" start-time="2025-01-14T17:31:20.6169062Z" end-time="2025-01-14T17:31:20.6173154Z" duration="0.000409" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sqrt(2)';&#xA; result: 1.4142135623730951" />
                  </properties>
                  <output><![CDATA[Expr is '$sqrt(2)'
Result: '1.4142135623731'
Expected: '1.4142135623730951'
]]></output>
                </test-case>
                <test-case id="0-1925" name="function-sqrt.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="355977438" result="Passed" start-time="2025-01-14T17:31:20.6173282Z" end-time="2025-01-14T17:31:20.6174386Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sqrt(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$sqrt(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1926" name="function-sqrt.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="793956836" result="Passed" start-time="2025-01-14T17:31:20.6174496Z" end-time="2025-01-14T17:31:20.6178742Z" duration="0.000425" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$sqrt(-2)';&#xA; result: error D3060" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3060.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$sqrt(-2)'
]]></output>
                </test-case>
                <test-case id="0-1927" name="function-string.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="752204209" result="Passed" start-time="2025-01-14T17:31:20.6178856Z" end-time="2025-01-14T17:31:20.6180085Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(5)';&#xA; result: &quot;5&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(5)'
Result: '"5"'
Expected: '"5"'
]]></output>
                </test-case>
                <test-case id="0-1928" name="function-string.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1329973093" result="Passed" start-time="2025-01-14T17:31:20.6180188Z" end-time="2025-01-14T17:31:20.6181435Z" duration="0.000125" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(22/7)';&#xA; result: &quot;3.14285714285714&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(22/7)'
Result: '"3.14285714285714"'
Expected: '"3.14285714285714"'
]]></output>
                </test-case>
                <test-case id="0-1929" name="function-string.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1337447472" result="Passed" start-time="2025-01-14T17:31:20.6181547Z" end-time="2025-01-14T17:31:20.6183693Z" duration="0.000215" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e100)';&#xA; result: &quot;1e+100&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(1e100)'
Result: '"1e+100"'
Expected: '"1e+100"'
]]></output>
                </test-case>
                <test-case id="0-1930" name="function-string.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1859513320" result="Failed" start-time="2025-01-14T17:31:20.6183802Z" end-time="2025-01-14T17:31:20.6191094Z" duration="0.000730" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e-100)';&#xA; result: &quot;1e-100&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1e-100"', got '"0"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$string(1e-100)'
Result: '"0"'
Expected: '"1e-100"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1e-100"', got '"0"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1931" name="function-string.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1692537552" result="Passed" start-time="2025-01-14T17:31:20.6191279Z" end-time="2025-01-14T17:31:20.6193331Z" duration="0.000205" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e-6)';&#xA; result: &quot;0.000001&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(1e-6)'
Result: '"0.000001"'
Expected: '"0.000001"'
]]></output>
                </test-case>
                <test-case id="0-1932" name="function-string.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1811514824" result="Failed" start-time="2025-01-14T17:31:20.6193667Z" end-time="2025-01-14T17:31:20.6198941Z" duration="0.000528" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e-7)';&#xA; result: &quot;1e-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1e-7"', got '"0.0000001"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$string(1e-7)'
Result: '"0.0000001"'
Expected: '"1e-7"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1e-7"', got '"0.0000001"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1933" name="function-string.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="299747762" result="Passed" start-time="2025-01-14T17:31:20.6199068Z" end-time="2025-01-14T17:31:20.6200498Z" duration="0.000143" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e20)';&#xA; result: &quot;100000000000000000000&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(1e20)'
Result: '"100000000000000000000"'
Expected: '"100000000000000000000"'
]]></output>
                </test-case>
                <test-case id="0-1934" name="function-string.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="154719914" result="Failed" start-time="2025-01-14T17:31:20.6200620Z" end-time="2025-01-14T17:31:20.6206238Z" duration="0.000562" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e21)';&#xA; result: &quot;1e+21&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1e+21"', got '"1000000000000000000000"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$string(1e21)'
Result: '"1000000000000000000000"'
Expected: '"1e+21"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1e+21"', got '"1000000000000000000000"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1935" name="function-string.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="408343311" result="Passed" start-time="2025-01-14T17:31:20.6206384Z" end-time="2025-01-14T17:31:20.6208323Z" duration="0.000194" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$string($sum(Product.(Price* Quantity)))';&#xA; result: [&quot;90.57&quot;,&quot;245.79&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$string($sum(Product.(Price* Quantity)))'
Result: '["90.57","245.79"]'
Expected: '["90.57","245.79"]'
]]></output>
                </test-case>
                <test-case id="0-1936" name="function-string.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1285271249" result="Passed" start-time="2025-01-14T17:31:20.6208423Z" end-time="2025-01-14T17:31:20.6209297Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(true)';&#xA; result: &quot;true&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(true)'
Result: '"true"'
Expected: '"true"'
]]></output>
                </test-case>
                <test-case id="0-1937" name="function-string.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1360051930" result="Passed" start-time="2025-01-14T17:31:20.6209369Z" end-time="2025-01-14T17:31:20.6210149Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(false)';&#xA; result: &quot;false&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(false)'
Result: '"false"'
Expected: '"false"'
]]></output>
                </test-case>
                <test-case id="0-1938" name="function-string.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="782887382" result="Passed" start-time="2025-01-14T17:31:20.6210217Z" end-time="2025-01-14T17:31:20.6211113Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(null)';&#xA; result: &quot;null&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(null)'
Result: '"null"'
Expected: '"null"'
]]></output>
                </test-case>
                <test-case id="0-1939" name="function-string.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="591989252" result="Passed" start-time="2025-01-14T17:31:20.6211201Z" end-time="2025-01-14T17:31:20.6212096Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$string(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1940" name="function-string.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1698724649" result="Passed" start-time="2025-01-14T17:31:20.6212196Z" end-time="2025-01-14T17:31:20.6213016Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string($string)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string($string)'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1941" name="function-string.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2023608534" result="Passed" start-time="2025-01-14T17:31:20.6213088Z" end-time="2025-01-14T17:31:20.6214085Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(function(){true})';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(function(){true})'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1942" name="function-string.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="204274930" result="Passed" start-time="2025-01-14T17:31:20.6214160Z" end-time="2025-01-14T17:31:20.6215130Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(function(){1})';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(function(){1})'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1943" name="function-string.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="7246527" result="Passed" start-time="2025-01-14T17:31:20.6215208Z" end-time="2025-01-14T17:31:20.6220661Z" duration="0.000545" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({&quot;string&quot;: &quot;hello&quot;})';&#xA; result: &quot;{\&quot;string\&quot;:\&quot;hello\&quot;}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({"string": "hello"})'
Result: '"{\"string\":\"hello\"}"'
Expected: '"{\"string\":\"hello\"}"'
]]></output>
                </test-case>
                <test-case id="0-1944" name="function-string.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="885295250" result="Passed" start-time="2025-01-14T17:31:20.6220781Z" end-time="2025-01-14T17:31:20.6223279Z" duration="0.000250" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string([&quot;string&quot;, 5])';&#xA; result: &quot;[\&quot;string\&quot;,5]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(["string", 5])'
Result: '"[\"string\",5]"'
Expected: '"[\"string\",5]"'
]]></output>
                </test-case>
                <test-case id="0-1945" name="function-string.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="635982352" result="Passed" start-time="2025-01-14T17:31:20.6223399Z" end-time="2025-01-14T17:31:20.6226421Z" duration="0.000302" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({  &quot;string&quot;: &quot;hello&quot;,  &quot;number&quot;: 78.8 / 2,  &quot;null&quot;:null,  &quot;boolean&quot;: false,  &quot;function&quot;: $sum,  &quot;lambda&quot;: function(){true},  &quot;object&quot;: {    &quot;str&quot;: &quot;another&quot;,    &quot;lambda2&quot;: function($n){$n}  },  &quot;array&quot;: []})';&#xA; result: &quot;{\&quot;string\&quot;:\&quot;hello\&quot;,\&quot;number\&quot;:39.4,\&quot;null\&quot;:null,\&quot;boolean\&quot;:false,\&quot;function\&quot;:\&quot;\&quot;,\&quot;lambda\&quot;:\&quot;\&quot;,\&quot;object\&quot;:{\&quot;str\&quot;:\&quot;another\&quot;,\&quot;lambda2\&quot;:\&quot;\&quot;},\&quot;array\&quot;:[]}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({  "string": "hello",  "number": 78.8 / 2,  "null":null,  "boolean": false,  "function": $sum,  "lambda": function(){true},  "object": {    "str": "another",    "lambda2": function($n){$n}  },  "array": []})'
Result: '"{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}"'
Expected: '"{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}"'
]]></output>
                </test-case>
                <test-case id="0-1946" name="function-string.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1160996909" result="Passed" start-time="2025-01-14T17:31:20.6226531Z" end-time="2025-01-14T17:31:20.6230401Z" duration="0.000387" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$string(1/0)';&#xA; result: error D3001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3001.
Actually thrown S0102.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$string(1/0)'
]]></output>
                </test-case>
                <test-case id="0-1947" name="function-string.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="988483215" result="Passed" start-time="2025-01-14T17:31:20.6230510Z" end-time="2025-01-14T17:31:20.6232707Z" duration="0.000220" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$string({&quot;inf&quot;: 1/0})';&#xA; result: error D1001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D1001.
Actually thrown S0102.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$string({"inf": 1/0})'
]]></output>
                </test-case>
                <test-case id="0-1948" name="function-string.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="845875900" result="Passed" start-time="2025-01-14T17:31:20.6232796Z" end-time="2025-01-14T17:31:20.6234929Z" duration="0.000213" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$string(2,3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$string(2,3)'
]]></output>
                </test-case>
                <test-case id="0-1949" name="function-string.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1769404850" result="Passed" start-time="2025-01-14T17:31:20.6235038Z" end-time="2025-01-14T17:31:20.6235955Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string()';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$string()'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1950" name="function-string.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1787273065" result="Passed" start-time="2025-01-14T17:31:20.6236031Z" end-time="2025-01-14T17:31:20.6236996Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({&quot;string&quot;: &quot;hello&quot;}, false)';&#xA; result: &quot;{\&quot;string\&quot;:\&quot;hello\&quot;}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({"string": "hello"}, false)'
Result: '"{\"string\":\"hello\"}"'
Expected: '"{\"string\":\"hello\"}"'
]]></output>
                </test-case>
                <test-case id="0-1951" name="function-string.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="751119225" result="Passed" start-time="2025-01-14T17:31:20.6237102Z" end-time="2025-01-14T17:31:20.6243185Z" duration="0.000608" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({&quot;string&quot;: &quot;hello&quot;}, true)';&#xA; result: &quot;{\n  \&quot;string\&quot;: \&quot;hello\&quot;\n}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({"string": "hello"}, true)'
Result: '"{\n  \"string\": \"hello\"\n}"'
Expected: '"{\n  \"string\": \"hello\"\n}"'
]]></output>
                </test-case>
                <test-case id="0-1952" name="function-string.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="63632406" result="Passed" start-time="2025-01-14T17:31:20.6243308Z" end-time="2025-01-14T17:31:20.6244558Z" duration="0.000125" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string([&quot;string&quot;, 5], false)';&#xA; result: &quot;[\&quot;string\&quot;,5]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(["string", 5], false)'
Result: '"[\"string\",5]"'
Expected: '"[\"string\",5]"'
]]></output>
                </test-case>
                <test-case id="0-1953" name="function-string.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="434058406" result="Passed" start-time="2025-01-14T17:31:20.6244651Z" end-time="2025-01-14T17:31:20.6247475Z" duration="0.000283" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string([&quot;string&quot;, 5], true)';&#xA; result: &quot;[\n  \&quot;string\&quot;,\n  5\n]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(["string", 5], true)'
Result: '"[\n  \"string\",\n  5\n]"'
Expected: '"[\n  \"string\",\n  5\n]"'
]]></output>
                </test-case>
                <test-case id="0-1954" name="function-string.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1879036825" result="Passed" start-time="2025-01-14T17:31:20.6247596Z" end-time="2025-01-14T17:31:20.6250526Z" duration="0.000293" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({  &quot;string&quot;: &quot;hello&quot;,  &quot;number&quot;: 78.8 / 2,  &quot;null&quot;:null,  &quot;boolean&quot;: false,  &quot;function&quot;: $sum,  &quot;lambda&quot;: function(){true},  &quot;object&quot;: {    &quot;str&quot;: &quot;another&quot;,    &quot;lambda2&quot;: function($n){$n}  },  &quot;array&quot;: []}, false)';&#xA; result: &quot;{\&quot;string\&quot;:\&quot;hello\&quot;,\&quot;number\&quot;:39.4,\&quot;null\&quot;:null,\&quot;boolean\&quot;:false,\&quot;function\&quot;:\&quot;\&quot;,\&quot;lambda\&quot;:\&quot;\&quot;,\&quot;object\&quot;:{\&quot;str\&quot;:\&quot;another\&quot;,\&quot;lambda2\&quot;:\&quot;\&quot;},\&quot;array\&quot;:[]}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({  "string": "hello",  "number": 78.8 / 2,  "null":null,  "boolean": false,  "function": $sum,  "lambda": function(){true},  "object": {    "str": "another",    "lambda2": function($n){$n}  },  "array": []}, false)'
Result: '"{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}"'
Expected: '"{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}"'
]]></output>
                </test-case>
                <test-case id="0-1955" name="function-string.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="73495311" result="Passed" start-time="2025-01-14T17:31:20.6250645Z" end-time="2025-01-14T17:31:20.6253368Z" duration="0.000272" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({  &quot;string&quot;: &quot;hello&quot;,  &quot;number&quot;: 78.8 / 2,  &quot;null&quot;:null,  &quot;boolean&quot;: false,  &quot;function&quot;: $sum,  &quot;lambda&quot;: function(){true},  &quot;object&quot;: {    &quot;str&quot;: &quot;another&quot;,    &quot;lambda2&quot;: function($n){$n}  },  &quot;array&quot;: []}, true)';&#xA; result: &quot;{\n  \&quot;string\&quot;: \&quot;hello\&quot;,\n  \&quot;number\&quot;: 39.4,\n  \&quot;null\&quot;: null,\n  \&quot;boolean\&quot;: false,\n  \&quot;function\&quot;: \&quot;\&quot;,\n  \&quot;lambda\&quot;: \&quot;\&quot;,\n  \&quot;object\&quot;: {\n    \&quot;str\&quot;: \&quot;another\&quot;,\n    \&quot;lambda2\&quot;: \&quot;\&quot;\n  },\n  \&quot;array\&quot;: []\n}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({  "string": "hello",  "number": 78.8 / 2,  "null":null,  "boolean": false,  "function": $sum,  "lambda": function(){true},  "object": {    "str": "another",    "lambda2": function($n){$n}  },  "array": []}, true)'
Result: '"{\n  \"string\": \"hello\",\n  \"number\": 39.4,\n  \"null\": null,\n  \"boolean\": false,\n  \"function\": \"\",\n  \"lambda\": \"\",\n  \"object\": {\n    \"str\": \"another\",\n    \"lambda2\": \"\"\n  },\n  \"array\": []\n}"'
Expected: '"{\n  \"string\": \"hello\",\n  \"number\": 39.4,\n  \"null\": null,\n  \"boolean\": false,\n  \"function\": \"\",\n  \"lambda\": \"\",\n  \"object\": {\n    \"str\": \"another\",\n    \"lambda2\": \"\"\n  },\n  \"array\": []\n}"'
]]></output>
                </test-case>
                <test-case id="0-1956" name="function-string.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2070383009" result="Failed" start-time="2025-01-14T17:31:20.6253476Z" end-time="2025-01-14T17:31:20.6259794Z" duration="0.000632" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string()';&#xA; result: &quot;[4,true]&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"[4,true]"', got '"[[4,true]]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$string()'
Result: '"[[4,true]]"'
Expected: '"[4,true]"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"[4,true]"', got '"[[4,true]]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1957" name="function-substring.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1243839134" result="Passed" start-time="2025-01-14T17:31:20.6259951Z" end-time="2025-01-14T17:31:20.6263742Z" duration="0.000379" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, 0, 5)';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", 0, 5)'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1958" name="function-substring.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="368874652" result="Passed" start-time="2025-01-14T17:31:20.6263855Z" end-time="2025-01-14T17:31:20.6264925Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, 5)';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, 5)'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-1959" name="function-substring.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="675750703" result="Passed" start-time="2025-01-14T17:31:20.6265002Z" end-time="2025-01-14T17:31:20.6265824Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, 6)';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", 6)'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-1960" name="function-substring.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2049335329" result="Passed" start-time="2025-01-14T17:31:20.6265894Z" end-time="2025-01-14T17:31:20.6266711Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(blah, 6)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$substring(blah, 6)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1961" name="function-substring.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1391802813" result="Failed" start-time="2025-01-14T17:31:20.6266779Z" end-time="2025-01-14T17:31:20.6271740Z" duration="0.000496" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring('𝄞💩', 0, 2)';&#xA; result: &quot;𝄞💩&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"𝄞💩"', got '"𝄞"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring('𝄞💩', 0, 2)'
Result: '"𝄞"'
Expected: '"𝄞💩"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"𝄞💩"', got '"𝄞"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1962" name="function-substring.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1612162100" result="Failed" start-time="2025-01-14T17:31:20.6271847Z" end-time="2025-01-14T17:31:20.6275479Z" duration="0.000363" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring('𝄞💩', 0, 1)';&#xA; result: &quot;𝄞&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"𝄞"', got '"\ud834"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring('𝄞💩', 0, 1)'
Result: '"\ud834"'
Expected: '"𝄞"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"𝄞"', got '"\ud834"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1963" name="function-substring.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="721784199" result="Failed" start-time="2025-01-14T17:31:20.6275586Z" end-time="2025-01-14T17:31:20.6278835Z" duration="0.000325" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring('𝄞💩', 1, 1)';&#xA; result: &quot;💩&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"💩"', got '"\udd1e"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring('𝄞💩', 1, 1)'
Result: '"\udd1e"'
Expected: '"💩"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"💩"', got '"\udd1e"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1964" name="function-substring.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1604424883" result="Passed" start-time="2025-01-14T17:31:20.6278933Z" end-time="2025-01-14T17:31:20.6279887Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5)';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5)'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-1965" name="function-substring.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="637846408" result="Passed" start-time="2025-01-14T17:31:20.6279959Z" end-time="2025-01-14T17:31:20.6280768Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, 5)';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, 5)'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-1966" name="function-substring.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1835154216" result="Passed" start-time="2025-01-14T17:31:20.6280838Z" end-time="2025-01-14T17:31:20.6281628Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, 4)';&#xA; result: &quot;worl&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, 4)'
Result: '"worl"'
Expected: '"worl"'
]]></output>
                </test-case>
                <test-case id="0-1967" name="function-substring.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1699480630" result="Passed" start-time="2025-01-14T17:31:20.6281697Z" end-time="2025-01-14T17:31:20.6282472Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, 1)';&#xA; result: &quot;w&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, 1)'
Result: '"w"'
Expected: '"w"'
]]></output>
                </test-case>
                <test-case id="0-1968" name="function-substring.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2143646572" result="Passed" start-time="2025-01-14T17:31:20.6282549Z" end-time="2025-01-14T17:31:20.6283515Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, 0)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, 0)'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1969" name="function-substring.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1669565761" result="Passed" start-time="2025-01-14T17:31:20.6283594Z" end-time="2025-01-14T17:31:20.6284440Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, -1)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, -1)'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1970" name="function-substring.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2143552166" result="Passed" start-time="2025-01-14T17:31:20.6284510Z" end-time="2025-01-14T17:31:20.6285432Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, 0, -6)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", 0, -6)'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1971" name="function-substring.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1809752397" result="Passed" start-time="2025-01-14T17:31:20.6285523Z" end-time="2025-01-14T17:31:20.6286631Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -100, 3)';&#xA; result: &quot;hel&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -100, 3)'
Result: '"hel"'
Expected: '"hel"'
]]></output>
                </test-case>
                <test-case id="0-1972" name="function-substring.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1272262785" result="Failed" start-time="2025-01-14T17:31:20.6286720Z" end-time="2025-01-14T17:31:20.6290536Z" duration="0.000382" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;😂😁😀&quot;, -2, 1)';&#xA; result: &quot;😁&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"😁"', got '"\ud83d"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring("😂😁😀", -2, 1)'
Result: '"\ud83d"'
Expected: '"😁"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"😁"', got '"\ud83d"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1973" name="function-substring.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2022585023" result="Failed" start-time="2025-01-14T17:31:20.6290633Z" end-time="2025-01-14T17:31:20.6296525Z" duration="0.000590" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;😂😁😀&quot;, -3, 1)';&#xA; result: &quot;😂&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"😂"', got '"\ude01"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring("😂😁😀", -3, 1)'
Result: '"\ude01"'
Expected: '"😂"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"😂"', got '"\ude01"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1974" name="function-substring.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="214563491" result="Failed" start-time="2025-01-14T17:31:20.6296676Z" end-time="2025-01-14T17:31:20.6301688Z" duration="0.000501" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;😂😁😀&quot;, -4, 1)';&#xA; result: &quot;😂&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"😂"', got '"\ud83d"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring("😂😁😀", -4, 1)'
Result: '"\ud83d"'
Expected: '"😂"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"😂"', got '"\ud83d"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1975" name="function-substring.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1577433427" result="Failed" start-time="2025-01-14T17:31:20.6301800Z" end-time="2025-01-14T17:31:20.6305626Z" duration="0.000383" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;😂😁😀&quot;, -5, 1)';&#xA; result: &quot;😂&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"😂"', got '"\ude02"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring("😂😁😀", -5, 1)'
Result: '"\ude02"'
Expected: '"😂"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"😂"', got '"\ude02"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1976" name="function-substringAfter.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="959511675" result="Passed" start-time="2025-01-14T17:31:20.6305761Z" end-time="2025-01-14T17:31:20.6307630Z" duration="0.000187" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hello World&quot;, &quot; &quot;)';&#xA; result: &quot;World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hello World", " ")'
Result: '"World"'
Expected: '"World"'
]]></output>
                </test-case>
                <test-case id="0-1977" name="function-substringAfter.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2138947096" result="Passed" start-time="2025-01-14T17:31:20.6307752Z" end-time="2025-01-14T17:31:20.6309047Z" duration="0.000130" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hello World&quot;, &quot;l&quot;)';&#xA; result: &quot;lo World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hello World", "l")'
Result: '"lo World"'
Expected: '"lo World"'
]]></output>
                </test-case>
                <test-case id="0-1978" name="function-substringAfter.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="502386590" result="Passed" start-time="2025-01-14T17:31:20.6309137Z" end-time="2025-01-14T17:31:20.6310054Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hello World&quot;, &quot;f&quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hello World", "f")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-1979" name="function-substringAfter.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="949957931" result="Passed" start-time="2025-01-14T17:31:20.6310152Z" end-time="2025-01-14T17:31:20.6311184Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hello World&quot;, &quot;ld&quot;)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hello World", "ld")'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1980" name="function-substringAfter.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1342464176" result="Passed" start-time="2025-01-14T17:31:20.6311272Z" end-time="2025-01-14T17:31:20.6312120Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(blah, &quot;ld&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter(blah, "ld")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1981" name="function-substringBefore.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1952957268" result="Passed" start-time="2025-01-14T17:31:20.6312189Z" end-time="2025-01-14T17:31:20.6313066Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hello World&quot;, &quot; &quot;)';&#xA; result: &quot;Hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hello World", " ")'
Result: '"Hello"'
Expected: '"Hello"'
]]></output>
                </test-case>
                <test-case id="0-1982" name="function-substringBefore.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2053811956" result="Passed" start-time="2025-01-14T17:31:20.6313166Z" end-time="2025-01-14T17:31:20.6314118Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hello World&quot;, &quot;l&quot;)';&#xA; result: &quot;He&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hello World", "l")'
Result: '"He"'
Expected: '"He"'
]]></output>
                </test-case>
                <test-case id="0-1983" name="function-substringBefore.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1708051890" result="Passed" start-time="2025-01-14T17:31:20.6314196Z" end-time="2025-01-14T17:31:20.6315098Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hello World&quot;, &quot;f&quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hello World", "f")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-1984" name="function-substringBefore.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1697658054" result="Passed" start-time="2025-01-14T17:31:20.6315174Z" end-time="2025-01-14T17:31:20.6316420Z" duration="0.000125" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hello World&quot;, &quot;He&quot;)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hello World", "He")'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1985" name="function-substringBefore.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1108394095" result="Passed" start-time="2025-01-14T17:31:20.6316527Z" end-time="2025-01-14T17:31:20.6317743Z" duration="0.000121" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(blah, &quot;He&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore(blah, "He")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1986" name="function-sum.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1628905146" result="Passed" start-time="2025-01-14T17:31:20.6317836Z" end-time="2025-01-14T17:31:20.6319540Z" duration="0.000171" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sum(Account.Order.Product.(Price * Quantity))';&#xA; result: 336.36" />
                  </properties>
                  <output><![CDATA[Expr is '$sum(Account.Order.Product.(Price * Quantity))'
Result: '336.36'
Expected: '336.36'
]]></output>
                </test-case>
                <test-case id="0-1987" name="function-sum.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1377456418" result="Passed" start-time="2025-01-14T17:31:20.6319656Z" end-time="2025-01-14T17:31:20.6321606Z" duration="0.000195" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$sum(Product.(Price * Quantity))';&#xA; result: [90.57000000000001,245.79000000000002]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$sum(Product.(Price * Quantity))'
Result: '[90.57,245.79]'
Expected: '[90.57000000000001,245.79000000000002]'
]]></output>
                </test-case>
                <test-case id="0-1988" name="function-sum.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="568194584" result="Passed" start-time="2025-01-14T17:31:20.6321736Z" end-time="2025-01-14T17:31:20.6323327Z" duration="0.000159" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(OrderID &amp; &quot;: &quot; &amp; $sum(Product.(Price*Quantity)))';&#xA; result: [&quot;order103: 90.57&quot;,&quot;order104: 245.79&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(OrderID & ": " & $sum(Product.(Price*Quantity)))'
Result: '["order103: 90.57","order104: 245.79"]'
Expected: '["order103: 90.57","order104: 245.79"]'
]]></output>
                </test-case>
                <test-case id="0-1989" name="function-sum.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="81224603" result="Passed" start-time="2025-01-14T17:31:20.6323433Z" end-time="2025-01-14T17:31:20.6337060Z" duration="0.001363" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$sum()';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$sum()'
]]></output>
                </test-case>
                <test-case id="0-1990" name="function-sum.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="485443949" result="Passed" start-time="2025-01-14T17:31:20.6337253Z" end-time="2025-01-14T17:31:20.6338634Z" duration="0.000138" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sum(1)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$sum(1)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1991" name="function-sum.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="41432115" result="Passed" start-time="2025-01-14T17:31:20.6338815Z" end-time="2025-01-14T17:31:20.6342092Z" duration="0.000328" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$sum(Account.Order)';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$sum(Account.Order)'
]]></output>
                </test-case>
                <test-case id="0-1992" name="function-sum.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="991177278" result="Passed" start-time="2025-01-14T17:31:20.6342192Z" end-time="2025-01-14T17:31:20.6342933Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sum(undefined)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$sum(undefined)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1993" name="function-tomillis.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="107136679" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6343026Z" end-time="2025-01-14T17:31:20.6346585Z" duration="0.000356" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;1970-01-01T00:00:00.001Z&quot;)';&#xA; result: 1" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '1970-01-01T00:00:00.001Z']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$toMillis("1970-01-01T00:00:00.001Z")'
]]></output>
                </test-case>
                <test-case id="0-1994" name="function-tomillis.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="690137570" result="Passed" start-time="2025-01-14T17:31:20.6346748Z" end-time="2025-01-14T17:31:20.6347977Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;2018-02-01T09:42:13.123+0000&quot;)';&#xA; result: 1517478133123" />
                  </properties>
                  <output><![CDATA[Expr is '$toMillis("2018-02-01T09:42:13.123+0000")'
Result: '1517478133123'
Expected: '1517478133123'
]]></output>
                </test-case>
                <test-case id="0-1995" name="function-tomillis.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="306921836" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6348064Z" end-time="2025-01-14T17:31:20.6351115Z" duration="0.000305" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;2017-10-30&quot;)';&#xA; result: 1509321600000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2017-10-30']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$toMillis("2017-10-30")'
]]></output>
                </test-case>
                <test-case id="0-1996" name="function-tomillis.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="411446434" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6351244Z" end-time="2025-01-14T17:31:20.6354984Z" duration="0.000374" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;2017-10-30T15:28:34Z&quot;)';&#xA; result: 1509377314000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2017-10-30T15:28:34Z']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$toMillis("2017-10-30T15:28:34Z")'
]]></output>
                </test-case>
                <test-case id="0-1997" name="function-tomillis.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1629974378" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6355103Z" end-time="2025-01-14T17:31:20.6358325Z" duration="0.000322" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;2018&quot;)';&#xA; result: 1514764800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$toMillis("2018")'
]]></output>
                </test-case>
                <test-case id="0-1998" name="function-tomillis.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="550305291" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6358435Z" end-time="2025-01-14T17:31:20.6362026Z" duration="0.000359" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(foo)';&#xA; result: undefined" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : T0410: Argument 1 ('timestamp') of function toMillis should be String but incompatible value of type Undefined was specified]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.ConvertFunctionArg(Int32 parameterIndex, JToken argToken, ArgumentInfo argumentInfo, Boolean& returnUndefined) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 308
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.TryBindFunctionArguments(List`1 args, JToken context, EvaluationEnvironment env, Boolean& returnUndefined) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 194
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.BindFunctionArguments(List`1 args, JToken context, EvaluationEnvironment env, Boolean& returnUndefined) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 130
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$toMillis(foo)'
]]></output>
                </test-case>
                <test-case id="0-1999" name="function-tomillis.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="247448842" result="Passed" start-time="2025-01-14T17:31:20.6362140Z" end-time="2025-01-14T17:31:20.6364857Z" duration="0.000272" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;foo&quot;)';&#xA; result: error D3110" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3110.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$toMillis("foo")'
]]></output>
                </test-case>
                <test-case id="0-2000" name="function-tomillis.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="948311783" result="Passed" start-time="2025-01-14T17:31:20.6364963Z" end-time="2025-01-14T17:31:20.6367422Z" duration="0.000246" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;01-02-2018&quot;)';&#xA; result: error D3110" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3110.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$toMillis("01-02-2018")'
]]></output>
                </test-case>
                <test-case id="0-2001" name="function-tomillis.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1608999926" result="Passed" start-time="2025-01-14T17:31:20.6367523Z" end-time="2025-01-14T17:31:20.6370440Z" duration="0.000292" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;2018-02-03 11:15:33&quot;)';&#xA; result: error D3110" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3110.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$toMillis("2018-02-03 11:15:33")'
]]></output>
                </test-case>
                <test-case id="0-2002" name="function-tomillis.parseDateTime[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="992320290" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6370560Z" end-time="2025-01-14T17:31:20.6373174Z" duration="0.000262" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(undefined, 'pic')';&#xA; result: undefined" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : T0410: Argument 1 ('timestamp') of function toMillis should be String but incompatible value of type Undefined was specified]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.ConvertFunctionArg(Int32 parameterIndex, JToken argToken, ArgumentInfo argumentInfo, Boolean& returnUndefined) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 308
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.TryBindFunctionArguments(List`1 args, JToken context, EvaluationEnvironment env, Boolean& returnUndefined) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 194
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.BindFunctionArguments(List`1 args, JToken context, EvaluationEnvironment env, Boolean& returnUndefined) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 130
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should return undefined'
Expr is '$toMillis(undefined, 'pic')'
]]></output>
                </test-case>
                <test-case id="0-2003" name="function-tomillis.parseDateTime[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1323793786" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6373267Z" end-time="2025-01-14T17:31:20.6376164Z" duration="0.000290" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('Hello', 'Hello')';&#xA; result: undefined" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'Hello']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse string literal'
Expr is '$toMillis('Hello', 'Hello')'
]]></output>
                </test-case>
                <test-case id="0-2004" name="function-tomillis.parseDateTime[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1773336331" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6376385Z" end-time="2025-01-14T17:31:20.6381754Z" duration="0.000537" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018', '[Y1]')';&#xA; result: 1514764800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year'
Expr is '$toMillis('2018', '[Y1]')'
]]></output>
                </test-case>
                <test-case id="0-2005" name="function-tomillis.parseDateTime[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2125004315" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6381886Z" end-time="2025-01-14T17:31:20.6386045Z" duration="0.000416" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-03-27', '[Y1]-[M01]-[D01]')';&#xA; result: 1522108800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018-03-27']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('2018-03-27', '[Y1]-[M01]-[D01]')'
]]></output>
                </test-case>
                <test-case id="0-2006" name="function-tomillis.parseDateTime[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1626340087" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6386161Z" end-time="2025-01-14T17:31:20.6389722Z" duration="0.000356" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-03-27T14:03:00.123Z', '[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01].[f001]Z')';&#xA; result: 1522159380123" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018-03-27T14:03:00.123Z']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse ISO 8601 format'
Expr is '$toMillis('2018-03-27T14:03:00.123Z', '[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01].[f001]Z')'
]]></output>
                </test-case>
                <test-case id="0-2007" name="function-tomillis.parseDateTime[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="188531030" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6389846Z" end-time="2025-01-14T17:31:20.6393424Z" duration="0.000358" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('27th 3 1976', '[D1o] [M#1] [Y0001]')';&#xA; result: 196732800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '27th 3 1976']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('27th 3 1976', '[D1o] [M#1] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2008" name="function-tomillis.parseDateTime[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="219494915" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6393545Z" end-time="2025-01-14T17:31:20.6397636Z" duration="0.000409" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('21st 12 1881', '[D1o] [M01] [Y0001]')';&#xA; result: -2777932800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '21st 12 1881']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('21st 12 1881', '[D1o] [M01] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2009" name="function-tomillis.parseDateTime[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="301603398" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6397755Z" end-time="2025-01-14T17:31:20.6401232Z" duration="0.000348" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2nd 12 2012', '[D1o] [M01] [Y0001]')';&#xA; result: 1354406400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2nd 12 2012']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('2nd 12 2012', '[D1o] [M01] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2010" name="function-tomillis.parseDateTime[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1261467283" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6401361Z" end-time="2025-01-14T17:31:20.6406008Z" duration="0.000465" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('MCMLXXXIV', '[YI]')';&#xA; result: 441763200000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'MCMLXXXIV']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year'
Expr is '$toMillis('MCMLXXXIV', '[YI]')'
]]></output>
                </test-case>
                <test-case id="0-2011" name="function-tomillis.parseDateTime[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2078919560" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6406126Z" end-time="2025-01-14T17:31:20.6409725Z" duration="0.000360" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('27 03 MMXVIII', '[D1] [M01] [YI]')';&#xA; result: 1522108800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '27 03 MMXVIII']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('27 03 MMXVIII', '[D1] [M01] [YI]')'
]]></output>
                </test-case>
                <test-case id="0-2012" name="function-tomillis.parseDateTime[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="741452544" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6409835Z" end-time="2025-01-14T17:31:20.6413275Z" duration="0.000344" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('27 iii MMXVIII', '[D1] [Mi] [YI]')';&#xA; result: 1522108800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '27 iii MMXVIII']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('27 iii MMXVIII', '[D1] [Mi] [YI]')'
]]></output>
                </test-case>
                <test-case id="0-2013" name="function-tomillis.parseDateTime[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1566400368" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6413384Z" end-time="2025-01-14T17:31:20.6416330Z" duration="0.000295" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('w C mmxviii', '[Da] [MA] [Yi]')';&#xA; result: 1521763200000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'w C mmxviii']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day/month in letters, year in roman numerals'
Expr is '$toMillis('w C mmxviii', '[Da] [MA] [Yi]')'
]]></output>
                </test-case>
                <test-case id="0-2014" name="function-tomillis.parseDateTime[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1480770174" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6416429Z" end-time="2025-01-14T17:31:20.6419658Z" duration="0.000323" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('ae C mmxviii', '[Da] [MA] [Yi]')';&#xA; result: 1522454400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'ae C mmxviii']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day/month in letters, year in roman numerals'
Expr is '$toMillis('ae C mmxviii', '[Da] [MA] [Yi]')'
]]></output>
                </test-case>
                <test-case id="0-2015" name="function-tomillis.parseDateTime[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="96378061" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6419769Z" end-time="2025-01-14T17:31:20.6422635Z" duration="0.000287" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('27th April 2008', '[D1o] [MNn] [Y0001]')';&#xA; result: 1209254400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '27th April 2008']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('27th April 2008', '[D1o] [MNn] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2016" name="function-tomillis.parseDateTime[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1485474504" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6422743Z" end-time="2025-01-14T17:31:20.6425598Z" duration="0.000286" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('21 August 2017', '[D1] [MNn] [Y0001]')';&#xA; result: 1503273600000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '21 August 2017']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('21 August 2017', '[D1] [MNn] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2017" name="function-tomillis.parseDateTime[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2051593857" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6425714Z" end-time="2025-01-14T17:31:20.6429666Z" duration="0.000395" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2 Feb 2012', '[D1] [MNn,3-3] [Y0001]')';&#xA; result: 1328140800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2 Feb 2012']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('2 Feb 2012', '[D1] [MNn,3-3] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2018" name="function-tomillis.parseDateTime[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1171609792" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6429797Z" end-time="2025-01-14T17:31:20.6432915Z" duration="0.000312" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('one thousand, nine hundred and eighty-four', '[Yw]')';&#xA; result: 441763200000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'one thousand, nine hundred and eighty-four']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year in words'
Expr is '$toMillis('one thousand, nine hundred and eighty-four', '[Yw]')'
]]></output>
                </test-case>
                <test-case id="0-2019" name="function-tomillis.parseDateTime[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="496030788" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6433045Z" end-time="2025-01-14T17:31:20.6437762Z" duration="0.000472" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('nineteen hundred and eighty-four', '[Yw]')';&#xA; result: 441763200000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'nineteen hundred and eighty-four']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year in words'
Expr is '$toMillis('nineteen hundred and eighty-four', '[Yw]')'
]]></output>
                </test-case>
                <test-case id="0-2020" name="function-tomillis.parseDateTime[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1156424909" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6437888Z" end-time="2025-01-14T17:31:20.6441964Z" duration="0.000408" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('twenty-seven April 2008', '[Dw] [MNn] [Y0001]')';&#xA; result: 1209254400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'twenty-seven April 2008']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse date/month in words'
Expr is '$toMillis('twenty-seven April 2008', '[Dw] [MNn] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2021" name="function-tomillis.parseDateTime[20]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[20]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="457697798" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6442074Z" end-time="2025-01-14T17:31:20.6446550Z" duration="0.000448" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('twenty-seventh April 2008', '[Dw] [MNn] [Y0001]')';&#xA; result: 1209254400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'twenty-seventh April 2008']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse date/month in ordinal words'
Expr is '$toMillis('twenty-seventh April 2008', '[Dw] [MNn] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2022" name="function-tomillis.parseDateTime[21]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[21]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1131286046" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6446668Z" end-time="2025-01-14T17:31:20.6450540Z" duration="0.000387" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('twenty-first August two thousand and seventeen', '[Dw] [MNn] [Yw]')';&#xA; result: 1503273600000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'twenty-first August two thousand and seventeen']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse ordinal date/month/year'
Expr is '$toMillis('twenty-first August two thousand and seventeen', '[Dw] [MNn] [Yw]')'
]]></output>
                </test-case>
                <test-case id="0-2023" name="function-tomillis.parseDateTime[22]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[22]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2062421969" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6450649Z" end-time="2025-01-14T17:31:20.6453566Z" duration="0.000292" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('TWENTY-SECOND August two thousand and seventeen', '[DW] [MNn] [Yw]')';&#xA; result: 1503360000000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'TWENTY-SECOND August two thousand and seventeen']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse ordinal date/month/year'
Expr is '$toMillis('TWENTY-SECOND August two thousand and seventeen', '[DW] [MNn] [Yw]')'
]]></output>
                </test-case>
                <test-case id="0-2024" name="function-tomillis.parseDateTime[23]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[23]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1184121812" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6453704Z" end-time="2025-01-14T17:31:20.6456610Z" duration="0.000291" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('Twentieth of August, two thousand and seventeen', '[DW] of [MNn], [Yw]')';&#xA; result: 1503187200000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'Twentieth of August, two thousand and seventeen']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse ordinal date/month/year'
Expr is '$toMillis('Twentieth of August, two thousand and seventeen', '[DW] of [MNn], [Yw]')'
]]></output>
                </test-case>
                <test-case id="0-2025" name="function-tomillis.parseDateTime[24]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[24]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2102120051" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6456706Z" end-time="2025-01-14T17:31:20.6459663Z" duration="0.000296" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('4/4/2018 12:06 am', '[D1]/[M1]/[Y0001] [h]:[m] [P]')';&#xA; result: 1522800360000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '4/4/2018 12:06 am']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'just after midnight'
Expr is '$toMillis('4/4/2018 12:06 am', '[D1]/[M1]/[Y0001] [h]:[m] [P]')'
]]></output>
                </test-case>
                <test-case id="0-2026" name="function-tomillis.parseDateTime[25]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[25]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="818575119" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6459779Z" end-time="2025-01-14T17:31:20.6463554Z" duration="0.000378" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('4/4/2018 06:30 am', '[D1]/[M1]/[Y0001] [h]:[m] [P]')';&#xA; result: 1522823400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '4/4/2018 06:30 am']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'breakfast time'
Expr is '$toMillis('4/4/2018 06:30 am', '[D1]/[M1]/[Y0001] [h]:[m] [P]')'
]]></output>
                </test-case>
                <test-case id="0-2027" name="function-tomillis.parseDateTime[26]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[26]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1165126106" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6463674Z" end-time="2025-01-14T17:31:20.6467085Z" duration="0.000341" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('4/4/2018 12:06 pm', '[D1]/[M1]/[Y0001] [h]:[m] [P]')';&#xA; result: 1522843560000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '4/4/2018 12:06 pm']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'just after midday'
Expr is '$toMillis('4/4/2018 12:06 pm', '[D1]/[M1]/[Y0001] [h]:[m] [P]')'
]]></output>
                </test-case>
                <test-case id="0-2028" name="function-tomillis.parseDateTime[27]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[27]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1332447453" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6467191Z" end-time="2025-01-14T17:31:20.6469676Z" duration="0.000249" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('4/4/2018 11:30 pm', '[D1]/[M1]/[Y0001] [h]:[m] [P]')';&#xA; result: 1522884600000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '4/4/2018 11:30 pm']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'just before midnight'
Expr is '$toMillis('4/4/2018 11:30 pm', '[D1]/[M1]/[Y0001] [h]:[m] [P]')'
]]></output>
                </test-case>
                <test-case id="0-2029" name="function-tomillis.parseDateTime[28]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[28]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2055125302" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6469764Z" end-time="2025-01-14T17:31:20.6474450Z" duration="0.000469" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-094', '[Y0001]-[d001]')';&#xA; result: 1522800000000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018-094']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'ordinal date: day 94 of the year 2018'
Expr is '$toMillis('2018-094', '[Y0001]-[d001]')'
]]></output>
                </test-case>
                <test-case id="0-2030" name="function-tomillis.parseDateTime[29]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[29]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1165986993" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6475008Z" end-time="2025-01-14T17:31:20.6482570Z" duration="0.000756" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('13:45', '[H]:[m]') ~&gt; $fromMillis() ~&gt; $substringBefore('T') = $substringBefore($now(), 'T')';&#xA; result: true" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '13:45']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalComparisonOperator(ComparisonOperatorNode comparisonOperatorNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 647
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 124
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'time only defaults to todays date'
Expr is '$toMillis('13:45', '[H]:[m]') ~> $fromMillis() ~> $substringBefore('T') = $substringBefore($now(), 'T')'
]]></output>
                </test-case>
                <test-case id="0-2031" name="function-tomillis.parseDateTime[30]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[30]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1477020944" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6482707Z" end-time="2025-01-14T17:31:20.6487970Z" duration="0.000527" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('13:45', '[H]:[m]') ~&gt; $fromMillis() ~&gt; $substringAfter('T')';&#xA; result: &quot;13:45:00.000Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '13:45']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'hours/minutes only defaults seconds to zero'
Expr is '$toMillis('13:45', '[H]:[m]') ~> $fromMillis() ~> $substringAfter('T')'
]]></output>
                </test-case>
                <test-case id="0-2032" name="function-tomillis.parseDateTime[31]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[31]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1588641805" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6488136Z" end-time="2025-01-14T17:31:20.6492869Z" duration="0.000473" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('Wednesday, 14th November 2018', '[FNn], [D1o] [MNn] [Y]') ~&gt; $fromMillis()';&#xA; result: &quot;2018-11-14T00:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'Wednesday, 14th November 2018']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'date only defaults time to midnight'
Expr is '$toMillis('Wednesday, 14th November 2018', '[FNn], [D1o] [MNn] [Y]') ~> $fromMillis()'
]]></output>
                </test-case>
                <test-case id="0-2033" name="function-tomillis.parseDateTime[32]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[32]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="254937748" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6493083Z" end-time="2025-01-14T17:31:20.6496891Z" duration="0.000381" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('Mon, Twelfth November 2018', '[FNn,*-3], [DWwo] [MNn] [Y]') ~&gt; $fromMillis()';&#xA; result: &quot;2018-11-12T00:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'Mon, Twelfth November 2018']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'date only defaults time to midnight'
Expr is '$toMillis('Mon, Twelfth November 2018', '[FNn,*-3], [DWwo] [MNn] [Y]') ~> $fromMillis()'
]]></output>
                </test-case>
                <test-case id="0-2034" name="function-tomillis.parseDateTime[33]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[33]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1646148" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6497034Z" end-time="2025-01-14T17:31:20.6500466Z" duration="0.000343" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018--180', '[Y]--[d]') ~&gt; $fromMillis()';&#xA; result: &quot;2018-06-29T00:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018--180']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '180th day of 2018 is 29th June'
Expr is '$toMillis('2018--180', '[Y]--[d]') ~> $fromMillis()'
]]></output>
                </test-case>
                <test-case id="0-2035" name="function-tomillis.parseDateTime[34]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[34]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1880947897" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6500576Z" end-time="2025-01-14T17:31:20.6504313Z" duration="0.000374" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('three hundred and sixty-fifth day of 2018', '[dwo] day of [Y]') ~&gt; $fromMillis()';&#xA; result: &quot;2018-12-31T00:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'three hundred and sixty-fifth day of 2018']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '365th day of 2018 is 31st December'
Expr is '$toMillis('three hundred and sixty-fifth day of 2018', '[dwo] day of [Y]') ~> $fromMillis()'
]]></output>
                </test-case>
                <test-case id="0-2036" name="function-tomillis.parseDateTime[35]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[35]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="960636978" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6504445Z" end-time="2025-01-14T17:31:20.6508200Z" duration="0.000376" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('irrelevent string', '[Y]-[M]-[D]')';&#xA; result: undefined" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'irrelevent string']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'parsing a non-date string returns undefined'
Expr is '$toMillis('irrelevent string', '[Y]-[M]-[D]')'
]]></output>
                </test-case>
                <test-case id="0-2037" name="function-tomillis.parseDateTime[36]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[36]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="730018170" result="Passed" start-time="2025-01-14T17:31:20.6508332Z" end-time="2025-01-14T17:31:20.6511308Z" duration="0.000298" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-05-22', '[Y]-[M]-[q]')';&#xA; result: error D3132" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3132.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'picture string contains an unknown component'
Expr is '$toMillis('2018-05-22', '[Y]-[M]-[q]')'
]]></output>
                </test-case>
                <test-case id="0-2038" name="function-tomillis.parseDateTime[37]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[37]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2082199206" result="Passed" start-time="2025-01-14T17:31:20.6511437Z" end-time="2025-01-14T17:31:20.6514630Z" duration="0.000319" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-05-22', '[YN]-[M]-[D]')';&#xA; result: error D3133" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3133.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'picture string contains a named year'
Expr is '$toMillis('2018-05-22', '[YN]-[M]-[D]')'
]]></output>
                </test-case>
                <test-case id="0-2039" name="function-tomillis.parseDateTime[38]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[38]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1720137386" result="Passed" start-time="2025-01-14T17:31:20.6514763Z" end-time="2025-01-14T17:31:20.6518891Z" duration="0.000413" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-22', '[Y]-[D]')';&#xA; result: error D3136" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3136.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'year/date with no month'
Expr is '$toMillis('2018-22', '[Y]-[D]')'
]]></output>
                </test-case>
                <test-case id="0-2040" name="function-tomillis.parseDateTime[39]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[39]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1629537655" result="Passed" start-time="2025-01-14T17:31:20.6519013Z" end-time="2025-01-14T17:31:20.6523654Z" duration="0.000464" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('5-22 23:59', '[M]-[D] [m]:[s]')';&#xA; result: error D3136" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3136.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'month/date, min/sec with no hours'
Expr is '$toMillis('5-22 23:59', '[M]-[D] [m]:[s]')'
]]></output>
                </test-case>
                <test-case id="0-2041" name="function-tomillis.parseDateTime[40]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[40]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1440374116" result="Passed" start-time="2025-01-14T17:31:20.6523881Z" end-time="2025-01-14T17:31:20.6528210Z" duration="0.000433" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-3-2-5', '[X]-[x]-[w]-[F1]')';&#xA; result: error D3136" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3136.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'currently no support for year/month-of-year/week-of-month/day-of-week'
Expr is '$toMillis('2018-3-2-5', '[X]-[x]-[w]-[F1]')'
]]></output>
                </test-case>
                <test-case id="0-2042" name="function-tomillis.parseDateTime[41]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[41]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1157961503" result="Passed" start-time="2025-01-14T17:31:20.6528357Z" end-time="2025-01-14T17:31:20.6550315Z" duration="0.002196" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-32-5', '[X]-[W]-[F1]')';&#xA; result: error D3136" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3136.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'currently no support for year/week-of-year/day-of-week'
Expr is '$toMillis('2018-32-5', '[X]-[W]-[F1]')'
]]></output>
                </test-case>
                <test-case id="0-2043" name="function-tomillis.parseDateTime[42]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[42]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="266591186" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6550521Z" end-time="2025-01-14T17:31:20.6555284Z" duration="0.000476" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2020-09-09 08:00:00 +02:00', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z]') ~&gt; $fromMillis() ';&#xA; result: &quot;2020-09-09T06:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2020-09-09 08:00:00 +02:00']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse a date containing timezones'
Expr is '$toMillis('2020-09-09 08:00:00 +02:00', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z]') ~> $fromMillis() '
]]></output>
                </test-case>
                <test-case id="0-2044" name="function-tomillis.parseDateTime[43]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[43]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="967240967" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6555399Z" end-time="2025-01-14T17:31:20.6559151Z" duration="0.000375" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2020-09-09 08:00:00 GMT-05:00', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z]') ~&gt; $fromMillis() ';&#xA; result: &quot;2020-09-09T13:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2020-09-09 08:00:00 GMT-05:00']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse a date containing timezones'
Expr is '$toMillis('2020-09-09 08:00:00 GMT-05:00', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z]') ~> $fromMillis() '
]]></output>
                </test-case>
                <test-case id="0-2045" name="function-tomillis.parseDateTime[44]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[44]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="554008036" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6559280Z" end-time="2025-01-14T17:31:20.6562388Z" duration="0.000311" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2020-09-09 12:00:00 +05:30', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z]') ~&gt; $fromMillis() ';&#xA; result: &quot;2020-09-09T06:30:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2020-09-09 12:00:00 +05:30']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse a date containing timezones'
Expr is '$toMillis('2020-09-09 12:00:00 +05:30', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z]') ~> $fromMillis() '
]]></output>
                </test-case>
                <test-case id="0-2046" name="function-tomillis.parseDateTime[45]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[45]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1447463218" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6562492Z" end-time="2025-01-14T17:31:20.6565158Z" duration="0.000267" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2020-09-09 12:00:00 GMT-5', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z01]') ~&gt; $fromMillis() ';&#xA; result: &quot;2020-09-09T17:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2020-09-09 12:00:00 GMT-5']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse a date containing timezones'
Expr is '$toMillis('2020-09-09 12:00:00 GMT-5', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z01]') ~> $fromMillis() '
]]></output>
                </test-case>
                <test-case id="0-2047" name="function-tomillis.parseDateTime[46]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[46]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1572260557" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6565248Z" end-time="2025-01-14T17:31:20.6567839Z" duration="0.000259" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2020-09-09 12:00:00 +0530', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z0001]') ~&gt; $fromMillis() ';&#xA; result: &quot;2020-09-09T06:30:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2020-09-09 12:00:00 +0530']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 1842
   at InvokeStub_BuiltinFunctions.toMillis(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 320
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 120
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse a date containing timezones'
Expr is '$toMillis('2020-09-09 12:00:00 +0530', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z0001]') ~> $fromMillis() '
]]></output>
                </test-case>
                <test-case id="0-2048" name="function-trim.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-trim.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="773850152" result="Passed" start-time="2025-01-14T17:31:20.6567927Z" end-time="2025-01-14T17:31:20.6570316Z" duration="0.000239" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$trim(&quot;Hello World&quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$trim("Hello World")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-2049" name="function-trim.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-trim.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="593759509" result="Passed" start-time="2025-01-14T17:31:20.6570419Z" end-time="2025-01-14T17:31:20.6571299Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$trim(&quot;   Hello  &#xA;  &#x9; World  &#x9; &quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$trim("   Hello  
  	 World  	 ")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-2050" name="function-trim.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-trim.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="968930979" result="Passed" start-time="2025-01-14T17:31:20.6571384Z" end-time="2025-01-14T17:31:20.6572564Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$trim()';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$trim()'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2051" name="function-typeOf.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="507336224" result="Passed" start-time="2025-01-14T17:31:20.6572676Z" end-time="2025-01-14T17:31:20.6574145Z" duration="0.000147" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= undefined; $type($var))';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= undefined; $type($var))'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2052" name="function-typeOf.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="458364586" result="Passed" start-time="2025-01-14T17:31:20.6574248Z" end-time="2025-01-14T17:31:20.6575552Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= null; $type($var))';&#xA; result: &quot;null&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= null; $type($var))'
Result: '"null"'
Expected: '"null"'
]]></output>
                </test-case>
                <test-case id="0-2053" name="function-typeOf.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="54274503" result="Passed" start-time="2025-01-14T17:31:20.6575655Z" end-time="2025-01-14T17:31:20.6576917Z" duration="0.000126" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= 123; $type($var))';&#xA; result: &quot;number&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= 123; $type($var))'
Result: '"number"'
Expected: '"number"'
]]></output>
                </test-case>
                <test-case id="0-2054" name="function-typeOf.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1238507580" result="Passed" start-time="2025-01-14T17:31:20.6577017Z" end-time="2025-01-14T17:31:20.6578196Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= '123'; $type($var))';&#xA; result: &quot;string&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= '123'; $type($var))'
Result: '"string"'
Expected: '"string"'
]]></output>
                </test-case>
                <test-case id="0-2055" name="function-typeOf.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="490613985" result="Passed" start-time="2025-01-14T17:31:20.6578291Z" end-time="2025-01-14T17:31:20.6579444Z" duration="0.000115" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= true; $type($var))';&#xA; result: &quot;boolean&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= true; $type($var))'
Result: '"boolean"'
Expected: '"boolean"'
]]></output>
                </test-case>
                <test-case id="0-2056" name="function-typeOf.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="477713880" result="Passed" start-time="2025-01-14T17:31:20.6579548Z" end-time="2025-01-14T17:31:20.6580597Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= 'true'; $type($var))';&#xA; result: &quot;string&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= 'true'; $type($var))'
Result: '"string"'
Expected: '"string"'
]]></output>
                </test-case>
                <test-case id="0-2057" name="function-typeOf.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1077381968" result="Passed" start-time="2025-01-14T17:31:20.6580706Z" end-time="2025-01-14T17:31:20.6581617Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= []; $type($var))';&#xA; result: &quot;array&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= []; $type($var))'
Result: '"array"'
Expected: '"array"'
]]></output>
                </test-case>
                <test-case id="0-2058" name="function-typeOf.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="139671974" result="Passed" start-time="2025-01-14T17:31:20.6581687Z" end-time="2025-01-14T17:31:20.6582623Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= ['a']; $type($var))';&#xA; result: &quot;array&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= ['a']; $type($var))'
Result: '"array"'
Expected: '"array"'
]]></output>
                </test-case>
                <test-case id="0-2059" name="function-typeOf.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1818699927" result="Passed" start-time="2025-01-14T17:31:20.6582723Z" end-time="2025-01-14T17:31:20.6583635Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= ['a','b']; $type($var))';&#xA; result: &quot;array&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= ['a','b']; $type($var))'
Result: '"array"'
Expected: '"array"'
]]></output>
                </test-case>
                <test-case id="0-2060" name="function-typeOf.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1306429196" result="Passed" start-time="2025-01-14T17:31:20.6583708Z" end-time="2025-01-14T17:31:20.6584584Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= function(){true}; $type($var))';&#xA; result: &quot;function&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= function(){true}; $type($var))'
Result: '"function"'
Expected: '"function"'
]]></output>
                </test-case>
                <test-case id="0-2061" name="function-typeOf.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="461213981" result="Passed" start-time="2025-01-14T17:31:20.6584652Z" end-time="2025-01-14T17:31:20.6585641Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= (λ($v, $i, $a) {$v.price = $max($a.price)}); $type($var))';&#xA; result: &quot;function&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= (λ($v, $i, $a) {$v.price = $max($a.price)}); $type($var))'
Result: '"function"'
Expected: '"function"'
]]></output>
                </test-case>
                <test-case id="0-2062" name="function-typeOf.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1003567224" result="Passed" start-time="2025-01-14T17:31:20.6585708Z" end-time="2025-01-14T17:31:20.6586550Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= {}; $type($var))';&#xA; result: &quot;object&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= {}; $type($var))'
Result: '"object"'
Expected: '"object"'
]]></output>
                </test-case>
                <test-case id="0-2063" name="function-typeOf.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="311853260" result="Passed" start-time="2025-01-14T17:31:20.6586614Z" end-time="2025-01-14T17:31:20.6588024Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= {&quot;foo&quot;:&quot;bar&quot;}; $type($var))';&#xA; result: &quot;object&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= {"foo":"bar"}; $type($var))'
Result: '"object"'
Expected: '"object"'
]]></output>
                </test-case>
                <test-case id="0-2064" name="function-uppercase.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-uppercase.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1283100052" result="Passed" start-time="2025-01-14T17:31:20.6588198Z" end-time="2025-01-14T17:31:20.6589578Z" duration="0.000138" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(&quot;Hello World&quot;)';&#xA; result: &quot;HELLO WORLD&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase("Hello World")'
Result: '"HELLO WORLD"'
Expected: '"HELLO WORLD"'
]]></output>
                </test-case>
                <test-case id="0-2065" name="function-uppercase.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-uppercase.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1931929986" result="Passed" start-time="2025-01-14T17:31:20.6589702Z" end-time="2025-01-14T17:31:20.6590648Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2066" name="function-zip.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="490277755" result="Passed" start-time="2025-01-14T17:31:20.6590728Z" end-time="2025-01-14T17:31:20.6594303Z" duration="0.000358" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip([1,2,3],[4,5,6])';&#xA; result: [[1,4],[2,5],[3,6]]" />
                  </properties>
                  <output><![CDATA[Expr is '$zip([1,2,3],[4,5,6])'
Result: '[[1,4],[2,5],[3,6]]'
Expected: '[[1,4],[2,5],[3,6]]'
]]></output>
                </test-case>
                <test-case id="0-2067" name="function-zip.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="486514796" result="Passed" start-time="2025-01-14T17:31:20.6594413Z" end-time="2025-01-14T17:31:20.6595654Z" duration="0.000124" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip([1,2,3],[4,5,6],[7,8,9])';&#xA; result: [[1,4,7],[2,5,8],[3,6,9]]" />
                  </properties>
                  <output><![CDATA[Expr is '$zip([1,2,3],[4,5,6],[7,8,9])'
Result: '[[1,4,7],[2,5,8],[3,6,9]]'
Expected: '[[1,4,7],[2,5,8],[3,6,9]]'
]]></output>
                </test-case>
                <test-case id="0-2068" name="function-zip.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1564754220" result="Passed" start-time="2025-01-14T17:31:20.6595783Z" end-time="2025-01-14T17:31:20.6596805Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip([1,2,3],[4,5],[7,8,9])';&#xA; result: [[1,4,7],[2,5,8]]" />
                  </properties>
                  <output><![CDATA[Expr is '$zip([1,2,3],[4,5],[7,8,9])'
Result: '[[1,4,7],[2,5,8]]'
Expected: '[[1,4,7],[2,5,8]]'
]]></output>
                </test-case>
                <test-case id="0-2069" name="function-zip.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1747305924" result="Passed" start-time="2025-01-14T17:31:20.6596889Z" end-time="2025-01-14T17:31:20.6597754Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip([1,2,3])';&#xA; result: [[1],[2],[3]]" />
                  </properties>
                  <output><![CDATA[Expr is '$zip([1,2,3])'
Result: '[[1],[2],[3]]'
Expected: '[[1],[2],[3]]'
]]></output>
                </test-case>
                <test-case id="0-2070" name="function-zip.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1283224730" result="Passed" start-time="2025-01-14T17:31:20.6597833Z" end-time="2025-01-14T17:31:20.6598735Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip(1,2,3)';&#xA; result: [[1,2,3]]" />
                  </properties>
                  <output><![CDATA[Expr is '$zip(1,2,3)'
Result: '[[1,2,3]]'
Expected: '[[1,2,3]]'
]]></output>
                </test-case>
                <test-case id="0-2071" name="function-zip.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="755456334" result="Passed" start-time="2025-01-14T17:31:20.6598841Z" end-time="2025-01-14T17:31:20.6599617Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip([1,2,3], [4,5,6], nothing)';&#xA; result: []" />
                  </properties>
                  <output><![CDATA[Expr is '$zip([1,2,3], [4,5,6], nothing)'
Result: '[]'
Expected: '[]'
]]></output>
                </test-case>
                <test-case id="0-2072" name="higher-order-functions.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2116878298" result="Passed" start-time="2025-01-14T17:31:20.6599707Z" end-time="2025-01-14T17:31:20.6600709Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($twice:=function($f){function($x){$f($f($x))}}; $add3:=function($y){$y+3}; $add6:=$twice($add3); $add6(7))';&#xA; result: 13" />
                  </properties>
                  <output><![CDATA[Expr is '($twice:=function($f){function($x){$f($f($x))}}; $add3:=function($y){$y+3}; $add6:=$twice($add3); $add6(7))'
Result: '13'
Expected: '13'
]]></output>
                </test-case>
                <test-case id="0-2073" name="higher-order-functions.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1598956053" result="Passed" start-time="2025-01-14T17:31:20.6600778Z" end-time="2025-01-14T17:31:20.6602133Z" duration="0.000136" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($f) { λ($x) { $x($x) }( λ($g) { $f( (λ($a) {$g($g)($a)}))})}(λ($f) { λ($n) { $n &lt; 2 ? 1 : $n * $f($n - 1) } })(6)';&#xA; result: 720" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($f) { λ($x) { $x($x) }( λ($g) { $f( (λ($a) {$g($g)($a)}))})}(λ($f) { λ($n) { $n < 2 ? 1 : $n * $f($n - 1) } })(6)'
Result: '720'
Expected: '720'
]]></output>
                </test-case>
                <test-case id="0-2074" name="higher-order-functions.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1013976780" result="Passed" start-time="2025-01-14T17:31:20.6602216Z" end-time="2025-01-14T17:31:20.6604917Z" duration="0.000270" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($f) { λ($x) { $x($x) }( λ($g) { $f( (λ($a) {$g($g)($a)}))})}(λ($f) { λ($n) { $n &lt;= 1 ? $n : $f($n-1) + $f($n-2) } })(6) ';&#xA; result: 8" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($f) { λ($x) { $x($x) }( λ($g) { $f( (λ($a) {$g($g)($a)}))})}(λ($f) { λ($n) { $n <= 1 ? $n : $f($n-1) + $f($n-2) } })(6) '
Result: '8'
Expected: '8'
]]></output>
                </test-case>
                <test-case id="0-2075" name="hof-filter.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-filter.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1863534440" result="Passed" start-time="2025-01-14T17:31:20.6605016Z" end-time="2025-01-14T17:31:20.6608474Z" duration="0.000346" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(library.books~&gt;$filter(λ($v, $i, $a) {$v.price = $max($a.price)})).isbn';&#xA; result: &quot;9780262510875&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(library.books~>$filter(λ($v, $i, $a) {$v.price = $max($a.price)})).isbn'
Result: '"9780262510875"'
Expected: '"9780262510875"'
]]></output>
                </test-case>
                <test-case id="0-2076" name="hof-filter.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-filter.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1447219942" result="Passed" start-time="2025-01-14T17:31:20.6608571Z" end-time="2025-01-14T17:31:20.6609676Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nothing~&gt;$filter(λ($v, $i, $a) {$v.price = $max($a.price)})';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'nothing~>$filter(λ($v, $i, $a) {$v.price = $max($a.price)})'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2077" name="hof-filter.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-filter.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="864694860" result="Passed" start-time="2025-01-14T17:31:20.6609746Z" end-time="2025-01-14T17:31:20.6610439Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$filter(data, function($d) { true })';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$filter(data, function($d) { true })'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2078" name="hof-filter.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-filter.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1095181002" result="Passed" start-time="2025-01-14T17:31:20.6610506Z" end-time="2025-01-14T17:31:20.6611235Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$filter([0, 1, 2], $boolean)';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$filter([0, 1, 2], $boolean)'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-2079" name="hof-map.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="630113776" result="Passed" start-time="2025-01-14T17:31:20.6611303Z" end-time="2025-01-14T17:31:20.6612482Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: [1,2,3,4,5],    &quot;two&quot;: [5,4,3,2,1]  };  $add := function($x){$x*$x};  $map($data.one, $add) )  ';&#xA; result: [1,4,9,16,25]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $data := {    "one": [1,2,3,4,5],    "two": [5,4,3,2,1]  };  $add := function($x){$x*$x};  $map($data.one, $add) )  '
Result: '[1,4,9,16,25]'
Expected: '[1,4,9,16,25]'
]]></output>
                </test-case>
                <test-case id="0-2080" name="hof-map.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="654656833" result="Passed" start-time="2025-01-14T17:31:20.6612567Z" end-time="2025-01-14T17:31:20.6616045Z" duration="0.000348" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: [1,2,3,4,5],    &quot;two&quot;: [5,4,3,2,1]  };  $add := function($x){$x*$x};  $map($add) )  ';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '(  $data := {    "one": [1,2,3,4,5],    "two": [5,4,3,2,1]  };  $add := function($x){$x*$x};  $map($add) )  '
]]></output>
                </test-case>
                <test-case id="0-2081" name="hof-map.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1393798209" result="Passed" start-time="2025-01-14T17:31:20.6616170Z" end-time="2025-01-14T17:31:20.6617180Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map([1,2,3], $string)';&#xA; result: [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$map([1,2,3], $string)'
Result: '["1","2","3"]'
Expected: '["1","2","3"]'
]]></output>
                </test-case>
                <test-case id="0-2082" name="hof-map.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="391275954" result="Passed" start-time="2025-01-14T17:31:20.6617258Z" end-time="2025-01-14T17:31:20.6619085Z" duration="0.000183" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product ~&gt; $map(λ($prod, $index) { $index+1 &amp; &quot;: &quot; &amp; $prod.&quot;Product Name&quot; })';&#xA; result: [&quot;1: Bowler Hat&quot;,&quot;2: Trilby hat&quot;,&quot;3: Bowler Hat&quot;,&quot;4: Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product ~> $map(λ($prod, $index) { $index+1 & ": " & $prod."Product Name" })'
Result: '["1: Bowler Hat","2: Trilby hat","3: Bowler Hat","4: Cloak"]'
Expected: '["1: Bowler Hat","2: Trilby hat","3: Bowler Hat","4: Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-2083" name="hof-map.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="738687944" result="Passed" start-time="2025-01-14T17:31:20.6619330Z" end-time="2025-01-14T17:31:20.6621565Z" duration="0.000224" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product ~&gt; $map(λ($prod, $index, $arr) { $index+1 &amp; &quot;/&quot; &amp; $count($arr) &amp; &quot;: &quot; &amp; $prod.&quot;Product Name&quot; })';&#xA; result: [&quot;1/4: Bowler Hat&quot;,&quot;2/4: Trilby hat&quot;,&quot;3/4: Bowler Hat&quot;,&quot;4/4: Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product ~> $map(λ($prod, $index, $arr) { $index+1 & "/" & $count($arr) & ": " & $prod."Product Name" })'
Result: '["1/4: Bowler Hat","2/4: Trilby hat","3/4: Bowler Hat","4/4: Cloak"]'
Expected: '["1/4: Bowler Hat","2/4: Trilby hat","3/4: Bowler Hat","4/4: Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-2084" name="hof-map.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1086194323" result="Passed" start-time="2025-01-14T17:31:20.6621685Z" end-time="2025-01-14T17:31:20.6623621Z" duration="0.000194" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map(Phone, function($v, $i) {$i[$v.type=&quot;office&quot;]})';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$map(Phone, function($v, $i) {$i[$v.type="office"]})'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-2085" name="hof-map.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="658650769" result="Passed" start-time="2025-01-14T17:31:20.6623734Z" end-time="2025-01-14T17:31:20.6625595Z" duration="0.000186" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map(Phone, function($v, $i) {$v.type=&quot;office&quot; ? $i})';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$map(Phone, function($v, $i) {$v.type="office" ? $i})'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-2086" name="hof-map.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1018656358" result="Passed" start-time="2025-01-14T17:31:20.6625718Z" end-time="2025-01-14T17:31:20.6627687Z" duration="0.000197" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map(Phone, function($v, $i) {$v.type=&quot;office&quot; ? $i: null})';&#xA; result: [null,1,2,null]" />
                  </properties>
                  <output><![CDATA[Expr is '$map(Phone, function($v, $i) {$v.type="office" ? $i: null})'
Result: '[null,1,2,null]'
Expected: '[null,1,2,null]'
]]></output>
                </test-case>
                <test-case id="0-2087" name="hof-map.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1534367302" result="Passed" start-time="2025-01-14T17:31:20.6627824Z" end-time="2025-01-14T17:31:20.6629116Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map(Phone, function($v, $i) {$v.type=&quot;office&quot; ? $i: null})';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$map(Phone, function($v, $i) {$v.type="office" ? $i: null})'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2088" name="hof-map.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1163913815" result="Passed" start-time="2025-01-14T17:31:20.6629227Z" end-time="2025-01-14T17:31:20.6630446Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map([0, 1, 2], $boolean)';&#xA; result: [false,true,true]" />
                  </properties>
                  <output><![CDATA[Expr is '$map([0, 1, 2], $boolean)'
Result: '[false,true,true]'
Expected: '[false,true,true]'
]]></output>
                </test-case>
                <test-case id="0-2089" name="hof-reduce.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1658515810" result="Passed" start-time="2025-01-14T17:31:20.6630559Z" end-time="2025-01-14T17:31:20.6632261Z" duration="0.000170" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $seq := [1,2,3,4,5];  $reduce($seq, function($x, $y){$x+$y})) ';&#xA; result: 15" />
                  </properties>
                  <output><![CDATA[Expr is '(  $seq := [1,2,3,4,5];  $reduce($seq, function($x, $y){$x+$y})) '
Result: '15'
Expected: '15'
]]></output>
                </test-case>
                <test-case id="0-2090" name="hof-reduce.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1403234017" result="Passed" start-time="2025-01-14T17:31:20.6632369Z" end-time="2025-01-14T17:31:20.6634526Z" duration="0.000216" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $concat := function($s){function($a, $b){$string($a) &amp; $s &amp; $string($b)}};  $comma_join := $concat(' ... ');  $reduce([1,2,3,4,5], $comma_join))      ';&#xA; result: &quot;1 ... 2 ... 3 ... 4 ... 5&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(  $concat := function($s){function($a, $b){$string($a) & $s & $string($b)}};  $comma_join := $concat(' ... ');  $reduce([1,2,3,4,5], $comma_join))      '
Result: '"1 ... 2 ... 3 ... 4 ... 5"'
Expected: '"1 ... 2 ... 3 ... 4 ... 5"'
]]></output>
                </test-case>
                <test-case id="0-2091" name="hof-reduce.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2030738657" result="Passed" start-time="2025-01-14T17:31:20.6634650Z" end-time="2025-01-14T17:31:20.6635839Z" duration="0.000119" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $seq := [1,2,3,4,5];  $reduce($seq, function($x, $y){$x+$y}, 2))';&#xA; result: 17" />
                  </properties>
                  <output><![CDATA[Expr is '(  $seq := [1,2,3,4,5];  $reduce($seq, function($x, $y){$x+$y}, 2))'
Result: '17'
Expected: '17'
]]></output>
                </test-case>
                <test-case id="0-2092" name="hof-reduce.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="590346196" result="Passed" start-time="2025-01-14T17:31:20.6635931Z" end-time="2025-01-14T17:31:20.6636746Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $seq := 1;  $reduce($seq, function($x, $y){$x+$y}))';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '(  $seq := 1;  $reduce($seq, function($x, $y){$x+$y}))'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-2093" name="hof-reduce.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="263499279" result="Passed" start-time="2025-01-14T17:31:20.6636821Z" end-time="2025-01-14T17:31:20.6637695Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $seq := 1;  $reduce($seq, function($x, $y){$x+$y}))';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '(  $seq := 1;  $reduce($seq, function($x, $y){$x+$y}))'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-2094" name="hof-reduce.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="413708190" result="Passed" start-time="2025-01-14T17:31:20.6637792Z" end-time="2025-01-14T17:31:20.6639502Z" duration="0.000171" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$reduce(Account.Order.Product.Quantity, $append)';&#xA; result: [2,1,4,1]" />
                  </properties>
                  <output><![CDATA[Expr is '$reduce(Account.Order.Product.Quantity, $append)'
Result: '[2,1,4,1]'
Expected: '[2,1,4,1]'
]]></output>
                </test-case>
                <test-case id="0-2095" name="hof-reduce.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1168323674" result="Passed" start-time="2025-01-14T17:31:20.6639611Z" end-time="2025-01-14T17:31:20.6640902Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$reduce(Account.Order.Product.Quantity, $append)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$reduce(Account.Order.Product.Quantity, $append)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2096" name="hof-reduce.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="436806892" result="Passed" start-time="2025-01-14T17:31:20.6641007Z" end-time="2025-01-14T17:31:20.6643639Z" duration="0.000263" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($product := function($a, $b) { $a * $b };$power := function($x, $n) { $n = 0 ? 1 : $reduce([1..$n].($x), $product) };[0..5].$power(2, $))';&#xA; result: [1,2,4,8,16,32]" />
                  </properties>
                  <output><![CDATA[Expr is '($product := function($a, $b) { $a * $b };$power := function($x, $n) { $n = 0 ? 1 : $reduce([1..$n].($x), $product) };[0..5].$power(2, $))'
Result: '[1,2,4,8,16,32]'
Expected: '[1,2,4,8,16,32]'
]]></output>
                </test-case>
                <test-case id="0-2097" name="hof-reduce.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="846108243" result="Passed" start-time="2025-01-14T17:31:20.6643744Z" end-time="2025-01-14T17:31:20.6647681Z" duration="0.000394" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(  $seq := 1;  $reduce($seq, function($x){$x}))';&#xA; result: error D3050" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3050.
Actually thrown D3050.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '(  $seq := 1;  $reduce($seq, function($x){$x}))'
]]></output>
                </test-case>
                <test-case id="0-2098" name="hof-reduce.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1130974781" result="Passed" start-time="2025-01-14T17:31:20.6647787Z" end-time="2025-01-14T17:31:20.6650028Z" duration="0.000224" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(&#xD;&#xA; $months := [&#xD;&#xA;        &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;,&#xD;&#xA;        &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;&#xD;&#xA; ];&#xD;&#xA; $indexof := λ($array, $value) {&#xD;&#xA;  $reduce($array, λ($acc, $v, $i) {&#xD;&#xA;   $v=$value ? $i : $acc&#xD;&#xA;  })&#xD;&#xA; };&#xD;&#xA; $indexof($months, 'May')&#xD;&#xA;)&#xD;&#xA;';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '(
 $months := [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
 ];
 $indexof := λ($array, $value) {
  $reduce($array, λ($acc, $v, $i) {
   $v=$value ? $i : $acc
  })
 };
 $indexof($months, 'May')
)
'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-2099" name="hof-reduce.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1182794628" result="Passed" start-time="2025-01-14T17:31:20.6650135Z" end-time="2025-01-14T17:31:20.6651922Z" duration="0.000179" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(&#xD;&#xA;  $mean := $reduce(?, λ($acc, $v, $i, $arr) {(&#xD;&#xA;    $total := $acc + $v;&#xD;&#xA;    $length := $count($arr);&#xD;&#xA;    $i = $length - 1 ? $total / $length : $total&#xD;&#xA;  )});&#xD;&#xA;&#xD;&#xA;  $mean([7,3,8])&#xD;&#xA;)&#xD;&#xA;';&#xA; result: 6" />
                  </properties>
                  <output><![CDATA[Expr is '(
  $mean := $reduce(?, λ($acc, $v, $i, $arr) {(
    $total := $acc + $v;
    $length := $count($arr);
    $i = $length - 1 ? $total / $length : $total
  )});

  $mean([7,3,8])
)
'
Result: '6'
Expected: '6'
]]></output>
                </test-case>
                <test-case id="0-2100" name="hof-single.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="63730281" result="Passed" start-time="2025-01-14T17:31:20.6652030Z" end-time="2025-01-14T17:31:20.6661532Z" duration="0.000950" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(library.books~&gt;$single(λ($v, $i, $a) {$v.price = $max($a.price)})).isbn';&#xA; result: &quot;9780262510875&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(library.books~>$single(λ($v, $i, $a) {$v.price = $max($a.price)})).isbn'
Result: '"9780262510875"'
Expected: '"9780262510875"'
]]></output>
                </test-case>
                <test-case id="0-2101" name="hof-single.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="960948422" result="Passed" start-time="2025-01-14T17:31:20.6661701Z" end-time="2025-01-14T17:31:20.6663761Z" duration="0.000206" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nothing~&gt;$single(λ($v, $i, $a) {$v.price = $max($a.price)})';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'nothing~>$single(λ($v, $i, $a) {$v.price = $max($a.price)})'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2102" name="hof-single.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="7506337" result="Passed" start-time="2025-01-14T17:31:20.6663877Z" end-time="2025-01-14T17:31:20.6667479Z" duration="0.000360" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$single(data, function($d) { true })';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$single(data, function($d) { true })'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2103" name="hof-single.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1174027875" result="Passed" start-time="2025-01-14T17:31:20.6667601Z" end-time="2025-01-14T17:31:20.6672214Z" duration="0.000461" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$single([0, 1, 2], $boolean)';&#xA; result: error D3138" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3138.
Actually thrown D3138.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$single([0, 1, 2], $boolean)'
]]></output>
                </test-case>
                <test-case id="0-2104" name="hof-single.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1458018426" result="Passed" start-time="2025-01-14T17:31:20.6672340Z" end-time="2025-01-14T17:31:20.6676294Z" duration="0.000396" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$single([0, 1, 2], function($v) {$v = 3})';&#xA; result: error D3139" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3139.
Actually thrown D3139.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$single([0, 1, 2], function($v) {$v = 3})'
]]></output>
                </test-case>
                <test-case id="0-2105" name="hof-single.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="213474645" result="Passed" start-time="2025-01-14T17:31:20.6676433Z" end-time="2025-01-14T17:31:20.6679396Z" duration="0.000297" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$single([0, 1, 2])';&#xA; result: error D3138" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3138.
Actually thrown D3138.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$single([0, 1, 2])'
]]></output>
                </test-case>
                <test-case id="0-2106" name="hof-single.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="537941573" result="Passed" start-time="2025-01-14T17:31:20.6679501Z" end-time="2025-01-14T17:31:20.6680356Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$single([0])';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$single([0])'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-2107" name="hof-single.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1006892180" result="Passed" start-time="2025-01-14T17:31:20.6680434Z" end-time="2025-01-14T17:31:20.6682633Z" duration="0.000220" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$single([])';&#xA; result: error D3139" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3139.
Actually thrown D3139.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$single([])'
]]></output>
                </test-case>
                <test-case id="0-2108" name="hof-single.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1187781370" result="Passed" start-time="2025-01-14T17:31:20.6682752Z" end-time="2025-01-14T17:31:20.6683984Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$single([true, false, true], function($v) {$v=false})';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$single([true, false, true], function($v) {$v=false})'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2109" name="hof-single.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1522456787" result="Passed" start-time="2025-01-14T17:31:20.6684078Z" end-time="2025-01-14T17:31:20.6685254Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$single(['zero', 'one', 'two'], function($v, $i, $k) {$i=1})';&#xA; result: &quot;one&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$single(['zero', 'one', 'two'], function($v, $i, $k) {$i=1})'
Result: '"one"'
Expected: '"one"'
]]></output>
                </test-case>
                <test-case id="0-2110" name="hof-single.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1190877690" result="Passed" start-time="2025-01-14T17:31:20.6685342Z" end-time="2025-01-14T17:31:20.6686909Z" duration="0.000157" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone ~&gt; $filter(function($p) {$p.type = 'home'}) ~&gt; $single(function($p) {$p.number = '0203 544 1234'})';&#xA; result: {&quot;type&quot;:&quot;home&quot;,&quot;number&quot;:&quot;0203 544 1234&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone ~> $filter(function($p) {$p.type = 'home'}) ~> $single(function($p) {$p.number = '0203 544 1234'})'
Result: '{"type":"home","number":"0203 544 1234"}'
Expected: '{"type":"home","number":"0203 544 1234"}'
]]></output>
                </test-case>
                <test-case id="0-2111" name="hof-zip-map.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1760502667" result="Passed" start-time="2025-01-14T17:31:20.6687024Z" end-time="2025-01-14T17:31:20.6688586Z" duration="0.000156" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: [1,2,3,4,5],    &quot;two&quot;: [5,4,3,2,1]  };  $map($zip($data.one, $data.two), $sum)) ';&#xA; result: [6,6,6,6,6]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $data := {    "one": [1,2,3,4,5],    "two": [5,4,3,2,1]  };  $map($zip($data.one, $data.two), $sum)) '
Result: '[6,6,6,6,6]'
Expected: '[6,6,6,6,6]'
]]></output>
                </test-case>
                <test-case id="0-2112" name="hof-zip-map.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2129684613" result="Passed" start-time="2025-01-14T17:31:20.6688700Z" end-time="2025-01-14T17:31:20.6690702Z" duration="0.000201" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: [1,2,3,4,5],    &quot;two&quot;: [5,4,3,2,1]  };  $data.$zip(one, two) ~&gt; $map($sum)) ';&#xA; result: [6,6,6,6,6]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $data := {    "one": [1,2,3,4,5],    "two": [5,4,3,2,1]  };  $data.$zip(one, two) ~> $map($sum)) '
Result: '[6,6,6,6,6]'
Expected: '[6,6,6,6,6]'
]]></output>
                </test-case>
                <test-case id="0-2113" name="hof-zip-map.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1657041845" result="Passed" start-time="2025-01-14T17:31:20.6690838Z" end-time="2025-01-14T17:31:20.6692367Z" duration="0.000153" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: [1],    &quot;two&quot;: [5]  };  $data.$zip(one, two) ~&gt; $map($sum)) ';&#xA; result: 6" />
                  </properties>
                  <output><![CDATA[Expr is '(  $data := {    "one": [1],    "two": [5]  };  $data.$zip(one, two) ~> $map($sum)) '
Result: '6'
Expected: '6'
]]></output>
                </test-case>
                <test-case id="0-2114" name="hof-zip-map.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1164043094" result="Passed" start-time="2025-01-14T17:31:20.6692482Z" end-time="2025-01-14T17:31:20.6693906Z" duration="0.000143" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: 1,    &quot;two&quot;: 5  };  $data.$zip(one, two) ~&gt; $map($sum)) ';&#xA; result: 6" />
                  </properties>
                  <output><![CDATA[Expr is '(  $data := {    "one": 1,    "two": 5  };  $data.$zip(one, two) ~> $map($sum)) '
Result: '6'
Expected: '6'
]]></output>
                </test-case>
                <test-case id="0-2115" name="inclusion-operator.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2060114634" result="Passed" start-time="2025-01-14T17:31:20.6694029Z" end-time="2025-01-14T17:31:20.6694964Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '1 in [1,2]';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '1 in [1,2]'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2116" name="inclusion-operator.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="69938027" result="Passed" start-time="2025-01-14T17:31:20.6695059Z" end-time="2025-01-14T17:31:20.6695867Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3 in [1,2]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '3 in [1,2]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2117" name="inclusion-operator.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="264879280" result="Passed" start-time="2025-01-14T17:31:20.6695960Z" end-time="2025-01-14T17:31:20.6696629Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot; in [1,2]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '"hello" in [1,2]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2118" name="inclusion-operator.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1373142584" result="Passed" start-time="2025-01-14T17:31:20.6696725Z" end-time="2025-01-14T17:31:20.6697318Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;world&quot; in [&quot;hello&quot;, &quot;world&quot;]';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"world" in ["hello", "world"]'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2119" name="inclusion-operator.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="624449283" result="Passed" start-time="2025-01-14T17:31:20.6697403Z" end-time="2025-01-14T17:31:20.6698190Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'in in [&quot;hello&quot;, &quot;world&quot;]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'in in ["hello", "world"]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2120" name="inclusion-operator.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="913273628" result="Passed" start-time="2025-01-14T17:31:20.6698302Z" end-time="2025-01-14T17:31:20.6698947Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;world&quot; in in';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '"world" in in'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2121" name="inclusion-operator.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1103394100" result="Passed" start-time="2025-01-14T17:31:20.6699019Z" end-time="2025-01-14T17:31:20.6699992Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot; in &quot;hello&quot;';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"hello" in "hello"'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2122" name="inclusion-operator.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1470084628" result="Passed" start-time="2025-01-14T17:31:20.6700113Z" end-time="2025-01-14T17:31:20.6701999Z" duration="0.000189" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'library.books[&quot;Aho&quot; in authors].title';&#xA; result: [&quot;The AWK Programming Language&quot;,&quot;Compilers: Principles, Techniques, and Tools&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'library.books["Aho" in authors].title'
Result: '["The AWK Programming Language","Compilers: Principles, Techniques, and Tools"]'
Expected: '["The AWK Programming Language","Compilers: Principles, Techniques, and Tools"]'
]]></output>
                </test-case>
                <test-case id="0-2123" name="inclusion-operator.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2053722057" result="Passed" start-time="2025-01-14T17:31:20.6702109Z" end-time="2025-01-14T17:31:20.6703588Z" duration="0.000148" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'content.integration.$lowercase(name)';&#xA; result: &quot;fakeintegrationname&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'content.integration.$lowercase(name)'
Result: '"fakeintegrationname"'
Expected: '"fakeintegrationname"'
]]></output>
                </test-case>
                <test-case id="0-2124" name="joins.employee-map-reduce[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="344071907" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6703704Z" end-time="2025-01-14T17:31:20.6708572Z" duration="0.000487" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.(Contact)[ssn = $e.SSN].{ 'name': $e.(FirstName &amp; ' ' &amp; Surname), 'phone': Phone[type='mobile'].number }';&#xA; result: [{&quot;name&quot;:&quot;Fred Smith&quot;,&quot;phone&quot;:&quot;077 7700 1234&quot;},{&quot;name&quot;:&quot;Darren Cruse&quot;,&quot;phone&quot;:&quot;315 782 9279&quot;},{&quot;name&quot;:&quot;Hugh Jones&quot;},{&quot;name&quot;:&quot;Hugh Jones&quot;},{&quot;name&quot;:&quot;Hugh Jones&quot;,&quot;phone&quot;:&quot;07735 853535&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.(Contact)[ssn = $e.SSN].{ 'name': $e.(FirstName & ' ' & Surname), 'phone': Phone[type='mobile'].number }'
]]></output>
                </test-case>
                <test-case id="0-2125" name="joins.employee-map-reduce[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1399969720" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6708700Z" end-time="2025-01-14T17:31:20.6713012Z" duration="0.000431" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.(Contact)[ssn = $e.SSN]{ $e.FirstName: Phone[type='mobile'].number }';&#xA; result: {&quot;Fred&quot;:&quot;077 7700 1234&quot;,&quot;Darren&quot;:&quot;315 782 9279&quot;,&quot;Hugh&quot;:&quot;07735 853535&quot;}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.(Contact)[ssn = $e.SSN]{ $e.FirstName: Phone[type='mobile'].number }'
]]></output>
                </test-case>
                <test-case id="0-2126" name="joins.employee-map-reduce[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="165110138" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6713142Z" end-time="2025-01-14T17:31:20.6717066Z" duration="0.000393" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName &amp; ' ' &amp; Surname): $join($c.Phone.number, ', ') }';&#xA; result: {&quot;Fred Smith&quot;:&quot;0203 544 1234, 01962 001234, 077 7700 1234&quot;,&quot;Darren Cruse&quot;:&quot;3146458343, 315 782 9279&quot;,&quot;Hugh Jones&quot;:&quot;0280 564 6543, 0280 864 8643, 07735 853535&quot;}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $join($c.Phone.number, ', ') }'
]]></output>
                </test-case>
                <test-case id="0-2127" name="joins.employee-map-reduce[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1853379019" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6717200Z" end-time="2025-01-14T17:31:20.6719841Z" duration="0.000264" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName &amp; ' ' &amp; Surname): $c.Phone[type != 'home'].number ~&gt; $join(', ') }';&#xA; result: {&quot;Fred Smith&quot;:&quot;01962 001234, 077 7700 1234&quot;,&quot;Darren Cruse&quot;:&quot;315 782 9279&quot;,&quot;Hugh Jones&quot;:&quot;0280 864 8643, 07735 853535&quot;}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number ~> $join(', ') }'
]]></output>
                </test-case>
                <test-case id="0-2128" name="joins.employee-map-reduce[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1185247863" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6719942Z" end-time="2025-01-14T17:31:20.6723604Z" duration="0.000366" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName &amp; ' ' &amp; Surname): $c.Phone[type != 'home'].number }';&#xA; result: {&quot;Fred Smith&quot;:[&quot;01962 001234&quot;,&quot;077 7700 1234&quot;],&quot;Darren Cruse&quot;:&quot;315 782 9279&quot;,&quot;Hugh Jones&quot;:[&quot;0280 864 8643&quot;,&quot;07735 853535&quot;]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number }'
]]></output>
                </test-case>
                <test-case id="0-2129" name="joins.employee-map-reduce[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1993136753" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6723745Z" end-time="2025-01-14T17:31:20.6729268Z" duration="0.000553" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName &amp; ' ' &amp; Surname): $c.Phone[type != 'home'].number[] }';&#xA; result: {&quot;Fred Smith&quot;:[&quot;01962 001234&quot;,&quot;077 7700 1234&quot;],&quot;Darren Cruse&quot;:[&quot;315 782 9279&quot;],&quot;Hugh Jones&quot;:[&quot;0280 864 8643&quot;,&quot;07735 853535&quot;]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number[] }'
]]></output>
                </test-case>
                <test-case id="0-2130" name="joins.employee-map-reduce[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1426727548" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6729403Z" end-time="2025-01-14T17:31:20.6732865Z" duration="0.000346" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.FirstName: $c.Phone.number }';&#xA; result: {&quot;Fred&quot;:[&quot;0203 544 1234&quot;,&quot;01962 001234&quot;,&quot;077 7700 1234&quot;],&quot;Darren&quot;:[&quot;3146458343&quot;,&quot;315 782 9279&quot;],&quot;Hugh&quot;:[&quot;0280 564 6543&quot;,&quot;0280 864 8643&quot;,&quot;07735 853535&quot;]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.FirstName: $c.Phone.number }'
]]></output>
                </test-case>
                <test-case id="0-2131" name="joins.employee-map-reduce[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="601111699" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6732997Z" end-time="2025-01-14T17:31:20.6736094Z" duration="0.000310" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e^($e.Surname).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }';&#xA; result: [{&quot;name&quot;:&quot;Cruse&quot;,&quot;phone&quot;:[&quot;3146458343&quot;,&quot;315 782 9279&quot;]},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;0280 564 6543&quot;},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;0280 864 8643&quot;},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;07735 853535&quot;},{&quot;name&quot;:&quot;Smith&quot;,&quot;phone&quot;:[&quot;0203 544 1234&quot;,&quot;01962 001234&quot;,&quot;077 7700 1234&quot;]}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e^($e.Surname).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }'
]]></output>
                </test-case>
                <test-case id="0-2132" name="joins.employee-map-reduce[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1881203726" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6736220Z" end-time="2025-01-14T17:31:20.6740904Z" duration="0.000469" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e^($e.FirstName).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }';&#xA; result: [{&quot;name&quot;:&quot;Cruse&quot;,&quot;phone&quot;:[&quot;3146458343&quot;,&quot;315 782 9279&quot;]},{&quot;name&quot;:&quot;Smith&quot;,&quot;phone&quot;:[&quot;0203 544 1234&quot;,&quot;01962 001234&quot;,&quot;077 7700 1234&quot;]},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;0280 564 6543&quot;},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;0280 864 8643&quot;},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;07735 853535&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e^($e.FirstName).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }'
]]></output>
                </test-case>
                <test-case id="0-2133" name="joins.employee-map-reduce[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2059870021" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6741177Z" end-time="2025-01-14T17:31:20.6764865Z" duration="0.002369" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^($) }';&#xA; result: {&quot;Smith&quot;:[&quot;01962 001234&quot;,&quot;0203 544 1234&quot;,&quot;077 7700 1234&quot;],&quot;Cruse&quot;:[&quot;3146458343&quot;,&quot;315 782 9279&quot;],&quot;Jones&quot;:[&quot;0280 564 6543&quot;,&quot;0280 864 8643&quot;,&quot;07735 853535&quot;]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^($) }'
]]></output>
                </test-case>
                <test-case id="0-2134" name="joins.employee-map-reduce[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="566383495" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6765154Z" end-time="2025-01-14T17:31:20.6768530Z" duration="0.000338" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^(&gt;$) }';&#xA; result: {&quot;Smith&quot;:[&quot;077 7700 1234&quot;,&quot;0203 544 1234&quot;,&quot;01962 001234&quot;],&quot;Cruse&quot;:[&quot;315 782 9279&quot;,&quot;3146458343&quot;],&quot;Jones&quot;:[&quot;07735 853535&quot;,&quot;0280 864 8643&quot;,&quot;0280 564 6543&quot;]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^(>$) }'
]]></output>
                </test-case>
                <test-case id="0-2135" name="joins.employee-map-reduce[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1841192058" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6768651Z" end-time="2025-01-14T17:31:20.6772087Z" duration="0.000344" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$@$i';&#xA; result: [1,2,3]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$@$i'
]]></output>
                </test-case>
                <test-case id="0-2136" name="joins.errors[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.errors[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1386291872" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6772197Z" end-time="2025-01-14T17:31:20.6774888Z" duration="0.000269" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order@o.Product';&#xA; result: error S0214" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order@o.Product'
]]></output>
                </test-case>
                <test-case id="0-2137" name="joins.errors[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.errors[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1364731726" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6775002Z" end-time="2025-01-14T17:31:20.6777880Z" duration="0.000288" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order@$o#i.Product';&#xA; result: error S0214" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order@$o#i.Product'
]]></output>
                </test-case>
                <test-case id="0-2138" name="joins.errors[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.errors[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1428153165" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6777981Z" end-time="2025-01-14T17:31:20.6780892Z" duration="0.000291" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[1]@$o.Product';&#xA; result: error S0215" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.consume(TokenType expected, Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 202
   at Jsonata.Net.Native.Parsing.Parser.parsePredicate(Token t, Node lhs) in /_/src/Jsonata.Net.Native/Parsing/Parser_Leds.cs:line 157
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 232
   at Jsonata.Net.Native.Parsing.Parser.parseDot(Token t, Node lhs) in /_/src/Jsonata.Net.Native/Parsing/Parser_Leds.cs:line 245
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 232
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order[1]@$o.Product'
]]></output>
                </test-case>
                <test-case id="0-2139" name="joins.errors[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.errors[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="872719678" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6781022Z" end-time="2025-01-14T17:31:20.6788652Z" duration="0.000763" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order^(&gt;OrderID)@$o.Product.{ 'name':`Product Name`, 'orderid':$o.OrderID }';&#xA; result: error S0216" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.consume(TokenType expected, Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 202
   at Jsonata.Net.Native.Parsing.Parser.parseSort(Token t, Node lhs) in /_/src/Jsonata.Net.Native/Parsing/Parser_Leds.cs:line 238
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 232
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order^(>OrderID)@$o.Product.{ 'name':`Product Name`, 'orderid':$o.OrderID }'
]]></output>
                </test-case>
                <test-case id="0-2140" name="joins.index[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="120709196" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6788807Z" end-time="2025-01-14T17:31:20.6791736Z" duration="0.000293" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3]';&#xA; result: [3,1,4]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3]'
]]></output>
                </test-case>
                <test-case id="0-2141" name="joins.index[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="11764178" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6792254Z" end-time="2025-01-14T17:31:20.6797872Z" duration="0.000562" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3] = $[[0..2]]';&#xA; result: true" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3] = $[[0..2]]'
]]></output>
                </test-case>
                <test-case id="0-2142" name="joins.index[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="346585932" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6798056Z" end-time="2025-01-14T17:31:20.6802609Z" duration="0.000456" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.$#$pos[$pos&lt;3]';&#xA; result: [3,1,4,1,5,9]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.$#$pos[$pos<3]'
]]></output>
                </test-case>
                <test-case id="0-2143" name="joins.index[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1788940675" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6802835Z" end-time="2025-01-14T17:31:20.6807139Z" duration="0.000431" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.$#$pos[$pos&lt;3] = $.$[[0..2]]';&#xA; result: true" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.$#$pos[$pos<3] = $.$[[0..2]]'
]]></output>
                </test-case>
                <test-case id="0-2144" name="joins.index[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="467638120" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6807279Z" end-time="2025-01-14T17:31:20.6811123Z" duration="0.000385" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3]^($)';&#xA; result: [1,3,4]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3]^($)'
]]></output>
                </test-case>
                <test-case id="0-2145" name="joins.index[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1790214997" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6811477Z" end-time="2025-01-14T17:31:20.6815064Z" duration="0.000359" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3]^(&gt;$)';&#xA; result: [4,3,1]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3]^(>$)'
]]></output>
                </test-case>
                <test-case id="0-2146" name="joins.index[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2048537691" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6815209Z" end-time="2025-01-14T17:31:20.6818977Z" duration="0.000377" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$^($)#$pos[$pos&lt;3] ';&#xA; result: [1,1,3]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.consume(TokenType expected, Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 202
   at Jsonata.Net.Native.Parsing.Parser.parseSort(Token t, Node lhs) in /_/src/Jsonata.Net.Native/Parsing/Parser_Leds.cs:line 238
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 232
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$^($)#$pos[$pos<3] '
]]></output>
                </test-case>
                <test-case id="0-2147" name="joins.index[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1080787998" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6819113Z" end-time="2025-01-14T17:31:20.6824177Z" duration="0.000507" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3][1]';&#xA; result: 1" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3][1]'
]]></output>
                </test-case>
                <test-case id="0-2148" name="joins.index[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1246939832" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6824296Z" end-time="2025-01-14T17:31:20.6827420Z" duration="0.000313" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3][1][]';&#xA; result: [1]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3][1][]'
]]></output>
                </test-case>
                <test-case id="0-2149" name="joins.index[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="501077203" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6827538Z" end-time="2025-01-14T17:31:20.6829870Z" duration="0.000234" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3]^($)[-1]';&#xA; result: 4" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3]^($)[-1]'
]]></output>
                </test-case>
                <test-case id="0-2150" name="joins.index[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1098385647" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6829989Z" end-time="2025-01-14T17:31:20.6832841Z" duration="0.000285" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[][$pos&lt;3]^($)[-1]';&#xA; result: [4]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[][$pos<3]^($)[-1]'
]]></output>
                </test-case>
                <test-case id="0-2151" name="joins.index[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="171927612" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6832977Z" end-time="2025-01-14T17:31:20.6835820Z" duration="0.000285" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3]^($)[-1][]';&#xA; result: [4]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 84
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3]^($)[-1][]'
]]></output>
                </test-case>
                <test-case id="0-2152" name="joins.index[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1620449306" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6835935Z" end-time="2025-01-14T17:31:20.6838757Z" duration="0.000282" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$[[1..4]]#$pos[$pos&gt;=2]';&#xA; result: [1,5]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.consume(TokenType expected, Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 202
   at Jsonata.Net.Native.Parsing.Parser.parsePredicate(Token t, Node lhs) in /_/src/Jsonata.Net.Native/Parsing/Parser_Leds.cs:line 157
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 232
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$[[1..4]]#$pos[$pos>=2]'
]]></output>
                </test-case>
                <test-case id="0-2153" name="joins.index[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="506525498" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6838866Z" end-time="2025-01-14T17:31:20.6842140Z" duration="0.000328" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order#$o.Product[ProductID=858383].{ 'Product': `Product Name`, 'Order Index': $o }';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order Index&quot;:0},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order Index&quot;:1}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order#$o.Product[ProductID=858383].{ 'Product': `Product Name`, 'Order Index': $o }'
]]></output>
                </test-case>
                <test-case id="0-2154" name="joins.index[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="269521000" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6842277Z" end-time="2025-01-14T17:31:20.6847721Z" duration="0.000545" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order#$i.Missing';&#xA; result: undefined" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order#$i.Missing'
]]></output>
                </test-case>
                <test-case id="0-2155" name="joins.index[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1107819828" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6847855Z" end-time="2025-01-14T17:31:20.6851797Z" duration="0.000394" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order#$i.Product{ $string(ProductID): $i }';&#xA; result: {&quot;345664&quot;:1,&quot;858236&quot;:0,&quot;858383&quot;:[0,1]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order#$i.Product{ $string(ProductID): $i }'
]]></output>
                </test-case>
                <test-case id="0-2156" name="joins.library-joins[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1638347441" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6851907Z" end-time="2025-01-14T17:31:20.6854135Z" duration="0.000223" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn].{
  'title': $b.title,
  'customer': $l.customer
}
'
]]></output>
                </test-case>
                <test-case id="0-2157" name="joins.library-joins[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="101267927" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6854225Z" end-time="2025-01-14T17:31:20.6856592Z" duration="0.000237" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books[$l.isbn=isbn].{&#xD;&#xA;  'title': title,&#xD;&#xA;  'customer': $l.customer&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books[$l.isbn=isbn].{
  'title': title,
  'customer': $l.customer
}
'
]]></output>
                </test-case>
                <test-case id="0-2158" name="joins.library-joins[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="829955968" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6856686Z" end-time="2025-01-14T17:31:20.6858654Z" duration="0.000197" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.books#$pos.$[$substring(title,0,3) = 'The'].$pos';&#xA; result: [1,2]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.books#$pos.$[$substring(title,0,3) = 'The'].$pos'
]]></output>
                </test-case>
                <test-case id="0-2159" name="joins.library-joins[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="58048706" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6858744Z" end-time="2025-01-14T17:31:20.6864052Z" duration="0.000531" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn].customers[$l.customer=id].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer,&#xD;&#xA;  'name': name&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;,&quot;name&quot;:&quot;Joe Doe&quot;},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn].customers[$l.customer=id].{
  'title': $b.title,
  'customer': $l.customer,
  'name': name
}
'
]]></output>
                </test-case>
                <test-case id="0-2160" name="joins.library-joins[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="48364507" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6864202Z" end-time="2025-01-14T17:31:20.6868666Z" duration="0.000447" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn].customers@$c[$l.customer=$c.id].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer,&#xD;&#xA;  'name': $c.name&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;,&quot;name&quot;:&quot;Joe Doe&quot;},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn].customers@$c[$l.customer=$c.id].{
  'title': $b.title,
  'customer': $l.customer,
  'name': $c.name
}
'
]]></output>
                </test-case>
                <test-case id="0-2161" name="joins.library-joins[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="832046201" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6868813Z" end-time="2025-01-14T17:31:20.6872375Z" duration="0.000356" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l#$il.books@$b#$ib[$l.isbn=$b.isbn].customers@$c#$ic[$l.customer=$c.id].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer,&#xD;&#xA;  'name': $c.name,&#xD;&#xA;  'loan-index': $il,&#xD;&#xA;  'book-index': $ib,&#xD;&#xA;  'customer-index': $ic&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;,&quot;name&quot;:&quot;Joe Doe&quot;,&quot;loan-index&quot;:0,&quot;book-index&quot;:0,&quot;customer-index&quot;:0},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;,&quot;loan-index&quot;:1,&quot;book-index&quot;:3,&quot;customer-index&quot;:2},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;,&quot;loan-index&quot;:2,&quot;book-index&quot;:0,&quot;customer-index&quot;:2}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l#$il.books@$b#$ib[$l.isbn=$b.isbn].customers@$c#$ic[$l.customer=$c.id].{
  'title': $b.title,
  'customer': $l.customer,
  'name': $c.name,
  'loan-index': $il,
  'book-index': $ib,
  'customer-index': $ic
}
'
]]></output>
                </test-case>
                <test-case id="0-2162" name="joins.library-joins[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1969127964" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6872512Z" end-time="2025-01-14T17:31:20.6876694Z" duration="0.000418" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l#$il.customers#$ic[$il=$ic].{&#xD;&#xA;  'customer': name,&#xD;&#xA;  'return': $l.return&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;customer&quot;:&quot;Joe Doe&quot;,&quot;return&quot;:&quot;2016-12-05&quot;},{&quot;customer&quot;:&quot;Fred Bloggs&quot;,&quot;return&quot;:&quot;2016-10-22&quot;},{&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;return&quot;:&quot;2016-12-22&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l#$il.customers#$ic[$il=$ic].{
  'customer': name,
  'return': $l.return
}
'
]]></output>
                </test-case>
                <test-case id="0-2163" name="joins.library-joins[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1342128264" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6876812Z" end-time="2025-01-14T17:31:20.6879937Z" duration="0.000313" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l#$il.books@$b#$ib[$l.isbn=$b.isbn]#$ib2.customers@$c#$ic[$l.customer=$c.id].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer,&#xD;&#xA;  'name': $c.name,&#xD;&#xA;  'loan-index': $il,&#xD;&#xA;  'book-index': $ib,&#xD;&#xA;  'customer-index': $ic,&#xD;&#xA;  'ib2': $ib2&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;,&quot;name&quot;:&quot;Joe Doe&quot;,&quot;loan-index&quot;:0,&quot;book-index&quot;:0,&quot;customer-index&quot;:0,&quot;ib2&quot;:0},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;,&quot;loan-index&quot;:1,&quot;book-index&quot;:3,&quot;customer-index&quot;:2,&quot;ib2&quot;:1},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;,&quot;loan-index&quot;:2,&quot;book-index&quot;:0,&quot;customer-index&quot;:2,&quot;ib2&quot;:2}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l#$il.books@$b#$ib[$l.isbn=$b.isbn]#$ib2.customers@$c#$ic[$l.customer=$c.id].{
  'title': $b.title,
  'customer': $l.customer,
  'name': $c.name,
  'loan-index': $il,
  'book-index': $ib,
  'customer-index': $ic,
  'ib2': $ib2
}
'
]]></output>
                </test-case>
                <test-case id="0-2164" name="joins.library-joins[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="95729239" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6881166Z" end-time="2025-01-14T17:31:20.6884359Z" duration="0.000319" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn][1].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer&#xD;&#xA;}&#xD;&#xA;';&#xA; result: {&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn][1].{
  'title': $b.title,
  'customer': $l.customer
}
'
]]></output>
                </test-case>
                <test-case id="0-2165" name="joins.library-joins[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="589765991" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6884515Z" end-time="2025-01-14T17:31:20.6887666Z" duration="0.000315" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn][5].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer&#xD;&#xA;}&#xD;&#xA;';&#xA; result: undefined" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn][5].{
  'title': $b.title,
  'customer': $l.customer
}
'
]]></output>
                </test-case>
                <test-case id="0-2166" name="joins.library-joins[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2026782588" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6887800Z" end-time="2025-01-14T17:31:20.6891418Z" duration="0.000362" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn][1][].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn][1][].{
  'title': $b.title,
  'customer': $l.customer
}
'
]]></output>
                </test-case>
                <test-case id="0-2167" name="lambdas.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="69814592" result="Passed" start-time="2025-01-14T17:31:20.6891553Z" end-time="2025-01-14T17:31:20.6893241Z" duration="0.000169" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'function($x){$x*$x}(5)';&#xA; result: 25" />
                  </properties>
                  <output><![CDATA[Expr is 'function($x){$x*$x}(5)'
Result: '25'
Expected: '25'
]]></output>
                </test-case>
                <test-case id="0-2168" name="lambdas.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1090658350" result="Passed" start-time="2025-01-14T17:31:20.6893347Z" end-time="2025-01-14T17:31:20.6894326Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'function($x){$x&gt;5 ? &quot;foo&quot;}(6)';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'function($x){$x>5 ? "foo"}(6)'
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-2169" name="lambdas.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1470334683" result="Passed" start-time="2025-01-14T17:31:20.6894401Z" end-time="2025-01-14T17:31:20.6895083Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'function($x){$x&gt;5 ? &quot;foo&quot;}(3)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'function($x){$x>5 ? "foo"}(3)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2170" name="lambdas.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="673822762" result="Passed" start-time="2025-01-14T17:31:20.6895154Z" end-time="2025-01-14T17:31:20.6896037Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($factorial:= function($x){$x &lt;= 1 ? 1 : $x * $factorial($x-1)}; $factorial(4))';&#xA; result: 24" />
                  </properties>
                  <output><![CDATA[Expr is '($factorial:= function($x){$x <= 1 ? 1 : $x * $factorial($x-1)}; $factorial(4))'
Result: '24'
Expected: '24'
]]></output>
                </test-case>
                <test-case id="0-2171" name="lambdas.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="852689948" result="Passed" start-time="2025-01-14T17:31:20.6896109Z" end-time="2025-01-14T17:31:20.6900920Z" duration="0.000481" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($fibonacci := function($x){$x &lt;= 1 ? $x : $fibonacci($x-1) + $fibonacci($x-2)}; [1,2,3,4,5,6,7,8,9].$fibonacci($))';&#xA; result: [1,1,2,3,5,8,13,21,34]" />
                  </properties>
                  <output><![CDATA[Expr is '($fibonacci := function($x){$x <= 1 ? $x : $fibonacci($x-1) + $fibonacci($x-2)}; [1,2,3,4,5,6,7,8,9].$fibonacci($))'
Result: '[1,1,2,3,5,8,13,21,34]'
Expected: '[1,1,2,3,5,8,13,21,34]'
]]></output>
                </test-case>
                <test-case id="0-2172" name="lambdas.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="984209762" result="Passed" start-time="2025-01-14T17:31:20.6901046Z" end-time="2025-01-14T17:31:20.6904518Z" duration="0.000347" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($nth_price := function($n) { (Account.Order.Product.Price)[$n] }; $nth_price(1) )';&#xA; result: 21.67" />
                  </properties>
                  <output><![CDATA[Expr is '($nth_price := function($n) { (Account.Order.Product.Price)[$n] }; $nth_price(1) )'
Result: '21.67'
Expected: '21.67'
]]></output>
                </test-case>
                <test-case id="0-2173" name="lambdas.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="500422906" result="Passed" start-time="2025-01-14T17:31:20.6904631Z" end-time="2025-01-14T17:31:20.6907443Z" duration="0.000281" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '            (              $even := function($n) { $n = 0 ? true : $odd($n-1) };              $odd := function($n) { $n = 0 ? false : $even($n-1) };              $even(82)            )';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '            (              $even := function($n) { $n = 0 ? true : $odd($n-1) };              $odd := function($n) { $n = 0 ? false : $even($n-1) };              $even(82)            )'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2174" name="lambdas.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="503740087" result="Passed" start-time="2025-01-14T17:31:20.6907566Z" end-time="2025-01-14T17:31:20.6909376Z" duration="0.000181" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '            (              $even := function($n) { $n = 0 ? true : $odd($n-1) };               $odd := function($n) { $n = 0 ? false : $even($n-1) };               $even(65) )';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '            (              $even := function($n) { $n = 0 ? true : $odd($n-1) };               $odd := function($n) { $n = 0 ? false : $even($n-1) };               $even(65) )'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2175" name="lambdas.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="901509450" result="Passed" start-time="2025-01-14T17:31:20.6909491Z" end-time="2025-01-14T17:31:20.6911090Z" duration="0.000160" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '        (          $even := function($n) { $n = 0 ? true : $odd($n-1) };           $odd := function($n) { $n = 0 ? false : $even($n-1) };           $odd(65)         )';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '        (          $even := function($n) { $n = 0 ? true : $odd($n-1) };           $odd := function($n) { $n = 0 ? false : $even($n-1) };           $odd(65)         )'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2176" name="lambdas.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="756808168" result="Passed" start-time="2025-01-14T17:31:20.6911174Z" end-time="2025-01-14T17:31:20.6912346Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $gcd := λ($a, $b){$b = 0 ? $a : $gcd($b, $a%$b) };  [$gcd(8,12), $gcd(9,12)])';&#xA; result: [4,3]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $gcd := λ($a, $b){$b = 0 ? $a : $gcd($b, $a%$b) };  [$gcd(8,12), $gcd(9,12)])'
Result: '[4,3]'
Expected: '[4,3]'
]]></output>
                </test-case>
                <test-case id="0-2177" name="lambdas.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1828627600" result="Passed" start-time="2025-01-14T17:31:20.6912432Z" end-time="2025-01-14T17:31:20.6914805Z" duration="0.000238" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $range := function($start, $end, $step) { (    $step:=($step?$step:1);    $start+$step &gt; $end ? $start : $append($start, $range($start+$step, $end, $step))   )};  $range(0,15))        ';&#xA; result: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $range := function($start, $end, $step) { (    $step:=($step?$step:1);    $start+$step > $end ? $start : $append($start, $range($start+$step, $end, $step))   )};  $range(0,15))        '
Result: '[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]'
Expected: '[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]'
]]></output>
                </test-case>
                <test-case id="0-2178" name="lambdas.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1586083937" result="Passed" start-time="2025-01-14T17:31:20.6914923Z" end-time="2025-01-14T17:31:20.6916940Z" duration="0.000202" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $range := function($start, $end, $step) { (      $step:=($step?$step:1);        $start+$step &gt; $end ? $start : $append($start, $range($start+$step, $end, $step))   )};  $range(0,15,2))        ';&#xA; result: [0,2,4,6,8,10,12,14]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $range := function($start, $end, $step) { (      $step:=($step?$step:1);        $start+$step > $end ? $start : $append($start, $range($start+$step, $end, $step))   )};  $range(0,15,2))        '
Result: '[0,2,4,6,8,10,12,14]'
Expected: '[0,2,4,6,8,10,12,14]'
]]></output>
                </test-case>
                <test-case id="0-2179" name="lambdas.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="701340557" result="Passed" start-time="2025-01-14T17:31:20.6917039Z" end-time="2025-01-14T17:31:20.6918204Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $median := λ($x){$sort($x)[$count($x)/2]};  $median([5,4,3,2,1,6,7,8,1]) )';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '( $median := λ($x){$sort($x)[$count($x)/2]};  $median([5,4,3,2,1,6,7,8,1]) )'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-2180" name="literals.array-inputs[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1498915676" result="Passed" start-time="2025-01-14T17:31:20.6918277Z" end-time="2025-01-14T17:31:20.6919403Z" duration="0.000113" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}';&#xA; result: {&quot;fgFoo:0:hausnummer&quot;:{&quot;type&quot;:&quot;de.example.api.PossibleValuesList&quot;,&quot;value&quot;:[{&quot;label&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}'
Result: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
Expected: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
]]></output>
                </test-case>
                <test-case id="0-2181" name="literals.array-inputs[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1231805787" result="Passed" start-time="2025-01-14T17:31:20.6919480Z" end-time="2025-01-14T17:31:20.6920303Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}';&#xA; result: {&quot;fgFoo:0:hausnummer&quot;:{&quot;type&quot;:&quot;de.example.api.PossibleValuesList&quot;,&quot;value&quot;:[{&quot;label&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}'
Result: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
Expected: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
]]></output>
                </test-case>
                <test-case id="0-2182" name="literals.array-inputs[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="606439187" result="Passed" start-time="2025-01-14T17:31:20.6920369Z" end-time="2025-01-14T17:31:20.6921166Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}';&#xA; result: {&quot;fgFoo:0:hausnummer&quot;:{&quot;type&quot;:&quot;de.example.api.PossibleValuesList&quot;,&quot;value&quot;:[{&quot;label&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}'
Result: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
Expected: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
]]></output>
                </test-case>
                <test-case id="0-2183" name="literals.array-inputs[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="684170660" result="Passed" start-time="2025-01-14T17:31:20.6921231Z" end-time="2025-01-14T17:31:20.6922016Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}';&#xA; result: {&quot;fgFoo:0:hausnummer&quot;:{&quot;type&quot;:&quot;de.example.api.PossibleValuesList&quot;,&quot;value&quot;:[{&quot;label&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}'
Result: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
Expected: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
]]></output>
                </test-case>
                <test-case id="0-2184" name="literals.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="894751106" result="Passed" start-time="2025-01-14T17:31:20.6922083Z" end-time="2025-01-14T17:31:20.6922834Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot;';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"hello"'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2185" name="literals.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1254799936" result="Passed" start-time="2025-01-14T17:31:20.6922933Z" end-time="2025-01-14T17:31:20.6923699Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: ''hello'';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is ''hello''
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2186" name="literals.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1128146040" result="Passed" start-time="2025-01-14T17:31:20.6923782Z" end-time="2025-01-14T17:31:20.6924415Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;Wayne's World&quot;';&#xA; result: &quot;Wayne's World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"Wayne's World"'
Result: '"Wayne's World"'
Expected: '"Wayne's World"'
]]></output>
                </test-case>
                <test-case id="0-2187" name="literals.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1374678228" result="Passed" start-time="2025-01-14T17:31:20.6924483Z" end-time="2025-01-14T17:31:20.6925199Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '42';&#xA; result: 42" />
                  </properties>
                  <output><![CDATA[Expr is '42'
Result: '42'
Expected: '42'
]]></output>
                </test-case>
                <test-case id="0-2188" name="literals.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1790349021" result="Passed" start-time="2025-01-14T17:31:20.6925277Z" end-time="2025-01-14T17:31:20.6925923Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '-42';&#xA; result: -42" />
                  </properties>
                  <output><![CDATA[Expr is '-42'
Result: '-42'
Expected: '-42'
]]></output>
                </test-case>
                <test-case id="0-2189" name="literals.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1606047314" result="Passed" start-time="2025-01-14T17:31:20.6926017Z" end-time="2025-01-14T17:31:20.6926954Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3.14159';&#xA; result: 3.14159" />
                  </properties>
                  <output><![CDATA[Expr is '3.14159'
Result: '3.14159'
Expected: '3.14159'
]]></output>
                </test-case>
                <test-case id="0-2190" name="literals.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="202844617" result="Passed" start-time="2025-01-14T17:31:20.6927055Z" end-time="2025-01-14T17:31:20.6927818Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '6.022e23';&#xA; result: 6.022E+23" />
                  </properties>
                  <output><![CDATA[Expr is '6.022e23'
Result: '602200000000000000000000.0'
Expected: '6.022E+23'
]]></output>
                </test-case>
                <test-case id="0-2191" name="literals.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1285023945" result="Passed" start-time="2025-01-14T17:31:20.6927909Z" end-time="2025-01-14T17:31:20.6929154Z" duration="0.000125" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '1.602E-19';&#xA; result: 1.602E-19" />
                  </properties>
                  <output><![CDATA[Expr is '1.602E-19'
Result: '0.0000000000000000001602'
Expected: '1.602E-19'
]]></output>
                </test-case>
                <test-case id="0-2192" name="literals.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="534775758" result="Passed" start-time="2025-01-14T17:31:20.6929275Z" end-time="2025-01-14T17:31:20.6937559Z" duration="0.000829" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '10e1000';&#xA; result: error S0102" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0102.
Actually thrown S0102.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '10e1000'
]]></output>
                </test-case>
                <test-case id="0-2193" name="literals.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1370104459" result="Passed" start-time="2025-01-14T17:31:20.6937732Z" end-time="2025-01-14T17:31:20.6940729Z" duration="0.000300" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello\tworld&quot;';&#xA; result: &quot;hello\tworld&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"hello\tworld"'
Result: '"hello\tworld"'
Expected: '"hello\tworld"'
]]></output>
                </test-case>
                <test-case id="0-2194" name="literals.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="824355171" result="Passed" start-time="2025-01-14T17:31:20.6940944Z" end-time="2025-01-14T17:31:20.6942077Z" duration="0.000113" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello\nworld&quot;';&#xA; result: &quot;hello\nworld&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"hello\nworld"'
Result: '"hello\nworld"'
Expected: '"hello\nworld"'
]]></output>
                </test-case>
                <test-case id="0-2195" name="literals.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1436146642" result="Passed" start-time="2025-01-14T17:31:20.6942193Z" end-time="2025-01-14T17:31:20.6943149Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello \&quot;world\&quot;&quot;';&#xA; result: &quot;hello \&quot;world\&quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"hello \"world\""'
Result: '"hello \"world\""'
Expected: '"hello \"world\""'
]]></output>
                </test-case>
                <test-case id="0-2196" name="literals.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="190119861" result="Passed" start-time="2025-01-14T17:31:20.6943244Z" end-time="2025-01-14T17:31:20.6944432Z" duration="0.000119" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;C:\\Test\\test.txt&quot;';&#xA; result: &quot;C:\\Test\\test.txt&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"C:\\Test\\test.txt"'
Result: '"C:\\Test\\test.txt"'
Expected: '"C:\\Test\\test.txt"'
]]></output>
                </test-case>
                <test-case id="0-2197" name="literals.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1151941315" result="Passed" start-time="2025-01-14T17:31:20.6944549Z" end-time="2025-01-14T17:31:20.6945485Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;\u03BB-calculus rocks&quot;';&#xA; result: &quot;λ-calculus rocks&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"\u03BB-calculus rocks"'
Result: '"λ-calculus rocks"'
Expected: '"λ-calculus rocks"'
]]></output>
                </test-case>
                <test-case id="0-2198" name="literals.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1693211436" result="Passed" start-time="2025-01-14T17:31:20.6945585Z" end-time="2025-01-14T17:31:20.6946524Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;𝄞&quot;';&#xA; result: &quot;𝄞&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"𝄞"'
Result: '"𝄞"'
Expected: '"𝄞"'
]]></output>
                </test-case>
                <test-case id="0-2199" name="literals.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2025355776" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6946648Z" end-time="2025-01-14T17:31:20.6960506Z" duration="0.001386" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;\y&quot;';&#xA; result: error S0103" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Invalid pattern '\y' at offset 2. Unrecognized escape sequence \y.
(RegexParseException)
   at System.Text.RegularExpressions.RegexParser.ScanCharEscape()
   at System.Text.RegularExpressions.RegexParser.UnescapeImpl(String input, Int32 i)
   at Jsonata.Net.Native.Parsing.Helpers.Unescape(String src) in /_/src/Jsonata.Net.Native/Parsing/Helpers.cs:line 45
   at Jsonata.Net.Native.Parsing.Parser.parseString(Token t) in /_/src/Jsonata.Net.Native/Parsing/Parser_Nuds.cs:line 17
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 222
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"\y"'
]]></output>
                </test-case>
                <test-case id="0-2200" name="literals.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1910916056" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6960692Z" end-time="2025-01-14T17:31:20.6963446Z" duration="0.000276" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;\u&quot;';&#xA; result: error S0104" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Invalid pattern '\u' at offset 2. Insufficient or invalid hexadecimal digits.
(RegexParseException)
   at System.Text.RegularExpressions.RegexParser.ScanHex(Int32 c)
   at System.Text.RegularExpressions.RegexParser.UnescapeImpl(String input, Int32 i)
   at Jsonata.Net.Native.Parsing.Helpers.Unescape(String src) in /_/src/Jsonata.Net.Native/Parsing/Helpers.cs:line 45
   at Jsonata.Net.Native.Parsing.Parser.parseString(Token t) in /_/src/Jsonata.Net.Native/Parsing/Parser_Nuds.cs:line 17
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 222
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"\u"'
]]></output>
                </test-case>
                <test-case id="0-2201" name="literals.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1978723099" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.6963544Z" end-time="2025-01-14T17:31:20.6965747Z" duration="0.000221" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;\u123t&quot;';&#xA; result: error S0104" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Invalid pattern '\u123t' at offset 6. Insufficient or invalid hexadecimal digits.
(RegexParseException)
   at System.Text.RegularExpressions.RegexParser.ScanHex(Int32 c)
   at System.Text.RegularExpressions.RegexParser.UnescapeImpl(String input, Int32 i)
   at Jsonata.Net.Native.Parsing.Helpers.Unescape(String src) in /_/src/Jsonata.Net.Native/Parsing/Helpers.cs:line 45
   at Jsonata.Net.Native.Parsing.Parser.parseString(Token t) in /_/src/Jsonata.Net.Native/Parsing/Parser_Nuds.cs:line 17
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 222
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"\u123t"'
]]></output>
                </test-case>
                <test-case id="0-2202" name="literals.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2137613295" result="Passed" start-time="2025-01-14T17:31:20.6965854Z" end-time="2025-01-14T17:31:20.6967364Z" duration="0.000151" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'foo': { 'sequence': 123, 'bar': 'baz' } } ';&#xA; result: {&quot;foo&quot;:{&quot;sequence&quot;:123,&quot;bar&quot;:&quot;baz&quot;}}" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'foo': { 'sequence': 123, 'bar': 'baz' } } '
Result: '{"foo":{"sequence":123,"bar":"baz"}}'
Expected: '{"foo":{"sequence":123,"bar":"baz"}}'
]]></output>
                </test-case>
                <test-case id="0-2203" name="literals.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1924088796" result="Passed" start-time="2025-01-14T17:31:20.6967483Z" end-time="2025-01-14T17:31:20.6968651Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'foo': { 'sequence': true, 'bar': 'baz' } } ';&#xA; result: {&quot;foo&quot;:{&quot;sequence&quot;:true,&quot;bar&quot;:&quot;baz&quot;}}" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'foo': { 'sequence': true, 'bar': 'baz' } } '
Result: '{"foo":{"sequence":true,"bar":"baz"}}'
Expected: '{"foo":{"sequence":true,"bar":"baz"}}'
]]></output>
                </test-case>
                <test-case id="0-2204" name="matchers.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.matchers.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1974738088" result="Failed" label="Error" start-time="2025-01-14T17:31:20.6968746Z" end-time="2025-01-14T17:31:20.6988798Z" duration="0.002005" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(&#xD;&#xA;    $generateMatcher := function($ch) {&#xD;&#xA;      $match := function($str, $offset) {(&#xD;&#xA;        $before := $substringBefore($str, $ch);&#xD;&#xA;        $start := $length($before) + ($exists($offset) ? $offset : 0);&#xD;&#xA;        $end := $start + $length($ch);&#xD;&#xA;        $before != $str and $length($ch) &gt; 0 ? {&#xD;&#xA;          'match': $ch,&#xD;&#xA;          'start': $start,&#xD;&#xA;          'end': $end,&#xD;&#xA;          'groups': [],&#xD;&#xA;          'next': function() {$match($substringAfter($str, $ch), $end)}&#xD;&#xA;        }&#xD;&#xA;      )}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    $match(&quot;abracadabra&quot;, $generateMatcher('a'))&#xD;&#xA;)';&#xA; result: [{&quot;match&quot;:&quot;a&quot;,&quot;index&quot;:0,&quot;groups&quot;:[]},{&quot;match&quot;:&quot;a&quot;,&quot;index&quot;:3,&quot;groups&quot;:[]},{&quot;match&quot;:&quot;a&quot;,&quot;index&quot;:5,&quot;groups&quot;:[]},{&quot;match&quot;:&quot;a&quot;,&quot;index&quot;:7,&quot;groups&quot;:[]},{&quot;match&quot;:&quot;a&quot;,&quot;index&quot;:10,&quot;groups&quot;:[]}]" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : T0410: Argument 2 of function match should be regex. Passed Function ("")]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.match(String str, JToken pattern, Int32 limit) in /_/src/Jsonata.Net.Native/Eval/BuiltinFunctions.cs:line 402
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 470
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 444
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 96
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 48
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in /_/src/Jsonata.Net.Native/Eval/EvalProcessor.cs:line 30
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 50
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in /_/src/Jsonata.Net.Native.JsonNet/JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94
   at InvokeStub_Tests.Test(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '(
    $generateMatcher := function($ch) {
      $match := function($str, $offset) {(
        $before := $substringBefore($str, $ch);
        $start := $length($before) + ($exists($offset) ? $offset : 0);
        $end := $start + $length($ch);
        $before != $str and $length($ch) > 0 ? {
          'match': $ch,
          'start': $start,
          'end': $end,
          'groups': [],
          'next': function() {$match($substringAfter($str, $ch), $end)}
        }
      )}
    };

    $match("abracadabra", $generateMatcher('a'))
)'
]]></output>
                </test-case>
                <test-case id="0-2205" name="matchers.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.matchers.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="245695699" result="Passed" start-time="2025-01-14T17:31:20.6988983Z" end-time="2025-01-14T17:31:20.6992209Z" duration="0.000323" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split('some text', $uppercase)';&#xA; result: error T1010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1010.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split('some text', $uppercase)'
]]></output>
                </test-case>
                <test-case id="0-2206" name="missing-paths.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1335201497" result="Passed" start-time="2025-01-14T17:31:20.6992331Z" end-time="2025-01-14T17:31:20.6993129Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fdf';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'fdf'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2207" name="missing-paths.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1120026400" result="Passed" start-time="2025-01-14T17:31:20.6993196Z" end-time="2025-01-14T17:31:20.6993905Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fdf.ett';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'fdf.ett'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2208" name="missing-paths.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2785411" result="Passed" start-time="2025-01-14T17:31:20.6993975Z" end-time="2025-01-14T17:31:20.6994626Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fdf.ett[10]';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'fdf.ett[10]'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2209" name="missing-paths.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1515495197" result="Passed" start-time="2025-01-14T17:31:20.6994694Z" end-time="2025-01-14T17:31:20.6995334Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fdf.ett[vc &gt; 10]';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'fdf.ett[vc > 10]'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2210" name="missing-paths.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="351011660" result="Passed" start-time="2025-01-14T17:31:20.6995398Z" end-time="2025-01-14T17:31:20.6996121Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fdf.ett + 27';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'fdf.ett + 27'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2211" name="missing-paths.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1957203488" result="Passed" start-time="2025-01-14T17:31:20.6996232Z" end-time="2025-01-14T17:31:20.6996893Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fdsd';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$fdsd'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2212" name="multiple-array-selectors.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="662667637" result="Passed" start-time="2025-01-14T17:31:20.6996962Z" end-time="2025-01-14T17:31:20.6997922Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..10][[1..3,8,-1]]';&#xA; result: [2,3,4,9,10]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..10][[1..3,8,-1]]'
Result: '[2,3,4,9,10]'
Expected: '[2,3,4,9,10]'
]]></output>
                </test-case>
                <test-case id="0-2213" name="multiple-array-selectors.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="128615411" result="Passed" start-time="2025-01-14T17:31:20.6997989Z" end-time="2025-01-14T17:31:20.6998779Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..10][[1..3,8,5]]';&#xA; result: [2,3,4,6,9]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..10][[1..3,8,5]]'
Result: '[2,3,4,6,9]'
Expected: '[2,3,4,6,9]'
]]></output>
                </test-case>
                <test-case id="0-2214" name="multiple-array-selectors.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="706616677" result="Passed" start-time="2025-01-14T17:31:20.6998845Z" end-time="2025-01-14T17:31:20.6999802Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..10][[1..3,8,false]]';&#xA; result: [1,2,3,4,5,6,7,8,9,10]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..10][[1..3,8,false]]'
Result: '[1,2,3,4,5,6,7,8,9,10]'
Expected: '[1,2,3,4,5,6,7,8,9,10]'
]]></output>
                </test-case>
                <test-case id="0-2215" name="null.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="964042367" result="Passed" start-time="2025-01-14T17:31:20.6999897Z" end-time="2025-01-14T17:31:20.7000762Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is 'null'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-2216" name="null.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="225607014" result="Passed" start-time="2025-01-14T17:31:20.7000865Z" end-time="2025-01-14T17:31:20.7001807Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[null]';&#xA; result: [null]" />
                  </properties>
                  <output><![CDATA[Expr is '[null]'
Result: '[null]'
Expected: '[null]'
]]></output>
                </test-case>
                <test-case id="0-2217" name="null.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1284957304" result="Passed" start-time="2025-01-14T17:31:20.7001910Z" end-time="2025-01-14T17:31:20.7002739Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[null, null]';&#xA; result: [null,null]" />
                  </properties>
                  <output><![CDATA[Expr is '[null, null]'
Result: '[null,null]'
Expected: '[null,null]'
]]></output>
                </test-case>
                <test-case id="0-2218" name="null.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="447377158" result="Passed" start-time="2025-01-14T17:31:20.7002849Z" end-time="2025-01-14T17:31:20.7003887Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$not(null)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$not(null)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2219" name="null.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="988412950" result="Passed" start-time="2025-01-14T17:31:20.7003993Z" end-time="2025-01-14T17:31:20.7004954Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null = null';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'null = null'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2220" name="null.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1609103598" result="Passed" start-time="2025-01-14T17:31:20.7005053Z" end-time="2025-01-14T17:31:20.7005732Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null != null';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'null != null'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2221" name="null.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="652104360" result="Passed" start-time="2025-01-14T17:31:20.7005801Z" end-time="2025-01-14T17:31:20.7007095Z" duration="0.000130" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;true&quot;: true, &quot;false&quot;:false, &quot;null&quot;: null}';&#xA; result: {&quot;true&quot;:true,&quot;false&quot;:false,&quot;null&quot;:null}" />
                  </properties>
                  <output><![CDATA[Expr is '{"true": true, "false":false, "null": null}'
Result: '{"true":true,"false":false,"null":null}'
Expected: '{"true":true,"false":false,"null":null}'
]]></output>
                </test-case>
                <test-case id="0-2222" name="numeric-operators.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="426949218" result="Passed" start-time="2025-01-14T17:31:20.7007188Z" end-time="2025-01-14T17:31:20.7008104Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar + bar';&#xA; result: 140" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar + bar'
Result: '140'
Expected: '140'
]]></output>
                </test-case>
                <test-case id="0-2223" name="numeric-operators.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1632094683" result="Passed" start-time="2025-01-14T17:31:20.7008300Z" end-time="2025-01-14T17:31:20.7009592Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar + foo.bar';&#xA; result: 140" />
                  </properties>
                  <output><![CDATA[Expr is 'bar + foo.bar'
Result: '140'
Expected: '140'
]]></output>
                </test-case>
                <test-case id="0-2224" name="numeric-operators.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1267490066" result="Passed" start-time="2025-01-14T17:31:20.7009705Z" end-time="2025-01-14T17:31:20.7010739Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar - bar';&#xA; result: -56" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar - bar'
Result: '-56'
Expected: '-56'
]]></output>
                </test-case>
                <test-case id="0-2225" name="numeric-operators.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1536282464" result="Passed" start-time="2025-01-14T17:31:20.7010839Z" end-time="2025-01-14T17:31:20.7011858Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar - foo.bar';&#xA; result: 56" />
                  </properties>
                  <output><![CDATA[Expr is 'bar - foo.bar'
Result: '56'
Expected: '56'
]]></output>
                </test-case>
                <test-case id="0-2226" name="numeric-operators.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="317914190" result="Passed" start-time="2025-01-14T17:31:20.7012138Z" end-time="2025-01-14T17:31:20.7013207Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar * bar';&#xA; result: 4116" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar * bar'
Result: '4116'
Expected: '4116'
]]></output>
                </test-case>
                <test-case id="0-2227" name="numeric-operators.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1761588950" result="Passed" start-time="2025-01-14T17:31:20.7013302Z" end-time="2025-01-14T17:31:20.7014195Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar * foo.bar';&#xA; result: 4116" />
                  </properties>
                  <output><![CDATA[Expr is 'bar * foo.bar'
Result: '4116'
Expected: '4116'
]]></output>
                </test-case>
                <test-case id="0-2228" name="numeric-operators.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1823551382" result="Passed" start-time="2025-01-14T17:31:20.7014286Z" end-time="2025-01-14T17:31:20.7015612Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar / bar';&#xA; result: 0.42857142857142855" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar / bar'
Result: '0.428571428571429'
Expected: '0.42857142857142855'
]]></output>
                </test-case>
                <test-case id="0-2229" name="numeric-operators.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1215077092" result="Passed" start-time="2025-01-14T17:31:20.7015732Z" end-time="2025-01-14T17:31:20.7016885Z" duration="0.000115" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar / foo.bar';&#xA; result: 2.3333333333333335" />
                  </properties>
                  <output><![CDATA[Expr is 'bar / foo.bar'
Result: '2.33333333333333'
Expected: '2.3333333333333335'
]]></output>
                </test-case>
                <test-case id="0-2230" name="numeric-operators.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="711389589" result="Passed" start-time="2025-01-14T17:31:20.7016978Z" end-time="2025-01-14T17:31:20.7017939Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar % bar';&#xA; result: 42" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar % bar'
Result: '42'
Expected: '42'
]]></output>
                </test-case>
                <test-case id="0-2231" name="numeric-operators.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1752350500" result="Passed" start-time="2025-01-14T17:31:20.7018045Z" end-time="2025-01-14T17:31:20.7018966Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar % foo.bar';&#xA; result: 14" />
                  </properties>
                  <output><![CDATA[Expr is 'bar % foo.bar'
Result: '14'
Expected: '14'
]]></output>
                </test-case>
                <test-case id="0-2232" name="numeric-operators.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="135416164" result="Passed" start-time="2025-01-14T17:31:20.7019054Z" end-time="2025-01-14T17:31:20.7020214Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar + foo.bar * bar';&#xA; result: 4214" />
                  </properties>
                  <output><![CDATA[Expr is 'bar + foo.bar * bar'
Result: '4214'
Expected: '4214'
]]></output>
                </test-case>
                <test-case id="0-2233" name="numeric-operators.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1708211808" result="Passed" start-time="2025-01-14T17:31:20.7020315Z" end-time="2025-01-14T17:31:20.7022243Z" duration="0.000193" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar * bar + bar';&#xA; result: 4214" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar * bar + bar'
Result: '4214'
Expected: '4214'
]]></output>
                </test-case>
                <test-case id="0-2234" name="numeric-operators.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="937908148" result="Passed" start-time="2025-01-14T17:31:20.7022737Z" end-time="2025-01-14T17:31:20.7024117Z" duration="0.000138" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '24 * notexist';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '24 * notexist'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2235" name="numeric-operators.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1667676224" result="Passed" start-time="2025-01-14T17:31:20.7024238Z" end-time="2025-01-14T17:31:20.7025259Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'notexist + 1';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'notexist + 1'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2236" name="numeric-operators.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1241676139" result="Passed" start-time="2025-01-14T17:31:20.7025371Z" end-time="2025-01-14T17:31:20.7030081Z" duration="0.000471" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '1/(10e300 * 10e100) ';&#xA; result: error D1001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D1001.
Actually thrown S0102.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '1/(10e300 * 10e100) '
]]></output>
                </test-case>
                <test-case id="0-2237" name="numeric-operators.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="829834038" result="Passed" start-time="2025-01-14T17:31:20.7030212Z" end-time="2025-01-14T17:31:20.7032724Z" duration="0.000251" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;5&quot; + &quot;5&quot;';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"5" + "5"'
]]></output>
                </test-case>
                <test-case id="0-2238" name="numeric-operators.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="856916219" result="Passed" start-time="2025-01-14T17:31:20.7032833Z" end-time="2025-01-14T17:31:20.7033587Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '- notexist';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '- notexist'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2239" name="numeric-operators.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="649055407" result="Passed" start-time="2025-01-14T17:31:20.7033661Z" end-time="2025-01-14T17:31:20.7035441Z" duration="0.000178" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'false + 1';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'false + 1'
]]></output>
                </test-case>
                <test-case id="0-2240" name="numeric-operators.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2067082086" result="Failed" start-time="2025-01-14T17:31:20.7035534Z" end-time="2025-01-14T17:31:20.7039679Z" duration="0.000415" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'false + $x';&#xA; result: error T2001" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error T2001 (), got 'undefined']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is 'false + $x'
Result: 'undefined'
Expected error T2001
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error T2001 (), got 'undefined']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2241" name="object-constructor.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="8119640" result="Passed" start-time="2025-01-14T17:31:20.7039776Z" end-time="2025-01-14T17:31:20.7040628Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{}';&#xA; result: {}" />
                  </properties>
                  <output><![CDATA[Expr is '{}'
Result: '{}'
Expected: '{}'
]]></output>
                </test-case>
                <test-case id="0-2242" name="object-constructor.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1371892817" result="Passed" start-time="2025-01-14T17:31:20.7040697Z" end-time="2025-01-14T17:31:20.7041438Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;key&quot;: &quot;value&quot;}';&#xA; result: {&quot;key&quot;:&quot;value&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is '{"key": "value"}'
Result: '{"key":"value"}'
Expected: '{"key":"value"}'
]]></output>
                </test-case>
                <test-case id="0-2243" name="object-constructor.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="274853824" result="Passed" start-time="2025-01-14T17:31:20.7041506Z" end-time="2025-01-14T17:31:20.7042258Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;one&quot;: 1, &quot;two&quot;: 2}';&#xA; result: {&quot;one&quot;:1,&quot;two&quot;:2}" />
                  </properties>
                  <output><![CDATA[Expr is '{"one": 1, "two": 2}'
Result: '{"one":1,"two":2}'
Expected: '{"one":1,"two":2}'
]]></output>
                </test-case>
                <test-case id="0-2244" name="object-constructor.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1255035654" result="Passed" start-time="2025-01-14T17:31:20.7042326Z" end-time="2025-01-14T17:31:20.7043218Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;one&quot;: 1, &quot;two&quot;: 2}.two';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '{"one": 1, "two": 2}.two'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-2245" name="object-constructor.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="393124776" result="Passed" start-time="2025-01-14T17:31:20.7043311Z" end-time="2025-01-14T17:31:20.7044273Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;one&quot;: 1, &quot;two&quot;: {&quot;three&quot;: 3, &quot;four&quot;: &quot;4&quot;}}';&#xA; result: {&quot;one&quot;:1,&quot;two&quot;:{&quot;three&quot;:3,&quot;four&quot;:&quot;4&quot;}}" />
                  </properties>
                  <output><![CDATA[Expr is '{"one": 1, "two": {"three": 3, "four": "4"}}'
Result: '{"one":1,"two":{"three":3,"four":"4"}}'
Expected: '{"one":1,"two":{"three":3,"four":"4"}}'
]]></output>
                </test-case>
                <test-case id="0-2246" name="object-constructor.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="622356308" result="Passed" start-time="2025-01-14T17:31:20.7044365Z" end-time="2025-01-14T17:31:20.7045782Z" duration="0.000142" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;one&quot;: 1, &quot;two&quot;: [3, &quot;four&quot;]}';&#xA; result: {&quot;one&quot;:1,&quot;two&quot;:[3,&quot;four&quot;]}" />
                  </properties>
                  <output><![CDATA[Expr is '{"one": 1, "two": [3, "four"]}'
Result: '{"one":1,"two":[3,"four"]}'
Expected: '{"one":1,"two":[3,"four"]}'
]]></output>
                </test-case>
                <test-case id="0-2247" name="object-constructor.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="406160347" result="Passed" start-time="2025-01-14T17:31:20.7045893Z" end-time="2025-01-14T17:31:20.7046816Z" duration="0.000093" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;test&quot;: ()}';&#xA; result: {}" />
                  </properties>
                  <output><![CDATA[Expr is '{"test": ()}'
Result: '{}'
Expected: '{}'
]]></output>
                </test-case>
                <test-case id="0-2248" name="object-constructor.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="663487782" result="Passed" start-time="2025-01-14T17:31:20.7046927Z" end-time="2025-01-14T17:31:20.7047847Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'blah.{}';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'blah.{}'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2249" name="object-constructor.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2007796451" result="Passed" start-time="2025-01-14T17:31:20.7047930Z" end-time="2025-01-14T17:31:20.7049823Z" duration="0.000190" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order{OrderID: Product.&quot;Product Name&quot;}';&#xA; result: {&quot;order103&quot;:[&quot;Bowler Hat&quot;,&quot;Trilby hat&quot;],&quot;order104&quot;:[&quot;Bowler Hat&quot;,&quot;Cloak&quot;]}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order{OrderID: Product."Product Name"}'
Result: '{"order103":["Bowler Hat","Trilby hat"],"order104":["Bowler Hat","Cloak"]}'
Expected: '{"order103":["Bowler Hat","Trilby hat"],"order104":["Bowler Hat","Cloak"]}'
]]></output>
                </test-case>
                <test-case id="0-2250" name="object-constructor.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1210539628" result="Passed" start-time="2025-01-14T17:31:20.7049943Z" end-time="2025-01-14T17:31:20.7051711Z" duration="0.000177" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.{OrderID: Product.&quot;Product Name&quot;}';&#xA; result: [{&quot;order103&quot;:[&quot;Bowler Hat&quot;,&quot;Trilby hat&quot;]},{&quot;order104&quot;:[&quot;Bowler Hat&quot;,&quot;Cloak&quot;]}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.{OrderID: Product."Product Name"}'
Result: '[{"order103":["Bowler Hat","Trilby hat"]},{"order104":["Bowler Hat","Cloak"]}]'
Expected: '[{"order103":["Bowler Hat","Trilby hat"]},{"order104":["Bowler Hat","Cloak"]}]'
]]></output>
                </test-case>
                <test-case id="0-2251" name="object-constructor.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1052646204" result="Passed" start-time="2025-01-14T17:31:20.7051822Z" end-time="2025-01-14T17:31:20.7054071Z" duration="0.000225" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product{$string(ProductID): Price}';&#xA; result: {&quot;345664&quot;:107.99,&quot;858236&quot;:21.67,&quot;858383&quot;:[34.45,34.45]}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product{$string(ProductID): Price}'
Result: '{"858383":[34.45,34.45],"858236":21.67,"345664":107.99}'
Expected: '{"345664":107.99,"858236":21.67,"858383":[34.45,34.45]}'
]]></output>
                </test-case>
                <test-case id="0-2252" name="object-constructor.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="704564157" result="Passed" start-time="2025-01-14T17:31:20.7054177Z" end-time="2025-01-14T17:31:20.7055729Z" duration="0.000155" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product{$string(ProductID): (Price)[0]}';&#xA; result: {&quot;345664&quot;:107.99,&quot;858236&quot;:21.67,&quot;858383&quot;:34.45}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product{$string(ProductID): (Price)[0]}'
Result: '{"858383":34.45,"858236":21.67,"345664":107.99}'
Expected: '{"345664":107.99,"858236":21.67,"858383":34.45}'
]]></output>
                </test-case>
                <test-case id="0-2253" name="object-constructor.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="704798486" result="Passed" start-time="2025-01-14T17:31:20.7055826Z" end-time="2025-01-14T17:31:20.7057170Z" duration="0.000134" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{$string(ProductID): Price}';&#xA; result: [{&quot;858383&quot;:34.45},{&quot;858236&quot;:21.67},{&quot;858383&quot;:34.45},{&quot;345664&quot;:107.99}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{$string(ProductID): Price}'
Result: '[{"858383":34.45},{"858236":21.67},{"858383":34.45},{"345664":107.99}]'
Expected: '[{"858383":34.45},{"858236":21.67},{"858383":34.45},{"345664":107.99}]'
]]></output>
                </test-case>
                <test-case id="0-2254" name="object-constructor.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="416252178" result="Passed" start-time="2025-01-14T17:31:20.7057266Z" end-time="2025-01-14T17:31:20.7060687Z" duration="0.000342" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product{ProductID: &quot;Product Name&quot;}';&#xA; result: error T1003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1003.
Actually thrown T1003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product{ProductID: "Product Name"}'
]]></output>
                </test-case>
                <test-case id="0-2255" name="object-constructor.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1258811696" result="Passed" start-time="2025-01-14T17:31:20.7060802Z" end-time="2025-01-14T17:31:20.7065278Z" duration="0.000448" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{ProductID: &quot;Product Name&quot;}';&#xA; result: error T1003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1003.
Actually thrown T1003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product.{ProductID: "Product Name"}'
]]></output>
                </test-case>
                <test-case id="0-2256" name="object-constructor.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1551773881" result="Passed" start-time="2025-01-14T17:31:20.7065412Z" end-time="2025-01-14T17:31:20.7067588Z" duration="0.000218" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order{OrderID: $sum(Product.(Price*Quantity))}';&#xA; result: {&quot;order103&quot;:90.57000000000001,&quot;order104&quot;:245.79000000000002}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order{OrderID: $sum(Product.(Price*Quantity))}'
Result: '{"order103":90.57,"order104":245.79}'
Expected: '{"order103":90.57000000000001,"order104":245.79000000000002}'
]]></output>
                </test-case>
                <test-case id="0-2257" name="object-constructor.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="505518612" result="Passed" start-time="2025-01-14T17:31:20.7067712Z" end-time="2025-01-14T17:31:20.7070826Z" duration="0.000312" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.{OrderID: $sum(Product.(Price*Quantity))}';&#xA; result: [{&quot;order103&quot;:90.57000000000001},{&quot;order104&quot;:245.79000000000002}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.{OrderID: $sum(Product.(Price*Quantity))}'
Result: '[{"order103":90.57},{"order104":245.79}]'
Expected: '[{"order103":90.57000000000001},{"order104":245.79000000000002}]'
]]></output>
                </test-case>
                <test-case id="0-2258" name="object-constructor.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="656598730" result="Passed" start-time="2025-01-14T17:31:20.7071055Z" end-time="2025-01-14T17:31:20.7076770Z" duration="0.000572" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product{$.&quot;Product Name&quot;: Price, $.&quot;Product Name&quot;: Price}';&#xA; result: error D1009" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D1009.
Actually thrown D1009.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product{$."Product Name": Price, $."Product Name": Price}'
]]></output>
                </test-case>
                <test-case id="0-2259" name="object-constructor.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="438455624" result="Passed" start-time="2025-01-14T17:31:20.7076947Z" end-time="2025-01-14T17:31:20.7079154Z" duration="0.000221" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product{`Product Name`: Price, SKU: Price}';&#xA; result: {&quot;Bowler Hat&quot;:[34.45,34.45],&quot;0406654608&quot;:34.45,&quot;Trilby hat&quot;:21.67,&quot;0406634348&quot;:21.67,&quot;040657863&quot;:34.45,&quot;Cloak&quot;:107.99,&quot;0406654603&quot;:107.99}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product{`Product Name`: Price, SKU: Price}'
Result: '{"Bowler Hat":[34.45,34.45],"0406654608":34.45,"Trilby hat":21.67,"0406634348":21.67,"040657863":34.45,"Cloak":107.99,"0406654603":107.99}'
Expected: '{"Bowler Hat":[34.45,34.45],"0406654608":34.45,"Trilby hat":21.67,"0406634348":21.67,"040657863":34.45,"Cloak":107.99,"0406654603":107.99}'
]]></output>
                </test-case>
                <test-case id="0-2260" name="object-constructor.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2075265156" result="Passed" start-time="2025-01-14T17:31:20.7079268Z" end-time="2025-01-14T17:31:20.7081487Z" duration="0.000222" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order{  OrderID: {    &quot;TotalPrice&quot;:$sum(Product.(Price * Quantity)),    &quot;Items&quot;: Product.&quot;Product Name&quot;  }}';&#xA; result: {&quot;order103&quot;:{&quot;TotalPrice&quot;:90.57000000000001,&quot;Items&quot;:[&quot;Bowler Hat&quot;,&quot;Trilby hat&quot;]},&quot;order104&quot;:{&quot;TotalPrice&quot;:245.79000000000002,&quot;Items&quot;:[&quot;Bowler Hat&quot;,&quot;Cloak&quot;]}}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order{  OrderID: {    "TotalPrice":$sum(Product.(Price * Quantity)),    "Items": Product."Product Name"  }}'
Result: '{"order103":{"TotalPrice":90.57,"Items":["Bowler Hat","Trilby hat"]},"order104":{"TotalPrice":245.79,"Items":["Bowler Hat","Cloak"]}}'
Expected: '{"order103":{"TotalPrice":90.57000000000001,"Items":["Bowler Hat","Trilby hat"]},"order104":{"TotalPrice":245.79000000000002,"Items":["Bowler Hat","Cloak"]}}'
]]></output>
                </test-case>
                <test-case id="0-2261" name="object-constructor.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1721096194" result="Passed" start-time="2025-01-14T17:31:20.7081617Z" end-time="2025-01-14T17:31:20.7085405Z" duration="0.000379" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{  &quot;Order&quot;: Account.Order.{      &quot;ID&quot;: OrderID,      &quot;Product&quot;: Product.{          &quot;Name&quot;: $.&quot;Product Name&quot;,          &quot;SKU&quot;: ProductID,          &quot;Details&quot;: {            &quot;Weight&quot;: Description.Weight,            &quot;Dimensions&quot;: Description.(Width &amp; &quot; x &quot; &amp; Height &amp; &quot; x &quot; &amp; Depth)          }        },      &quot;Total Price&quot;: $sum(Product.(Price * Quantity))    }}';&#xA; result: {&quot;Order&quot;:[{&quot;ID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;Name&quot;:&quot;Trilby hat&quot;,&quot;SKU&quot;:858236,&quot;Details&quot;:{&quot;Weight&quot;:0.6,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}}],&quot;Total Price&quot;:90.57000000000001},{&quot;ID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;Name&quot;:&quot;Cloak&quot;,&quot;SKU&quot;:345664,&quot;Details&quot;:{&quot;Weight&quot;:2,&quot;Dimensions&quot;:&quot;30 x 20 x 210&quot;}}],&quot;Total Price&quot;:245.79000000000002}]}" />
                  </properties>
                  <output><![CDATA[Expr is '{  "Order": Account.Order.{      "ID": OrderID,      "Product": Product.{          "Name": $."Product Name",          "SKU": ProductID,          "Details": {            "Weight": Description.Weight,            "Dimensions": Description.(Width & " x " & Height & " x " & Depth)          }        },      "Total Price": $sum(Product.(Price * Quantity))    }}'
Result: '{"Order":[{"ID":"order103","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Trilby hat","SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57},{"ID":"order104","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Cloak","SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79}]}'
Expected: '{"Order":[{"ID":"order103","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Trilby hat","SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57000000000001},{"ID":"order104","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Cloak","SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79000000000002}]}'
]]></output>
                </test-case>
                <test-case id="0-2262" name="object-constructor.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1443958665" result="Passed" start-time="2025-01-14T17:31:20.7085533Z" end-time="2025-01-14T17:31:20.7088828Z" duration="0.000330" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{  &quot;Order&quot;: Account.Order.{      &quot;ID&quot;: OrderID,      &quot;Product&quot;: Product.{          &quot;Name&quot;: `Product Name`,          &quot;SKU&quot;: ProductID,          &quot;Details&quot;: {            &quot;Weight&quot;: Description.Weight,            &quot;Dimensions&quot;: Description.(Width &amp; &quot; x &quot; &amp; Height &amp; &quot; x &quot; &amp; Depth)          }        },      &quot;Total Price&quot;: $sum(Product.(Price * Quantity))    }}';&#xA; result: {&quot;Order&quot;:[{&quot;ID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;Name&quot;:&quot;Trilby hat&quot;,&quot;SKU&quot;:858236,&quot;Details&quot;:{&quot;Weight&quot;:0.6,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}}],&quot;Total Price&quot;:90.57000000000001},{&quot;ID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;Name&quot;:&quot;Cloak&quot;,&quot;SKU&quot;:345664,&quot;Details&quot;:{&quot;Weight&quot;:2,&quot;Dimensions&quot;:&quot;30 x 20 x 210&quot;}}],&quot;Total Price&quot;:245.79000000000002}]}" />
                  </properties>
                  <output><![CDATA[Expr is '{  "Order": Account.Order.{      "ID": OrderID,      "Product": Product.{          "Name": `Product Name`,          "SKU": ProductID,          "Details": {            "Weight": Description.Weight,            "Dimensions": Description.(Width & " x " & Height & " x " & Depth)          }        },      "Total Price": $sum(Product.(Price * Quantity))    }}'
Result: '{"Order":[{"ID":"order103","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Trilby hat","SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57},{"ID":"order104","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Cloak","SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79}]}'
Expected: '{"Order":[{"ID":"order103","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Trilby hat","SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57000000000001},{"ID":"order104","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Cloak","SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79000000000002}]}'
]]></output>
                </test-case>
                <test-case id="0-2263" name="object-constructor.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="935191966" result="Passed" start-time="2025-01-14T17:31:20.7088932Z" end-time="2025-01-14T17:31:20.7090330Z" duration="0.000140" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone{type: $join(number, &quot;, &quot;), &quot;phone&quot;:number}';&#xA; result: {&quot;home&quot;:&quot;0203 544 1234&quot;,&quot;phone&quot;:[&quot;0203 544 1234&quot;,&quot;01962 001234&quot;,&quot;01962 001235&quot;,&quot;077 7700 1234&quot;],&quot;office&quot;:&quot;01962 001234, 01962 001235&quot;,&quot;mobile&quot;:&quot;077 7700 1234&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone{type: $join(number, ", "), "phone":number}'
Result: '{"home":"0203 544 1234","phone":["0203 544 1234","01962 001234","01962 001235","077 7700 1234"],"office":"01962 001234, 01962 001235","mobile":"077 7700 1234"}'
Expected: '{"home":"0203 544 1234","phone":["0203 544 1234","01962 001234","01962 001235","077 7700 1234"],"office":"01962 001234, 01962 001235","mobile":"077 7700 1234"}'
]]></output>
                </test-case>
                <test-case id="0-2264" name="object-constructor.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="804105608" result="Passed" start-time="2025-01-14T17:31:20.7090417Z" end-time="2025-01-14T17:31:20.7094993Z" duration="0.000458" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.{ type: $average(value), kind: $sum(value) } ';&#xA; result: error D1009" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D1009.
Actually thrown D1009.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.{ type: $average(value), kind: $sum(value) } '
]]></output>
                </test-case>
                <test-case id="0-2265" name="object-constructor.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="746144807" result="Passed" start-time="2025-01-14T17:31:20.7095127Z" end-time="2025-01-14T17:31:20.7097687Z" duration="0.000256" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '{ type: $average(value), kind: $sum(value) } ';&#xA; result: error T1003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1003.
Actually thrown T1003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '{ type: $average(value), kind: $sum(value) } '
]]></output>
                </test-case>
                <test-case id="0-2266" name="object-constructor.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1821787324" result="Passed" start-time="2025-01-14T17:31:20.7097804Z" end-time="2025-01-14T17:31:20.7110538Z" duration="0.001274" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$each(jsonata, λ($v, $k){&#xD;&#xA;{&#xD;&#xA;  'date': $k,&#xD;&#xA;  'count': $v&#xD;&#xA;}&#xD;&#xA;}){&#xD;&#xA;  $substring(date, 0, 7): $sum(count)&#xD;&#xA;}&#xD;&#xA;';&#xA; result: {&quot;2019-01&quot;:68281,&quot;2019-02&quot;:63672,&quot;2019-03&quot;:78625,&quot;2019-04&quot;:76505,&quot;2019-05&quot;:129360,&quot;2019-06&quot;:484244,&quot;2019-07&quot;:698748,&quot;2019-08&quot;:788322}" />
                  </properties>
                  <output><![CDATA[Expr is '$each(jsonata, λ($v, $k){
{
  'date': $k,
  'count': $v
}
}){
  $substring(date, 0, 7): $sum(count)
}
'
Result: '{"2019-01":68281,"2019-02":63672,"2019-03":78625,"2019-04":76505,"2019-05":129360,"2019-06":484244,"2019-07":698748,"2019-08":788322}'
Expected: '{"2019-01":68281,"2019-02":63672,"2019-03":78625,"2019-04":76505,"2019-05":129360,"2019-06":484244,"2019-07":698748,"2019-08":788322}'
]]></output>
                </test-case>
                <test-case id="0-2267" name="parent-operator.errors[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1101939476" result="Passed" start-time="2025-01-14T17:31:20.7110707Z" end-time="2025-01-14T17:31:20.7115934Z" duration="0.000523" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '{'hello': 'world'}.% ';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '{'hello': 'world'}.% '
]]></output>
                </test-case>
                <test-case id="0-2268" name="parent-operator.errors[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1338190910" result="Passed" start-time="2025-01-14T17:31:20.7116053Z" end-time="2025-01-14T17:31:20.7118681Z" duration="0.000263" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '%';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '%'
]]></output>
                </test-case>
                <test-case id="0-2269" name="parent-operator.errors[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1186424100" result="Passed" start-time="2025-01-14T17:31:20.7118792Z" end-time="2025-01-14T17:31:20.7121429Z" duration="0.000264" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '%()';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '%()'
]]></output>
                </test-case>
                <test-case id="0-2270" name="parent-operator.errors[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1869849875" result="Passed" start-time="2025-01-14T17:31:20.7121533Z" end-time="2025-01-14T17:31:20.7123978Z" duration="0.000245" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '%(1)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '%(1)'
]]></output>
                </test-case>
                <test-case id="0-2271" name="parent-operator.errors[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1543256623" result="Passed" start-time="2025-01-14T17:31:20.7124073Z" end-time="2025-01-14T17:31:20.7125748Z" duration="0.000168" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '%%';&#xA; result: error S0207" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0207.
Actually thrown S0207.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '%%'
]]></output>
                </test-case>
                <test-case id="0-2272" name="parent-operator.errors[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="428041085" result="Passed" start-time="2025-01-14T17:31:20.7125830Z" end-time="2025-01-14T17:31:20.7128633Z" duration="0.000281" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(%)';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '(%)'
]]></output>
                </test-case>
                <test-case id="0-2273" name="parent-operator.errors[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1945805398" result="Passed" start-time="2025-01-14T17:31:20.7128744Z" end-time="2025-01-14T17:31:20.7131072Z" duration="0.000233" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(%%)';&#xA; result: error S0211" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0211.
Actually thrown S0211.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '(%%)'
]]></output>
                </test-case>
                <test-case id="0-2274" name="parent-operator.errors[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1068814511" result="Passed" start-time="2025-01-14T17:31:20.7131171Z" end-time="2025-01-14T17:31:20.7134052Z" duration="0.000288" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans.%%';&#xA; result: error S0207" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0207.
Actually thrown S0207.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans.%%'
]]></output>
                </test-case>
                <test-case id="0-2275" name="parent-operator.errors[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1600983958" result="Passed" start-time="2025-01-14T17:31:20.7134168Z" end-time="2025-01-14T17:31:20.7137261Z" duration="0.000310" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.%';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.%'
]]></output>
                </test-case>
                <test-case id="0-2276" name="parent-operator.errors[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1427695190" result="Passed" start-time="2025-01-14T17:31:20.7137394Z" end-time="2025-01-14T17:31:20.7140793Z" duration="0.000340" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$$.%';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$$.%'
]]></output>
                </test-case>
                <test-case id="0-2277" name="parent-operator.errors[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="152095394" result="Passed" start-time="2025-01-14T17:31:20.7140913Z" end-time="2025-01-14T17:31:20.7143533Z" duration="0.000262" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans.%.%.%';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans.%.%.%'
]]></output>
                </test-case>
                <test-case id="0-2278" name="parent-operator.errors[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="377059029" result="Passed" start-time="2025-01-14T17:31:20.7143657Z" end-time="2025-01-14T17:31:20.7147008Z" duration="0.000335" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.%%%';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.%%%'
]]></output>
                </test-case>
                <test-case id="0-2279" name="parent-operator.errors[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="874365290" result="Passed" start-time="2025-01-14T17:31:20.7147115Z" end-time="2025-01-14T17:31:20.7151043Z" duration="0.000393" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.(%%%)';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.(%%%)'
]]></output>
                </test-case>
                <test-case id="0-2280" name="parent-operator.errors[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="913926156" result="Passed" start-time="2025-01-14T17:31:20.7151174Z" end-time="2025-01-14T17:31:20.7154751Z" duration="0.000358" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.(%% %)';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.(%% %)'
]]></output>
                </test-case>
                <test-case id="0-2281" name="parent-operator.errors[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2059237490" result="Passed" start-time="2025-01-14T17:31:20.7154888Z" end-time="2025-01-14T17:31:20.7158672Z" duration="0.000379" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.(% %%)';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.(% %%)'
]]></output>
                </test-case>
                <test-case id="0-2282" name="parent-operator.errors[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1098101168" result="Passed" start-time="2025-01-14T17:31:20.7158965Z" end-time="2025-01-14T17:31:20.7162644Z" duration="0.000368" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.(% % %)';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.(% % %)'
]]></output>
                </test-case>
                <test-case id="0-2283" name="parent-operator.parent[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1963238578" result="Passed" start-time="2025-01-14T17:31:20.7162799Z" end-time="2025-01-14T17:31:20.7165895Z" duration="0.000310" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{&#xD;&#xA;  &quot;order&quot;: %.OrderID,&#xD;&#xA;  &quot;Product&quot;: `Product Name`,&#xD;&#xA;  &quot;Weight&quot;: Description.Weight&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;order&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Weight&quot;:0.75},{&quot;order&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Weight&quot;:0.6},{&quot;order&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Weight&quot;:0.75},{&quot;order&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;Cloak&quot;,&quot;Weight&quot;:2}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{
  "order": %.OrderID,
  "Product": `Product Name`,
  "Weight": Description.Weight
}
'
Result: '[{"order":"order103","Product":"Bowler Hat","Weight":0.75},{"order":"order103","Product":"Trilby hat","Weight":0.6},{"order":"order104","Product":"Bowler Hat","Weight":0.75},{"order":"order104","Product":"Cloak","Weight":2}]'
Expected: '[{"order":"order103","Product":"Bowler Hat","Weight":0.75},{"order":"order103","Product":"Trilby hat","Weight":0.6},{"order":"order104","Product":"Bowler Hat","Weight":0.75},{"order":"order104","Product":"Cloak","Weight":2}]'
]]></output>
                </test-case>
                <test-case id="0-2284" name="parent-operator.parent[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="4537464" result="Passed" start-time="2025-01-14T17:31:20.7166031Z" end-time="2025-01-14T17:31:20.7180366Z" duration="0.001434" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.(Order.Product).{&#xD;&#xA;  &quot;order&quot;: %.OrderID,&#xD;&#xA;  &quot;Product&quot;: `Product Name`,&#xD;&#xA;  &quot;Weight&quot;: Description.Weight&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;order&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Weight&quot;:0.75},{&quot;order&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Weight&quot;:0.6},{&quot;order&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Weight&quot;:0.75},{&quot;order&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;Cloak&quot;,&quot;Weight&quot;:2}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.(Order.Product).{
  "order": %.OrderID,
  "Product": `Product Name`,
  "Weight": Description.Weight
}
'
Result: '[{"order":"order103","Product":"Bowler Hat","Weight":0.75},{"order":"order103","Product":"Trilby hat","Weight":0.6},{"order":"order104","Product":"Bowler Hat","Weight":0.75},{"order":"order104","Product":"Cloak","Weight":2}]'
Expected: '[{"order":"order103","Product":"Bowler Hat","Weight":0.75},{"order":"order103","Product":"Trilby hat","Weight":0.6},{"order":"order104","Product":"Bowler Hat","Weight":0.75},{"order":"order104","Product":"Cloak","Weight":2}]'
]]></output>
                </test-case>
                <test-case id="0-2285" name="parent-operator.parent[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1806227032" result="Failed" start-time="2025-01-14T17:31:20.7180495Z" end-time="2025-01-14T17:31:20.7186255Z" duration="0.000576" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.[`Product Name`, %.OrderID]';&#xA; result: [&quot;Bowler Hat&quot;,&quot;order103&quot;,&quot;Trilby hat&quot;,&quot;order103&quot;,&quot;Bowler Hat&quot;,&quot;order104&quot;,&quot;Cloak&quot;,&quot;order104&quot;]" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '["Bowler Hat","order103","Trilby hat","order103","Bowler Hat","order104","Cloak","order104"]', got '[["Bowler Hat","order103"],["Trilby hat","order103"],["Bowler Hat","order104"],["Cloak","order104"]]'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is 'Account.Order.Product.[`Product Name`, %.OrderID]'
Result: '[["Bowler Hat","order103"],["Trilby hat","order103"],["Bowler Hat","order104"],["Cloak","order104"]]'
Expected: '["Bowler Hat","order103","Trilby hat","order103","Bowler Hat","order104","Cloak","order104"]'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '["Bowler Hat","order103","Trilby hat","order103","Bowler Hat","order104","Cloak","order104"]', got '[["Bowler Hat","order103"],["Trilby hat","order103"],["Bowler Hat","order104"],["Cloak","order104"]]'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2286" name="parent-operator.parent[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1047786343" result="Passed" start-time="2025-01-14T17:31:20.7186372Z" end-time="2025-01-14T17:31:20.7188009Z" duration="0.000164" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{ `Product Name`: [Quantity, %.OrderID] }';&#xA; result: [{&quot;Bowler Hat&quot;:[2,&quot;order103&quot;]},{&quot;Trilby hat&quot;:[1,&quot;order103&quot;]},{&quot;Bowler Hat&quot;:[4,&quot;order104&quot;]},{&quot;Cloak&quot;:[1,&quot;order104&quot;]}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{ `Product Name`: [Quantity, %.OrderID] }'
Result: '[{"Bowler Hat":[2,"order103"]},{"Trilby hat":[1,"order103"]},{"Bowler Hat":[4,"order104"]},{"Cloak":[1,"order104"]}]'
Expected: '[{"Bowler Hat":[2,"order103"]},{"Trilby hat":[1,"order103"]},{"Bowler Hat":[4,"order104"]},{"Cloak":[1,"order104"]}]'
]]></output>
                </test-case>
                <test-case id="0-2287" name="parent-operator.parent[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1578101325" result="Passed" start-time="2025-01-14T17:31:20.7188106Z" end-time="2025-01-14T17:31:20.7189713Z" duration="0.000161" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{ `Product Name`: [Quantity, (%.OrderID)] }';&#xA; result: [{&quot;Bowler Hat&quot;:[2,&quot;order103&quot;]},{&quot;Trilby hat&quot;:[1,&quot;order103&quot;]},{&quot;Bowler Hat&quot;:[4,&quot;order104&quot;]},{&quot;Cloak&quot;:[1,&quot;order104&quot;]}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{ `Product Name`: [Quantity, (%.OrderID)] }'
Result: '[{"Bowler Hat":[2,"order103"]},{"Trilby hat":[1,"order103"]},{"Bowler Hat":[4,"order104"]},{"Cloak":[1,"order104"]}]'
Expected: '[{"Bowler Hat":[2,"order103"]},{"Trilby hat":[1,"order103"]},{"Bowler Hat":[4,"order104"]},{"Cloak":[1,"order104"]}]'
]]></output>
                </test-case>
                <test-case id="0-2288" name="parent-operator.parent[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1291959630" result="Passed" start-time="2025-01-14T17:31:20.7189813Z" end-time="2025-01-14T17:31:20.7190968Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[%.OrderID='order104'].SKU';&#xA; result: [&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[%.OrderID='order104'].SKU'
Result: '["040657863","0406654603"]'
Expected: '["040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2289" name="parent-operator.parent[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1826580099" result="Passed" start-time="2025-01-14T17:31:20.7191045Z" end-time="2025-01-14T17:31:20.7192077Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[%.%.`Account Name`='Firefly'].SKU';&#xA; result: [&quot;0406654608&quot;,&quot;0406634348&quot;,&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[%.%.`Account Name`='Firefly'].SKU'
Result: '["0406654608","0406634348","040657863","0406654603"]'
Expected: '["0406654608","0406634348","040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2290" name="parent-operator.parent[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="115902343" result="Passed" start-time="2025-01-14T17:31:20.7192148Z" end-time="2025-01-14T17:31:20.7193218Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price[%.%.OrderID='order103']';&#xA; result: [34.45,21.67]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price[%.%.OrderID='order103']'
Result: '[34.45,21.67]'
Expected: '[34.45,21.67]'
]]></output>
                </test-case>
                <test-case id="0-2291" name="parent-operator.parent[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="736157527" result="Passed" start-time="2025-01-14T17:31:20.7193291Z" end-time="2025-01-14T17:31:20.7194332Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price.%[%.OrderID='order103'].SKU';&#xA; result: [&quot;0406654608&quot;,&quot;0406634348&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price.%[%.OrderID='order103'].SKU'
Result: '["0406654608","0406634348"]'
Expected: '["0406654608","0406634348"]'
]]></output>
                </test-case>
                <test-case id="0-2292" name="parent-operator.parent[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="173235308" result="Passed" start-time="2025-01-14T17:31:20.7194403Z" end-time="2025-01-14T17:31:20.7195616Z" duration="0.000121" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[%.OrderID='order104'][%.%.`Account Name`='Firefly'].SKU';&#xA; result: [&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[%.OrderID='order104'][%.%.`Account Name`='Firefly'].SKU'
Result: '["040657863","0406654603"]'
Expected: '["040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2293" name="parent-operator.parent[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="418460595" result="Passed" start-time="2025-01-14T17:31:20.7195714Z" end-time="2025-01-14T17:31:20.7197341Z" duration="0.000163" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(Account.Order.Product)[%.OrderID='order104'].SKU';&#xA; result: [&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '(Account.Order.Product)[%.OrderID='order104'].SKU'
Result: '["040657863","0406654603"]'
Expected: '["040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2294" name="parent-operator.parent[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="721273898" result="Passed" start-time="2025-01-14T17:31:20.7197438Z" end-time="2025-01-14T17:31:20.7198999Z" duration="0.000156" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{ %.OrderID: Price * Quantity }';&#xA; result: [{&quot;order103&quot;:68.9},{&quot;order103&quot;:21.67},{&quot;order104&quot;:137.8},{&quot;order104&quot;:107.99}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{ %.OrderID: Price * Quantity }'
Result: '[{"order103":68.9},{"order103":21.67},{"order104":137.8},{"order104":107.99}]'
Expected: '[{"order103":68.9},{"order103":21.67},{"order104":137.8},{"order104":107.99}]'
]]></output>
                </test-case>
                <test-case id="0-2295" name="parent-operator.parent[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="345985892" result="Passed" start-time="2025-01-14T17:31:20.7199113Z" end-time="2025-01-14T17:31:20.7200157Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.().%';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.().%'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2296" name="parent-operator.parent[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="711644622" result="Passed" start-time="2025-01-14T17:31:20.7200251Z" end-time="2025-01-14T17:31:20.7201966Z" duration="0.000172" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{&#xD;&#xA;  'Product': `Product Name`,&#xD;&#xA;  'Order': %.OrderID,&#xD;&#xA;  'Account': %.%.`Account Name`&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{
  'Product': `Product Name`,
  'Order': %.OrderID,
  'Account': %.%.`Account Name`
}
'
Result: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
Expected: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
]]></output>
                </test-case>
                <test-case id="0-2297" name="parent-operator.parent[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="436700851" result="Passed" start-time="2025-01-14T17:31:20.7202076Z" end-time="2025-01-14T17:31:20.7203713Z" duration="0.000164" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(Product).{&#xD;&#xA;  'Product': `Product Name`,&#xD;&#xA;  'Order': %.OrderID,&#xD;&#xA;  'Account': %.%.`Account Name`&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(Product).{
  'Product': `Product Name`,
  'Order': %.OrderID,
  'Account': %.%.`Account Name`
}
'
Result: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
Expected: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
]]></output>
                </test-case>
                <test-case id="0-2298" name="parent-operator.parent[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1618231863" result="Passed" start-time="2025-01-14T17:31:20.7203814Z" end-time="2025-01-14T17:31:20.7205416Z" duration="0.000160" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.(Order.(Product)).{&#xD;&#xA;  'Product': `Product Name`,&#xD;&#xA;  'Order': %.OrderID,&#xD;&#xA;  'Account': %.%.`Account Name`&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.(Order.(Product)).{
  'Product': `Product Name`,
  'Order': %.OrderID,
  'Account': %.%.`Account Name`
}
'
Result: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
Expected: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
]]></output>
                </test-case>
                <test-case id="0-2299" name="parent-operator.parent[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="508890847" result="Passed" start-time="2025-01-14T17:31:20.7205506Z" end-time="2025-01-14T17:31:20.7206915Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.(Order).(Product).{&#xD;&#xA;  'Product': `Product Name`,&#xD;&#xA;  'Order': %.OrderID,&#xD;&#xA;  'Account': %.%.`Account Name`&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.(Order).(Product).{
  'Product': `Product Name`,
  'Order': %.OrderID,
  'Account': %.%.`Account Name`
}
'
Result: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
Expected: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
]]></output>
                </test-case>
                <test-case id="0-2300" name="parent-operator.parent[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="718821099" result="Passed" start-time="2025-01-14T17:31:20.7208461Z" end-time="2025-01-14T17:31:20.7210770Z" duration="0.000231" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(Account.Order).(Product).{&#xD;&#xA;  'Product': `Product Name`,&#xD;&#xA;  'Order': %.OrderID,&#xD;&#xA;  'Account': %.%.`Account Name`&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is '(Account.Order).(Product).{
  'Product': `Product Name`,
  'Order': %.OrderID,
  'Account': %.%.`Account Name`
}
'
Result: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
Expected: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
]]></output>
                </test-case>
                <test-case id="0-2301" name="parent-operator.parent[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1667900479" result="Passed" start-time="2025-01-14T17:31:20.7211248Z" end-time="2025-01-14T17:31:20.7233916Z" duration="0.002267" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.SKU^(%.Price)';&#xA; result: [&quot;0406634348&quot;,&quot;0406654608&quot;,&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.SKU^(%.Price)'
Result: '["0406634348","0406654608","040657863","0406654603"]'
Expected: '["0406634348","0406654608","040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2302" name="parent-operator.parent[20]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[20]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1215453084" result="Passed" start-time="2025-01-14T17:31:20.7234163Z" end-time="2025-01-14T17:31:20.7236814Z" duration="0.000265" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.SKU^(%.Price, &gt;%.%.OrderID)';&#xA; result: [&quot;0406634348&quot;,&quot;040657863&quot;,&quot;0406654608&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.SKU^(%.Price, >%.%.OrderID)'
Result: '["0406634348","040657863","0406654608","0406654603"]'
Expected: '["0406634348","040657863","0406654608","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2303" name="parent-operator.parent[21]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[21]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1624547329" result="Passed" start-time="2025-01-14T17:31:20.7236946Z" end-time="2025-01-14T17:31:20.7238818Z" duration="0.000187" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Description.{ 'Colour': Colour, 'Total': %.Price * %.Quantity }';&#xA; result: [{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Total&quot;:68.9},{&quot;Colour&quot;:&quot;Orange&quot;,&quot;Total&quot;:21.67},{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Total&quot;:137.8},{&quot;Colour&quot;:&quot;Black&quot;,&quot;Total&quot;:107.99}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Description.{ 'Colour': Colour, 'Total': %.Price * %.Quantity }'
Result: '[{"Colour":"Purple","Total":68.9},{"Colour":"Orange","Total":21.67},{"Colour":"Purple","Total":137.8},{"Colour":"Black","Total":107.99}]'
Expected: '[{"Colour":"Purple","Total":68.9},{"Colour":"Orange","Total":21.67},{"Colour":"Purple","Total":137.8},{"Colour":"Black","Total":107.99}]'
]]></output>
                </test-case>
                <test-case id="0-2304" name="parent-operator.parent[22]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[22]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="137946576" result="Passed" start-time="2025-01-14T17:31:20.7238904Z" end-time="2025-01-14T17:31:20.7240671Z" duration="0.000177" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Description.{ 'Item': Colour &amp; ' ' &amp; %.`Product Name`, 'Discounted': (%.%.OrderID = 'order103') ? %.Price / 2 : %.Price }';&#xA; result: [{&quot;Item&quot;:&quot;Purple Bowler Hat&quot;,&quot;Discounted&quot;:17.225},{&quot;Item&quot;:&quot;Orange Trilby hat&quot;,&quot;Discounted&quot;:10.835},{&quot;Item&quot;:&quot;Purple Bowler Hat&quot;,&quot;Discounted&quot;:34.45},{&quot;Item&quot;:&quot;Black Cloak&quot;,&quot;Discounted&quot;:107.99}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Description.{ 'Item': Colour & ' ' & %.`Product Name`, 'Discounted': (%.%.OrderID = 'order103') ? %.Price / 2 : %.Price }'
Result: '[{"Item":"Purple Bowler Hat","Discounted":17.225},{"Item":"Orange Trilby hat","Discounted":10.835},{"Item":"Purple Bowler Hat","Discounted":34.45},{"Item":"Black Cloak","Discounted":107.99}]'
Expected: '[{"Item":"Purple Bowler Hat","Discounted":17.225},{"Item":"Orange Trilby hat","Discounted":10.835},{"Item":"Purple Bowler Hat","Discounted":34.45},{"Item":"Black Cloak","Discounted":107.99}]'
]]></output>
                </test-case>
                <test-case id="0-2305" name="parent-operator.parent[23]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[23]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1814766652" result="Passed" start-time="2025-01-14T17:31:20.7240752Z" end-time="2025-01-14T17:31:20.7241808Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.( $parent := %; %.OrderID )';&#xA; result: [&quot;order103&quot;,&quot;order103&quot;,&quot;order104&quot;,&quot;order104&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.( $parent := %; %.OrderID )'
Result: '["order103","order103","order104","order104"]'
Expected: '["order103","order103","order104","order104"]'
]]></output>
                </test-case>
                <test-case id="0-2306" name="parent-operator.parent[24]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[24]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="624605119" result="Passed" start-time="2025-01-14T17:31:20.7241880Z" end-time="2025-01-14T17:31:20.7243082Z" duration="0.000120" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.( $parent := %; $parent.OrderID )';&#xA; result: [&quot;order103&quot;,&quot;order103&quot;,&quot;order104&quot;,&quot;order104&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.( $parent := %; $parent.OrderID )'
Result: '["order103","order103","order104","order104"]'
Expected: '["order103","order103","order104","order104"]'
]]></output>
                </test-case>
                <test-case id="0-2307" name="parent-operator.parent[25]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[25]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="906242406" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.7243438Z" end-time="2025-01-14T17:31:20.7248084Z" duration="0.000465" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$L.books@$B[$L.isbn=$B.isbn].{ 'book': $B.title, 'parent': $keys(%) }';&#xA; result: [{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$L.books@$B[$L.isbn=$B.isbn].{ 'book': $B.title, 'parent': $keys(%) }'
]]></output>
                </test-case>
                <test-case id="0-2308" name="parent-operator.parent[26]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[26]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1783467622" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.7248196Z" end-time="2025-01-14T17:31:20.7250698Z" duration="0.000250" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%) }';&#xA; result: [{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Joe Doe&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%) }'
]]></output>
                </test-case>
                <test-case id="0-2309" name="parent-operator.parent[27]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[27]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="962751867" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.7250791Z" end-time="2025-01-14T17:31:20.7252895Z" duration="0.000211" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%.%) }';&#xA; result: [{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Joe Doe&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%.%) }'
]]></output>
                </test-case>
                <test-case id="0-2310" name="parent-operator.parent[28]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[28]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1978600153" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:20.7252983Z" end-time="2025-01-14T17:31:20.7255237Z" duration="0.000226" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers@$C[$C.id=$L.customer].{ 'book': $B.title, 'customer': $C.name, 'grandparent': $keys(%.%) }';&#xA; result: [{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Joe Doe&quot;,&quot;grandparent&quot;:&quot;library&quot;},{&quot;book&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;grandparent&quot;:&quot;library&quot;},{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;grandparent&quot;:&quot;library&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers@$C[$C.id=$L.customer].{ 'book': $B.title, 'customer': $C.name, 'grandparent': $keys(%.%) }'
]]></output>
                </test-case>
                <test-case id="0-2311" name="parentheses.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1399678487" result="Passed" start-time="2025-01-14T17:31:20.7255333Z" end-time="2025-01-14T17:31:20.7256355Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.(blah).baz.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.(blah).baz.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2312" name="parentheses.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="128459583" result="Passed" start-time="2025-01-14T17:31:20.7256430Z" end-time="2025-01-14T17:31:20.7257865Z" duration="0.000144" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.(blah.baz).fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.(blah.baz).fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2313" name="parentheses.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1929717087" result="Passed" start-time="2025-01-14T17:31:20.7257999Z" end-time="2025-01-14T17:31:20.7259405Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz).fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz).fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2314" name="parentheses.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1672013115" result="Passed" start-time="2025-01-14T17:31:20.7259516Z" end-time="2025-01-14T17:31:20.7260816Z" duration="0.000130" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.(baz.fud)';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.(baz.fud)'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2315" name="parentheses.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="16027666" result="Passed" start-time="2025-01-14T17:31:20.7261107Z" end-time="2025-01-14T17:31:20.7262317Z" duration="0.000121" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2316" name="parentheses.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="622995026" result="Passed" start-time="2025-01-14T17:31:20.7262409Z" end-time="2025-01-14T17:31:20.7263444Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo).(blah).baz.(fud)';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '(foo).(blah).baz.(fud)'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2317" name="parentheses.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1628203734" result="Passed" start-time="2025-01-14T17:31:20.7263525Z" end-time="2025-01-14T17:31:20.7264555Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.(blah).baz.fud)';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.(blah).baz.fud)'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2318" name="parentheses.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="930654502" result="Passed" start-time="2025-01-14T17:31:20.7264901Z" end-time="2025-01-14T17:31:20.7266103Z" duration="0.000120" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(4 + 2) / 2';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '(4 + 2) / 2'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-2319" name="partial-application.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.partial-application.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1145362223" result="Passed" start-time="2025-01-14T17:31:20.7266218Z" end-time="2025-01-14T17:31:20.7268196Z" duration="0.000198" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $add := function($x, $y){$x+$y};  $add2 := $add(?, 2);  $add2(3))';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '(  $add := function($x, $y){$x+$y};  $add2 := $add(?, 2);  $add2(3))'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2320" name="partial-application.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.partial-application.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1845842111" result="Passed" start-time="2025-01-14T17:31:20.7268312Z" end-time="2025-01-14T17:31:20.7270463Z" duration="0.000215" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $add := function($x, $y){$x+$y};  $add2 := $add(2, ?);  $add2(4))';&#xA; result: 6" />
                  </properties>
                  <output><![CDATA[Expr is '(  $add := function($x, $y){$x+$y};  $add2 := $add(2, ?);  $add2(4))'
Result: '6'
Expected: '6'
]]></output>
                </test-case>
                <test-case id="0-2321" name="partial-application.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.partial-application.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="243685999" result="Passed" start-time="2025-01-14T17:31:20.7270583Z" end-time="2025-01-14T17:31:20.7272066Z" duration="0.000148" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $firstn := $substring(?, 0, ?);  $first5 := $firstn(?, 5);  $first5(&quot;Hello World&quot;))';&#xA; result: &quot;Hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(  $firstn := $substring(?, 0, ?);  $first5 := $firstn(?, 5);  $first5("Hello World"))'
Result: '"Hello"'
Expected: '"Hello"'
]]></output>
                </test-case>
                <test-case id="0-2322" name="partial-application.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.partial-application.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1957463493" result="Passed" start-time="2025-01-14T17:31:20.7272180Z" end-time="2025-01-14T17:31:20.7276659Z" duration="0.000448" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'substring(?, 0, ?)';&#xA; result: error T1007" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1007.
Actually thrown T1008.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'substring(?, 0, ?)'
]]></output>
                </test-case>
                <test-case id="0-2323" name="partial-application.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.partial-application.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1659094458" result="Passed" start-time="2025-01-14T17:31:20.7276809Z" end-time="2025-01-14T17:31:20.7281967Z" duration="0.000516" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'unknown(?)';&#xA; result: error T1008" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1008.
Actually thrown T1008.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'unknown(?)'
]]></output>
                </test-case>
                <test-case id="0-2324" name="predicates.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.predicates.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1070521757" result="Passed" start-time="2025-01-14T17:31:20.7282238Z" end-time="2025-01-14T17:31:20.7284221Z" duration="0.000198" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nothing[x=6][y=3].number';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'nothing[x=6][y=3].number'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2325" name="predicates.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.predicates.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1133692348" result="Passed" start-time="2025-01-14T17:31:20.7284347Z" end-time="2025-01-14T17:31:20.7285808Z" duration="0.000146" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'clues[x=6][y=3].number';&#xA; result: 7" />
                  </properties>
                  <output><![CDATA[Expr is 'clues[x=6][y=3].number'
Result: '7'
Expected: '7'
]]></output>
                </test-case>
                <test-case id="0-2326" name="predicates.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.predicates.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1370021315" result="Passed" start-time="2025-01-14T17:31:20.7286060Z" end-time="2025-01-14T17:31:20.7287290Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[x=6][y=3].number';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$[x=6][y=3].number'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2327" name="predicates.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.predicates.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="9580490" result="Passed" start-time="2025-01-14T17:31:20.7287416Z" end-time="2025-01-14T17:31:20.7289275Z" duration="0.000186" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[$lowercase(Description.Colour) = &quot;purple&quot;][0].Price';&#xA; result: [34.45,34.45]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[$lowercase(Description.Colour) = "purple"][0].Price'
Result: '[34.45,34.45]'
Expected: '[34.45,34.45]'
]]></output>
                </test-case>
                <test-case id="0-2328" name="quoted-selectors.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1224531500" result="Passed" start-time="2025-01-14T17:31:20.7289666Z" end-time="2025-01-14T17:31:20.7291586Z" duration="0.000192" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.&quot;blah&quot;';&#xA; result: [{&quot;baz&quot;:{&quot;fud&quot;:&quot;hello&quot;}},{&quot;baz&quot;:{&quot;fud&quot;:&quot;world&quot;}},{&quot;bazz&quot;:&quot;gotcha&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo."blah"'
Result: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
Expected: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
]]></output>
                </test-case>
                <test-case id="0-2329" name="quoted-selectors.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="722828619" result="Passed" start-time="2025-01-14T17:31:20.7291717Z" end-time="2025-01-14T17:31:20.7293258Z" duration="0.000154" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.&quot;blah&quot;.baz.'fud'';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo."blah".baz.'fud''
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2330" name="quoted-selectors.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="889339336" result="Passed" start-time="2025-01-14T17:31:20.7293370Z" end-time="2025-01-14T17:31:20.7294439Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;foo&quot;.&quot;blah&quot;.&quot;baz&quot;.&quot;fud&quot;';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '"foo"."blah"."baz"."fud"'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2331" name="quoted-selectors.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="990994339" result="Passed" start-time="2025-01-14T17:31:20.7294537Z" end-time="2025-01-14T17:31:20.7295594Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.&quot;blah.baz&quot;';&#xA; result: &quot;here&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo."blah.baz"'
Result: '"here"'
Expected: '"here"'
]]></output>
                </test-case>
                <test-case id="0-2332" name="quoted-selectors.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="681347178" result="Passed" start-time="2025-01-14T17:31:20.7295695Z" end-time="2025-01-14T17:31:20.7296859Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.`blah`';&#xA; result: [{&quot;baz&quot;:{&quot;fud&quot;:&quot;hello&quot;}},{&quot;baz&quot;:{&quot;fud&quot;:&quot;world&quot;}},{&quot;bazz&quot;:&quot;gotcha&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.`blah`'
Result: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
Expected: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
]]></output>
                </test-case>
                <test-case id="0-2333" name="quoted-selectors.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2015651829" result="Passed" start-time="2025-01-14T17:31:20.7296969Z" end-time="2025-01-14T17:31:20.7297987Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.`blah`.baz.'fud'';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.`blah`.baz.'fud''
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2334" name="quoted-selectors.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="155544191" result="Passed" start-time="2025-01-14T17:31:20.7298083Z" end-time="2025-01-14T17:31:20.7299063Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '`foo`.`blah`.`baz`.`fud`';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '`foo`.`blah`.`baz`.`fud`'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2335" name="quoted-selectors.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1393509324" result="Passed" start-time="2025-01-14T17:31:20.7299169Z" end-time="2025-01-14T17:31:20.7300760Z" duration="0.000159" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.`blah.baz`';&#xA; result: &quot;here&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.`blah.baz`'
Result: '"here"'
Expected: '"here"'
]]></output>
                </test-case>
                <test-case id="0-2336" name="range-operator.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="843784406" result="Passed" start-time="2025-01-14T17:31:20.7300878Z" end-time="2025-01-14T17:31:20.7302156Z" duration="0.000128" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[0..9]';&#xA; result: [0,1,2,3,4,5,6,7,8,9]" />
                  </properties>
                  <output><![CDATA[Expr is '[0..9]'
Result: '[0,1,2,3,4,5,6,7,8,9]'
Expected: '[0,1,2,3,4,5,6,7,8,9]'
]]></output>
                </test-case>
                <test-case id="0-2337" name="range-operator.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1621037486" result="Passed" start-time="2025-01-14T17:31:20.7302273Z" end-time="2025-01-14T17:31:20.7303632Z" duration="0.000136" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[0..9][$ % 2 = 0]';&#xA; result: [0,2,4,6,8]" />
                  </properties>
                  <output><![CDATA[Expr is '[0..9][$ % 2 = 0]'
Result: '[0,2,4,6,8]'
Expected: '[0,2,4,6,8]'
]]></output>
                </test-case>
                <test-case id="0-2338" name="range-operator.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1825292002" result="Passed" start-time="2025-01-14T17:31:20.7303754Z" end-time="2025-01-14T17:31:20.7305040Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[0, 4..9, 20, 22]';&#xA; result: [0,4,5,6,7,8,9,20,22]" />
                  </properties>
                  <output><![CDATA[Expr is '[0, 4..9, 20, 22]'
Result: '[0,4,5,6,7,8,9,20,22]'
Expected: '[0,4,5,6,7,8,9,20,22]'
]]></output>
                </test-case>
                <test-case id="0-2339" name="range-operator.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="337254459" result="Passed" start-time="2025-01-14T17:31:20.7305151Z" end-time="2025-01-14T17:31:20.7306491Z" duration="0.000134" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[5..2]';&#xA; result: []" />
                  </properties>
                  <output><![CDATA[Expr is '[5..2]'
Result: '[]'
Expected: '[]'
]]></output>
                </test-case>
                <test-case id="0-2340" name="range-operator.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1181621913" result="Passed" start-time="2025-01-14T17:31:20.7306616Z" end-time="2025-01-14T17:31:20.7308039Z" duration="0.000142" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[5..2, 2..5]';&#xA; result: [2,3,4,5]" />
                  </properties>
                  <output><![CDATA[Expr is '[5..2, 2..5]'
Result: '[2,3,4,5]'
Expected: '[2,3,4,5]'
]]></output>
                </test-case>
                <test-case id="0-2341" name="range-operator.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="141543937" result="Passed" start-time="2025-01-14T17:31:20.7308180Z" end-time="2025-01-14T17:31:20.7309266Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[-2..2]';&#xA; result: [-2,-1,0,1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '[-2..2]'
Result: '[-2,-1,0,1,2]'
Expected: '[-2,-1,0,1,2]'
]]></output>
                </test-case>
                <test-case id="0-2342" name="range-operator.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1942117350" result="Passed" start-time="2025-01-14T17:31:20.7309399Z" end-time="2025-01-14T17:31:20.7310357Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[-2..2].($*$)';&#xA; result: [4,1,0,1,4]" />
                  </properties>
                  <output><![CDATA[Expr is '[-2..2].($*$)'
Result: '[4,1,0,1,4]'
Expected: '[4,1,0,1,4]'
]]></output>
                </test-case>
                <test-case id="0-2343" name="range-operator.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="329207763" result="Passed" start-time="2025-01-14T17:31:20.7310435Z" end-time="2025-01-14T17:31:20.7311114Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[-2..blah]';&#xA; result: []" />
                  </properties>
                  <output><![CDATA[Expr is '[-2..blah]'
Result: '[]'
Expected: '[]'
]]></output>
                </test-case>
                <test-case id="0-2344" name="range-operator.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1995463593" result="Passed" start-time="2025-01-14T17:31:20.7311196Z" end-time="2025-01-14T17:31:20.7312555Z" duration="0.000136" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[blah..5, 3, -2..blah]';&#xA; result: [3]" />
                  </properties>
                  <output><![CDATA[Expr is '[blah..5, 3, -2..blah]'
Result: '[3]'
Expected: '[3]'
]]></output>
                </test-case>
                <test-case id="0-2345" name="range-operator.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="863707503" result="Passed" start-time="2025-01-14T17:31:20.7312652Z" end-time="2025-01-14T17:31:20.7318037Z" duration="0.000539" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1.1 .. 5]';&#xA; result: error T2003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2003.
Actually thrown T2003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1.1 .. 5]'
]]></output>
                </test-case>
                <test-case id="0-2346" name="range-operator.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="607697944" result="Passed" start-time="2025-01-14T17:31:20.7318161Z" end-time="2025-01-14T17:31:20.7320611Z" duration="0.000245" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1 .. 5.5]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1 .. 5.5]'
]]></output>
                </test-case>
                <test-case id="0-2347" name="range-operator.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="391001868" result="Passed" start-time="2025-01-14T17:31:20.7320706Z" end-time="2025-01-14T17:31:20.7322891Z" duration="0.000219" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[10..1.5]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[10..1.5]'
]]></output>
                </test-case>
                <test-case id="0-2348" name="range-operator.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="893931127" result="Passed" start-time="2025-01-14T17:31:20.7322980Z" end-time="2025-01-14T17:31:20.7325051Z" duration="0.000207" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[true..false]';&#xA; result: error T2003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2003.
Actually thrown T2003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[true..false]'
]]></output>
                </test-case>
                <test-case id="0-2349" name="range-operator.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="705246232" result="Passed" start-time="2025-01-14T17:31:20.7325153Z" end-time="2025-01-14T17:31:20.7327223Z" duration="0.000207" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '['dogs'..'cats']';&#xA; result: error T2003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2003.
Actually thrown T2003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '['dogs'..'cats']'
]]></output>
                </test-case>
                <test-case id="0-2350" name="range-operator.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1870474513" result="Passed" start-time="2025-01-14T17:31:20.7327318Z" end-time="2025-01-14T17:31:20.7329656Z" duration="0.000234" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1..'']';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1..'']'
]]></output>
                </test-case>
                <test-case id="0-2351" name="range-operator.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1230924535" result="Passed" start-time="2025-01-14T17:31:20.7329757Z" end-time="2025-01-14T17:31:20.7332444Z" duration="0.000269" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1..[]]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1..[]]'
]]></output>
                </test-case>
                <test-case id="0-2352" name="range-operator.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1653529996" result="Passed" start-time="2025-01-14T17:31:20.7332673Z" end-time="2025-01-14T17:31:20.7335009Z" duration="0.000234" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1..{}]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1..{}]'
]]></output>
                </test-case>
                <test-case id="0-2353" name="range-operator.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="472869640" result="Passed" start-time="2025-01-14T17:31:20.7335111Z" end-time="2025-01-14T17:31:20.7338347Z" duration="0.000324" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1..false]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1..false]'
]]></output>
                </test-case>
                <test-case id="0-2354" name="range-operator.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="810532383" result="Passed" start-time="2025-01-14T17:31:20.7338462Z" end-time="2025-01-14T17:31:20.7340567Z" duration="0.000211" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[2..true]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[2..true]'
]]></output>
                </test-case>
                <test-case id="0-2355" name="range-operator.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="475135100" result="Passed" start-time="2025-01-14T17:31:20.7340674Z" end-time="2025-01-14T17:31:20.7342668Z" duration="0.000200" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[$x..true]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[$x..true]'
]]></output>
                </test-case>
                <test-case id="0-2356" name="range-operator.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1857920633" result="Passed" start-time="2025-01-14T17:31:20.7342766Z" end-time="2025-01-14T17:31:20.7344720Z" duration="0.000196" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[false..$x]';&#xA; result: error T2003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2003.
Actually thrown T2003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[false..$x]'
]]></output>
                </test-case>
                <test-case id="0-2357" name="range-operator.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1703842273" result="Passed" start-time="2025-01-14T17:31:20.7344818Z" end-time="2025-01-14T17:31:22.8376462Z" duration="2.103184" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..10000000] ~&gt; $count()';&#xA; result: 10000000" />
                  </properties>
                  <output><![CDATA[Expr is '[1..10000000] ~> $count()'
Result: '10000000'
Expected: '10000000'
]]></output>
                </test-case>
                <test-case id="0-2358" name="range-operator.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="554025572" result="Passed" start-time="2025-01-14T17:31:22.8376817Z" end-time="2025-01-14T17:31:22.8391104Z" duration="0.001429" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[0..10000000] ~&gt; $count()';&#xA; result: error D2014" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D2014.
Actually thrown D2014.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[0..10000000] ~> $count()'
]]></output>
                </test-case>
                <test-case id="0-2359" name="range-operator.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1151737875" result="Passed" start-time="2025-01-14T17:31:22.8391329Z" end-time="2025-01-14T17:31:22.8393692Z" duration="0.000236" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1..10000001] ~&gt; $count()';&#xA; result: error D2014" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D2014.
Actually thrown D2014.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1..10000001] ~> $count()'
]]></output>
                </test-case>
                <test-case id="0-2360" name="range-operator.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="444745337" result="Passed" start-time="2025-01-14T17:31:22.8393781Z" end-time="2025-01-14T17:31:24.4020906Z" duration="1.562727" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[100..10000099] ~&gt; $count()';&#xA; result: 10000000" />
                  </properties>
                  <output><![CDATA[Expr is '[100..10000099] ~> $count()'
Result: '10000000'
Expected: '10000000'
]]></output>
                </test-case>
                <test-case id="0-2361" name="regex.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="615024629" result="Passed" start-time="2025-01-14T17:31:24.4021262Z" end-time="2025-01-14T17:31:24.4040610Z" duration="0.001935" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;ababbxabbcc&quot;,/b+/)';&#xA; result: [&quot;a&quot;,&quot;a&quot;,&quot;xa&quot;,&quot;cc&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("ababbxabbcc",/b+/)'
Result: '["a","a","xa","cc"]'
Expected: '["a","a","xa","cc"]'
]]></output>
                </test-case>
                <test-case id="0-2362" name="regex.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1829194553" result="Passed" start-time="2025-01-14T17:31:24.4040846Z" end-time="2025-01-14T17:31:24.4057706Z" duration="0.001686" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;ababbxabbcc&quot;,/b+/, 2)';&#xA; result: [&quot;a&quot;,&quot;a&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("ababbxabbcc",/b+/, 2)'
Result: '["a","a"]'
Expected: '["a","a"]'
]]></output>
                </test-case>
                <test-case id="0-2363" name="regex.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1060639003" result="Passed" start-time="2025-01-14T17:31:24.4062283Z" end-time="2025-01-14T17:31:24.4071158Z" duration="0.000887" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;ababbxabbcc&quot;,/d+/)';&#xA; result: [&quot;ababbxabbcc&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("ababbxabbcc",/d+/)'
Result: '["ababbxabbcc"]'
Expected: '["ababbxabbcc"]'
]]></output>
                </test-case>
                <test-case id="0-2364" name="regex.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="73412531" result="Passed" start-time="2025-01-14T17:31:24.4071354Z" end-time="2025-01-14T17:31:24.4084213Z" duration="0.001286" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;ababbxabbcc&quot;,/ab+/)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("ababbxabbcc",/ab+/)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2365" name="regex.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="987605814" result="Passed" start-time="2025-01-14T17:31:24.4084429Z" end-time="2025-01-14T17:31:24.4091915Z" duration="0.000749" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;ababbxabbcc&quot;,/ax+/)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("ababbxabbcc",/ax+/)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2366" name="regex.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="718331309" result="Passed" start-time="2025-01-14T17:31:24.4092123Z" end-time="2025-01-14T17:31:24.4101558Z" duration="0.000944" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[$contains($.&quot;Product Name&quot;, /hat/)].ProductID';&#xA; result: 858236" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[$contains($."Product Name", /hat/)].ProductID'
Result: '858236'
Expected: '858236'
]]></output>
                </test-case>
                <test-case id="0-2367" name="regex.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="260291401" result="Passed" start-time="2025-01-14T17:31:24.4101735Z" end-time="2025-01-14T17:31:24.4113884Z" duration="0.001215" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[$contains($.&quot;Product Name&quot;, /hat/i)].ProductID';&#xA; result: [858383,858236,858383]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[$contains($."Product Name", /hat/i)].ProductID'
Result: '[858383,858236,858383]'
Expected: '[858383,858236,858383]'
]]></output>
                </test-case>
                <test-case id="0-2368" name="regex.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1774172896" result="Passed" start-time="2025-01-14T17:31:24.4114173Z" end-time="2025-01-14T17:31:24.4144713Z" duration="0.003054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;ababbxabbcc&quot;,/b+/, &quot;yy&quot;)';&#xA; result: &quot;ayyayyxayycc&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("ababbxabbcc",/b+/, "yy")'
Result: '"ayyayyxayycc"'
Expected: '"ayyayyxayycc"'
]]></output>
                </test-case>
                <test-case id="0-2369" name="regex.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="278503791" result="Passed" start-time="2025-01-14T17:31:24.4145069Z" end-time="2025-01-14T17:31:24.4161747Z" duration="0.001668" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;ababbxabbcc&quot;,/b+/, &quot;yy&quot;, 2)';&#xA; result: &quot;ayyayyxabbcc&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("ababbxabbcc",/b+/, "yy", 2)'
Result: '"ayyayyxabbcc"'
Expected: '"ayyayyxabbcc"'
]]></output>
                </test-case>
                <test-case id="0-2370" name="regex.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1319726907" result="Passed" start-time="2025-01-14T17:31:24.4162018Z" end-time="2025-01-14T17:31:24.4164414Z" duration="0.000240" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;ababbxabbcc&quot;,/b+/, &quot;yy&quot;, 0)';&#xA; result: &quot;ababbxabbcc&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("ababbxabbcc",/b+/, "yy", 0)'
Result: '"ababbxabbcc"'
Expected: '"ababbxabbcc"'
]]></output>
                </test-case>
                <test-case id="0-2371" name="regex.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1149441187" result="Passed" start-time="2025-01-14T17:31:24.4164526Z" end-time="2025-01-14T17:31:24.4172965Z" duration="0.000844" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;ababbxabbcc&quot;,/d+/, &quot;yy&quot;)';&#xA; result: &quot;ababbxabbcc&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("ababbxabbcc",/d+/, "yy")'
Result: '"ababbxabbcc"'
Expected: '"ababbxabbcc"'
]]></output>
                </test-case>
                <test-case id="0-2372" name="regex.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1950395379" result="Passed" start-time="2025-01-14T17:31:24.4173355Z" end-time="2025-01-14T17:31:24.4207786Z" duration="0.003443" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;John Smith&quot;, /(\w+)\s(\w+)/, &quot;$2, $1&quot;)';&#xA; result: &quot;Smith, John&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("John Smith", /(\w+)\s(\w+)/, "$2, $1")'
Result: '"Smith, John"'
Expected: '"Smith, John"'
]]></output>
                </test-case>
                <test-case id="0-2373" name="regex.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="593400043" result="Passed" start-time="2025-01-14T17:31:24.4208119Z" end-time="2025-01-14T17:31:24.4241920Z" duration="0.003380" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;265USD&quot;, /([0-9]+)USD/, &quot;$$$1&quot;)';&#xA; result: &quot;$265&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("265USD", /([0-9]+)USD/, "$$$1")'
Result: '"$265"'
Expected: '"$265"'
]]></output>
                </test-case>
                <test-case id="0-2374" name="regex.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2111223957" result="Passed" start-time="2025-01-14T17:31:24.4242289Z" end-time="2025-01-14T17:31:24.4268017Z" duration="0.002573" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;265USD&quot;, /([0-9]+)USD/, &quot;$w&quot;)';&#xA; result: &quot;$w&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("265USD", /([0-9]+)USD/, "$w")'
Result: '"$w"'
Expected: '"$w"'
]]></output>
                </test-case>
                <test-case id="0-2375" name="regex.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1704298174" result="Passed" start-time="2025-01-14T17:31:24.4268269Z" end-time="2025-01-14T17:31:24.4294555Z" duration="0.002629" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;265USD&quot;, /([0-9]+)USD/, &quot;$0 -&gt; $$$1&quot;)';&#xA; result: &quot;265USD -&gt; $265&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("265USD", /([0-9]+)USD/, "$0 -> $$$1")'
Result: '"265USD -> $265"'
Expected: '"265USD -> $265"'
]]></output>
                </test-case>
                <test-case id="0-2376" name="regex.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="449052296" result="Failed" start-time="2025-01-14T17:31:24.4294893Z" end-time="2025-01-14T17:31:24.4328293Z" duration="0.003341" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;265USD&quot;, /([0-9]+)USD/, &quot;$0$1$2&quot;)';&#xA; result: &quot;265USD265&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"265USD265"', got '"265USD265$2"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$replace("265USD", /([0-9]+)USD/, "$0$1$2")'
Result: '"265USD265$2"'
Expected: '"265USD265"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"265USD265"', got '"265USD265$2"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2377" name="regex.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1628255730" result="Passed" start-time="2025-01-14T17:31:24.4328627Z" end-time="2025-01-14T17:31:24.4410627Z" duration="0.008200" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcd&quot;, /(ab)|(a)/, &quot;[1=$1][2=$2]&quot;)';&#xA; result: &quot;[1=ab][2=]cd&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abcd", /(ab)|(a)/, "[1=$1][2=$2]")'
Result: '"[1=ab][2=]cd"'
Expected: '"[1=ab][2=]cd"'
]]></output>
                </test-case>
                <test-case id="0-2378" name="regex.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1811114512" result="Passed" start-time="2025-01-14T17:31:24.4410990Z" end-time="2025-01-14T17:31:24.4419853Z" duration="0.000886" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /bra/, &quot;*&quot;)';&#xA; result: &quot;a*cada*&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abracadabra", /bra/, "*")'
Result: '"a*cada*"'
Expected: '"a*cada*"'
]]></output>
                </test-case>
                <test-case id="0-2379" name="regex.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="206814254" result="Passed" start-time="2025-01-14T17:31:24.4420007Z" end-time="2025-01-14T17:31:24.4440654Z" duration="0.002065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /a.*a/, &quot;*&quot;)';&#xA; result: &quot;*&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abracadabra", /a.*a/, "*")'
Result: '"*"'
Expected: '"*"'
]]></output>
                </test-case>
                <test-case id="0-2380" name="regex.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="525994404" result="Passed" start-time="2025-01-14T17:31:24.4441260Z" end-time="2025-01-14T17:31:24.4499087Z" duration="0.005783" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /a.*?a/, &quot;*&quot;)';&#xA; result: &quot;*c*bra&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abracadabra", /a.*?a/, "*")'
Result: '"*c*bra"'
Expected: '"*c*bra"'
]]></output>
                </test-case>
                <test-case id="0-2381" name="regex.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="979019447" result="Passed" start-time="2025-01-14T17:31:24.4499473Z" end-time="2025-01-14T17:31:24.4507830Z" duration="0.000836" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /a/, &quot;&quot;)';&#xA; result: &quot;brcdbr&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abracadabra", /a/, "")'
Result: '"brcdbr"'
Expected: '"brcdbr"'
]]></output>
                </test-case>
                <test-case id="0-2382" name="regex.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1263133010" result="Passed" start-time="2025-01-14T17:31:24.4508083Z" end-time="2025-01-14T17:31:24.4524531Z" duration="0.001645" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /a(.)/, &quot;a$1$1&quot;)';&#xA; result: &quot;abbraccaddabbra&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abracadabra", /a(.)/, "a$1$1")'
Result: '"abbraccaddabbra"'
Expected: '"abbraccaddabbra"'
]]></output>
                </test-case>
                <test-case id="0-2383" name="regex.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="519285268" result="Failed" start-time="2025-01-14T17:31:24.4524815Z" end-time="2025-01-14T17:31:24.4538000Z" duration="0.001319" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /.*?/, &quot;$1&quot;)';&#xA; result: error D1004" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D1004 (), got '"$1a$1b$1r$1a$1c$1a$1d$1a$1b$1r$1a$1"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$replace("abracadabra", /.*?/, "$1")'
Result: '"$1a$1b$1r$1a$1c$1a$1d$1a$1b$1r$1a$1"'
Expected error D1004
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D1004 (), got '"$1a$1b$1r$1a$1c$1a$1d$1a$1b$1r$1a$1"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2384" name="regex.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="999837753" result="Passed" start-time="2025-01-14T17:31:24.4538515Z" end-time="2025-01-14T17:31:24.4552153Z" duration="0.001364" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;AAAA&quot;, /A+/, &quot;b&quot;)';&#xA; result: &quot;b&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("AAAA", /A+/, "b")'
Result: '"b"'
Expected: '"b"'
]]></output>
                </test-case>
                <test-case id="0-2385" name="regex.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1805898448" result="Passed" start-time="2025-01-14T17:31:24.4552382Z" end-time="2025-01-14T17:31:24.4564298Z" duration="0.001192" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;AAAA&quot;, /A+?/, &quot;b&quot;)';&#xA; result: &quot;bbbb&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("AAAA", /A+?/, "b")'
Result: '"bbbb"'
Expected: '"bbbb"'
]]></output>
                </test-case>
                <test-case id="0-2386" name="regex.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1484947990" result="Passed" start-time="2025-01-14T17:31:24.4564533Z" end-time="2025-01-14T17:31:24.4588769Z" duration="0.002424" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;darted&quot;, /^(.*?)d(.*)$/, &quot;$1c$2&quot;)';&#xA; result: &quot;carted&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("darted", /^(.*?)d(.*)$/, "$1c$2")'
Result: '"carted"'
Expected: '"carted"'
]]></output>
                </test-case>
                <test-case id="0-2387" name="regex.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="208477538" result="Failed" start-time="2025-01-14T17:31:24.4589152Z" end-time="2025-01-14T17:31:24.4638635Z" duration="0.004949" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)/, &quot;$8$5$12$12$18$123&quot;)';&#xA; result: &quot;hella8l3no&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"hella8l3no"', got '"hell$18$123no"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)/, "$8$5$12$12$18$123")'
Result: '"hell$18$123no"'
Expected: '"hella8l3no"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"hella8l3no"', got '"hell$18$123no"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2388" name="regex.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1205119446" result="Passed" start-time="2025-01-14T17:31:24.4638990Z" end-time="2025-01-14T17:31:24.4650788Z" duration="0.001180" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /xyz/, &quot;$8$5$12$12$18$123&quot;)';&#xA; result: &quot;abcdefghijklmno&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /xyz/, "$8$5$12$12$18$123")'
Result: '"abcdefghijklmno"'
Expected: '"abcdefghijklmno"'
]]></output>
                </test-case>
                <test-case id="0-2389" name="regex.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1827892738" result="Failed" start-time="2025-01-14T17:31:24.4651073Z" end-time="2025-01-14T17:31:24.4665847Z" duration="0.001478" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /ijk/, &quot;$8$5$12$12$18$123&quot;)';&#xA; result: &quot;abcdefgh22823lmno&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"abcdefgh22823lmno"', got '"abcdefgh$8$5$12$12$18$123lmno"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /ijk/, "$8$5$12$12$18$123")'
Result: '"abcdefgh$8$5$12$12$18$123lmno"'
Expected: '"abcdefgh22823lmno"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"abcdefgh22823lmno"', got '"abcdefgh$8$5$12$12$18$123lmno"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2390" name="regex.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1683072338" result="Failed" start-time="2025-01-14T17:31:24.4666147Z" end-time="2025-01-14T17:31:24.4687278Z" duration="0.002113" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /(ijk)/, &quot;$8$5$12$12$18$123&quot;)';&#xA; result: &quot;abcdefghijk2ijk2ijk8ijk23lmno&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"abcdefghijk2ijk2ijk8ijk23lmno"', got '"abcdefgh$8$5$12$12$18$123lmno"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /(ijk)/, "$8$5$12$12$18$123")'
Result: '"abcdefgh$8$5$12$12$18$123lmno"'
Expected: '"abcdefghijk2ijk2ijk8ijk23lmno"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"abcdefghijk2ijk2ijk8ijk23lmno"', got '"abcdefgh$8$5$12$12$18$123lmno"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2391" name="regex.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1287425780" result="Passed" start-time="2025-01-14T17:31:24.4687579Z" end-time="2025-01-14T17:31:24.4696920Z" duration="0.000934" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /ijk/, &quot;$x&quot;)';&#xA; result: &quot;abcdefgh$xlmno&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /ijk/, "$x")'
Result: '"abcdefgh$xlmno"'
Expected: '"abcdefgh$xlmno"'
]]></output>
                </test-case>
                <test-case id="0-2392" name="regex.case031" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case031" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1067011914" result="Passed" start-time="2025-01-14T17:31:24.4697141Z" end-time="2025-01-14T17:31:24.4712598Z" duration="0.001546" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /(ijk)/, &quot;$x$&quot;)';&#xA; result: &quot;abcdefgh$x$lmno&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /(ijk)/, "$x$")'
Result: '"abcdefgh$x$lmno"'
Expected: '"abcdefgh$x$lmno"'
]]></output>
                </test-case>
                <test-case id="0-2393" name="regex.case032" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case032" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="673554127" result="Passed" start-time="2025-01-14T17:31:24.4712879Z" end-time="2025-01-14T17:31:24.4727926Z" duration="0.001505" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.$replace($.&quot;Product Name&quot;, /hat/i, function($match) { &quot;foo&quot; })';&#xA; result: [&quot;Bowler foo&quot;,&quot;Trilby foo&quot;,&quot;Bowler foo&quot;,&quot;Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.$replace($."Product Name", /hat/i, function($match) { "foo" })'
Result: '["Bowler foo","Trilby foo","Bowler foo","Cloak"]'
Expected: '["Bowler foo","Trilby foo","Bowler foo","Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-2394" name="regex.case033" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case033" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2039992769" result="Passed" start-time="2025-01-14T17:31:24.4728228Z" end-time="2025-01-14T17:31:24.4775897Z" duration="0.004767" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.$replace($.&quot;Product Name&quot;, /(h)(at)/i, function($match) { $uppercase($match.match) })';&#xA; result: [&quot;Bowler HAT&quot;,&quot;Trilby HAT&quot;,&quot;Bowler HAT&quot;,&quot;Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.$replace($."Product Name", /(h)(at)/i, function($match) { $uppercase($match.match) })'
Result: '["Bowler HAT","Trilby HAT","Bowler HAT","Cloak"]'
Expected: '["Bowler HAT","Trilby HAT","Bowler HAT","Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-2395" name="regex.case034" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case034" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="566597284" result="Passed" start-time="2025-01-14T17:31:24.4776213Z" end-time="2025-01-14T17:31:24.4823610Z" duration="0.004740" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;temperature = 68F today&quot;, /(-?\d+(?:\.\d*)?)F\b/, function($m) { ($number($m.groups[0]) - 32) * 5/9 &amp; &quot;C&quot; })';&#xA; result: &quot;temperature = 20C today&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("temperature = 68F today", /(-?\d+(?:\.\d*)?)F\b/, function($m) { ($number($m.groups[0]) - 32) * 5/9 & "C" })'
Result: '"temperature = 20C today"'
Expected: '"temperature = 20C today"'
]]></output>
                </test-case>
                <test-case id="0-2396" name="regex.case035" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case035" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="459833031" result="Passed" start-time="2025-01-14T17:31:24.4823950Z" end-time="2025-01-14T17:31:24.4842710Z" duration="0.001876" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.$replace($.&quot;Product Name&quot;, /hat/i, function($match) { true })';&#xA; result: error D3012" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3012.
Actually thrown D3012.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product.$replace($."Product Name", /hat/i, function($match) { true })'
]]></output>
                </test-case>
                <test-case id="0-2397" name="regex.case036" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case036" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="881478347" result="Passed" start-time="2025-01-14T17:31:24.4843013Z" end-time="2025-01-14T17:31:24.4859948Z" duration="0.001694" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.$replace($.&quot;Product Name&quot;, /hat/i, function($match) { 42 })';&#xA; result: error D3012" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3012.
Actually thrown D3012.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product.$replace($."Product Name", /hat/i, function($match) { 42 })'
]]></output>
                </test-case>
                <test-case id="0-2398" name="regex.case037" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case037" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="255795232" result="Passed" start-time="2025-01-14T17:31:24.4860465Z" end-time="2025-01-14T17:31:24.4889247Z" duration="0.002879" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map($, $match(?, /^(\w*\s\w*)/)).match';&#xA; result: [&quot;Felicia Saunders&quot;,&quot;Jimmy Schultz&quot;,&quot;Dolores Figueroa&quot;,&quot;Craig Moreno&quot;,&quot;Lindsey Hall&quot;,&quot;Bonnie Russell&quot;,&quot;Kristin Stewart&quot;,&quot;Owen Reid&quot;,&quot;Brenda Sherman&quot;,&quot;Dwayne Baldwin&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$map($, $match(?, /^(\w*\s\w*)/)).match'
Result: '["Felicia Saunders","Jimmy Schultz","Dolores Figueroa","Craig Moreno","Lindsey Hall","Bonnie Russell","Kristin Stewart","Owen Reid","Brenda Sherman","Dwayne Baldwin"]'
Expected: '["Felicia Saunders","Jimmy Schultz","Dolores Figueroa","Craig Moreno","Lindsey Hall","Bonnie Russell","Kristin Stewart","Owen Reid","Brenda Sherman","Dwayne Baldwin"]'
]]></output>
                </test-case>
                <test-case id="0-2399" name="regex.case038" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case038" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1007857779" result="Passed" start-time="2025-01-14T17:31:24.4890221Z" end-time="2025-01-14T17:31:24.4913336Z" duration="0.002312" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map($, function($i){ $match($i, /^(\w*\s\w*)/) }).match';&#xA; result: [&quot;Felicia Saunders&quot;,&quot;Jimmy Schultz&quot;,&quot;Dolores Figueroa&quot;,&quot;Craig Moreno&quot;,&quot;Lindsey Hall&quot;,&quot;Bonnie Russell&quot;,&quot;Kristin Stewart&quot;,&quot;Owen Reid&quot;,&quot;Brenda Sherman&quot;,&quot;Dwayne Baldwin&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$map($, function($i){ $match($i, /^(\w*\s\w*)/) }).match'
Result: '["Felicia Saunders","Jimmy Schultz","Dolores Figueroa","Craig Moreno","Lindsey Hall","Bonnie Russell","Kristin Stewart","Owen Reid","Brenda Sherman","Dwayne Baldwin"]'
Expected: '["Felicia Saunders","Jimmy Schultz","Dolores Figueroa","Craig Moreno","Lindsey Hall","Bonnie Russell","Kristin Stewart","Owen Reid","Brenda Sherman","Dwayne Baldwin"]'
]]></output>
                </test-case>
                <test-case id="0-2400" name="simple-array-selectors.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="145376194" result="Passed" start-time="2025-01-14T17:31:24.4913579Z" end-time="2025-01-14T17:31:24.4914796Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1[0]';&#xA; result: [1,3,5,6]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1[0]'
Result: '[1,3,5,6]'
Expected: '[1,3,5,6]'
]]></output>
                </test-case>
                <test-case id="0-2401" name="simple-array-selectors.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="347406543" result="Passed" start-time="2025-01-14T17:31:24.4914857Z" end-time="2025-01-14T17:31:24.4915432Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah[0].baz.fud';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah[0].baz.fud'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2402" name="simple-array-selectors.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="764312619" result="Passed" start-time="2025-01-14T17:31:24.4915483Z" end-time="2025-01-14T17:31:24.4916534Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah[1].baz.fud';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah[1].baz.fud'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2403" name="simple-array-selectors.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="615427336" result="Passed" start-time="2025-01-14T17:31:24.4916627Z" end-time="2025-01-14T17:31:24.4917561Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah[-1].bazz';&#xA; result: &quot;gotcha&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah[-1].bazz'
Result: '"gotcha"'
Expected: '"gotcha"'
]]></output>
                </test-case>
                <test-case id="0-2404" name="simple-array-selectors.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1533002972" result="Passed" start-time="2025-01-14T17:31:24.4917719Z" end-time="2025-01-14T17:31:24.4918737Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah)[1].baz.fud';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah)[1].baz.fud'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2405" name="simple-array-selectors.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="721033326" result="Passed" start-time="2025-01-14T17:31:24.4918825Z" end-time="2025-01-14T17:31:24.4919633Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz.fud[0]';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz.fud[0]'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2406" name="simple-array-selectors.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1428012803" result="Passed" start-time="2025-01-14T17:31:24.4919711Z" end-time="2025-01-14T17:31:24.4920666Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz.fud[-1]';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz.fud[-1]'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2407" name="simple-array-selectors.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1060129953" result="Passed" start-time="2025-01-14T17:31:24.4920759Z" end-time="2025-01-14T17:31:24.4921734Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[0]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[0]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2408" name="simple-array-selectors.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="509129330" result="Passed" start-time="2025-01-14T17:31:24.4921811Z" end-time="2025-01-14T17:31:24.4922618Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[1]';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[1]'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2409" name="simple-array-selectors.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1253717856" result="Passed" start-time="2025-01-14T17:31:24.4922694Z" end-time="2025-01-14T17:31:24.4924037Z" duration="0.000135" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[5 * 0.2]';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[5 * 0.2]'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2410" name="simple-array-selectors.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="26082804" result="Passed" start-time="2025-01-14T17:31:24.4924138Z" end-time="2025-01-14T17:31:24.4924847Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[-1]';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[-1]'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2411" name="simple-array-selectors.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="229664903" result="Passed" start-time="2025-01-14T17:31:24.4924912Z" end-time="2025-01-14T17:31:24.4925795Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[-2]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[-2]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2412" name="simple-array-selectors.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2040211408" result="Passed" start-time="2025-01-14T17:31:24.4925952Z" end-time="2025-01-14T17:31:24.4926627Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[2-4]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[2-4]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2413" name="simple-array-selectors.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="347211318" result="Passed" start-time="2025-01-14T17:31:24.4926702Z" end-time="2025-01-14T17:31:24.4928152Z" duration="0.000145" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[-(4-2)]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[-(4-2)]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2414" name="simple-array-selectors.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="625743471" result="Passed" start-time="2025-01-14T17:31:24.4928428Z" end-time="2025-01-14T17:31:24.4929464Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[$$.foo.bar / 30]';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[$$.foo.bar / 30]'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2415" name="simple-array-selectors.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1613209537" result="Passed" start-time="2025-01-14T17:31:24.4929558Z" end-time="2025-01-14T17:31:24.4930724Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah[0].baz';&#xA; result: {&quot;fud&quot;:&quot;hello&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah[0].baz'
Result: '{"fud":"hello"}'
Expected: '{"fud":"hello"}'
]]></output>
                </test-case>
                <test-case id="0-2416" name="simple-array-selectors.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1499375266" result="Passed" start-time="2025-01-14T17:31:24.4930828Z" end-time="2025-01-14T17:31:24.4931552Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz[0]';&#xA; result: [{&quot;fud&quot;:&quot;hello&quot;},{&quot;fud&quot;:&quot;world&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz[0]'
Result: '[{"fud":"hello"},{"fud":"world"}]'
Expected: '[{"fud":"hello"},{"fud":"world"}]'
]]></output>
                </test-case>
                <test-case id="0-2417" name="simple-array-selectors.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1309909285" result="Passed" start-time="2025-01-14T17:31:24.4931610Z" end-time="2025-01-14T17:31:24.4933072Z" duration="0.000146" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz)[0]';&#xA; result: {&quot;fud&quot;:&quot;hello&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz)[0]'
Result: '{"fud":"hello"}'
Expected: '{"fud":"hello"}'
]]></output>
                </test-case>
                <test-case id="0-2418" name="simple-array-selectors.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="60801250" result="Passed" start-time="2025-01-14T17:31:24.4933167Z" end-time="2025-01-14T17:31:24.4934151Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[0]';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$[0]'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-2419" name="simple-array-selectors.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="414997730" result="Passed" start-time="2025-01-14T17:31:24.4934249Z" end-time="2025-01-14T17:31:24.4935010Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[1]';&#xA; result: [3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$[1]'
Result: '[3,4]'
Expected: '[3,4]'
]]></output>
                </test-case>
                <test-case id="0-2420" name="simple-array-selectors.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1650141471" result="Passed" start-time="2025-01-14T17:31:24.4935089Z" end-time="2025-01-14T17:31:24.5277504Z" duration="0.034243" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[-1]';&#xA; result: [3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$[-1]'
Result: '[3,4]'
Expected: '[3,4]'
]]></output>
                </test-case>
                <test-case id="0-2421" name="simple-array-selectors.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="509853771" result="Passed" start-time="2025-01-14T17:31:24.5277841Z" end-time="2025-01-14T17:31:24.5280096Z" duration="0.000226" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[1][0]';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$[1][0]'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-2422" name="simple-array-selectors.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1202655602" result="Passed" start-time="2025-01-14T17:31:24.5280204Z" end-time="2025-01-14T17:31:24.5282309Z" duration="0.000211" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[1.1][0.9]';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$[1.1][0.9]'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-2423" name="sorting.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2093763805" result="Passed" start-time="2025-01-14T17:31:24.5282399Z" end-time="2025-01-14T17:31:24.5283849Z" duration="0.000145" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price^($)';&#xA; result: [21.67,34.45,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price^($)'
Result: '[21.67,34.45,34.45,107.99]'
Expected: '[21.67,34.45,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-2424" name="sorting.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="742915100" result="Passed" start-time="2025-01-14T17:31:24.5283952Z" end-time="2025-01-14T17:31:24.5285256Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price^(&lt;$)';&#xA; result: [21.67,34.45,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price^(<$)'
Result: '[21.67,34.45,34.45,107.99]'
Expected: '[21.67,34.45,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-2425" name="sorting.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="32301127" result="Passed" start-time="2025-01-14T17:31:24.5285349Z" end-time="2025-01-14T17:31:24.5286341Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price^(&gt;$)';&#xA; result: [107.99,34.45,34.45,21.67]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price^(>$)'
Result: '[107.99,34.45,34.45,21.67]'
Expected: '[107.99,34.45,34.45,21.67]'
]]></output>
                </test-case>
                <test-case id="0-2426" name="sorting.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="82429273" result="Passed" start-time="2025-01-14T17:31:24.5286432Z" end-time="2025-01-14T17:31:24.5287605Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).Description.Colour';&#xA; result: [&quot;Orange&quot;,&quot;Purple&quot;,&quot;Purple&quot;,&quot;Black&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).Description.Colour'
Result: '["Orange","Purple","Purple","Black"]'
Expected: '["Orange","Purple","Purple","Black"]'
]]></output>
                </test-case>
                <test-case id="0-2427" name="sorting.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1276841252" result="Passed" start-time="2025-01-14T17:31:24.5287688Z" end-time="2025-01-14T17:31:24.5288690Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: [&quot;0406634348&quot;,&quot;0406654608&quot;,&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
Result: '["0406634348","0406654608","040657863","0406654603"]'
Expected: '["0406634348","0406654608","040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2428" name="sorting.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="700890921" result="Passed" start-time="2025-01-14T17:31:24.5288770Z" end-time="2025-01-14T17:31:24.5289764Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price * Quantity).Description.Colour';&#xA; result: [&quot;Orange&quot;,&quot;Purple&quot;,&quot;Black&quot;,&quot;Purple&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price * Quantity).Description.Colour'
Result: '["Orange","Purple","Black","Purple"]'
Expected: '["Orange","Purple","Black","Purple"]'
]]></output>
                </test-case>
                <test-case id="0-2429" name="sorting.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1544626673" result="Passed" start-time="2025-01-14T17:31:24.5289826Z" end-time="2025-01-14T17:31:24.5291144Z" duration="0.000132" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Quantity, Description.Colour).Description.Colour';&#xA; result: [&quot;Black&quot;,&quot;Orange&quot;,&quot;Purple&quot;,&quot;Purple&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Quantity, Description.Colour).Description.Colour'
Result: '["Black","Orange","Purple","Purple"]'
Expected: '["Black","Orange","Purple","Purple"]'
]]></output>
                </test-case>
                <test-case id="0-2430" name="sorting.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1244465143" result="Passed" start-time="2025-01-14T17:31:24.5291249Z" end-time="2025-01-14T17:31:24.5292423Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Quantity, &gt;Description.Colour).Description.Colour';&#xA; result: [&quot;Orange&quot;,&quot;Black&quot;,&quot;Purple&quot;,&quot;Purple&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Quantity, >Description.Colour).Description.Colour'
Result: '["Orange","Black","Purple","Purple"]'
Expected: '["Orange","Black","Purple","Purple"]'
]]></output>
                </test-case>
                <test-case id="0-2431" name="sorting.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1715057596" result="Passed" start-time="2025-01-14T17:31:24.5292514Z" end-time="2025-01-14T17:31:24.5293498Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: [&quot;0406634348&quot;,&quot;040657863&quot;,&quot;0406654603&quot;,&quot;0406654608&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
Result: '["0406634348","040657863","0406654603","0406654608"]'
Expected: '["0406634348","040657863","0406654603","0406654608"]'
]]></output>
                </test-case>
                <test-case id="0-2432" name="sorting.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1372460498" result="Passed" start-time="2025-01-14T17:31:24.5293571Z" end-time="2025-01-14T17:31:24.5294542Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: [&quot;0406654608&quot;,&quot;040657863&quot;,&quot;0406654603&quot;,&quot;0406634348&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
Result: '["0406654608","040657863","0406654603","0406634348"]'
Expected: '["0406654608","040657863","0406654603","0406634348"]'
]]></output>
                </test-case>
                <test-case id="0-2433" name="sorting.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="803256733" result="Passed" start-time="2025-01-14T17:31:24.5294625Z" end-time="2025-01-14T17:31:24.5296478Z" duration="0.000185" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: [&quot;040657863&quot;,&quot;0406654603&quot;,&quot;0406654608&quot;,&quot;0406634348&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
Result: '["040657863","0406654603","0406654608","0406634348"]'
Expected: '["040657863","0406654603","0406654608","0406634348"]'
]]></output>
                </test-case>
                <test-case id="0-2434" name="sorting.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="61438060" result="Passed" start-time="2025-01-14T17:31:24.5296572Z" end-time="2025-01-14T17:31:24.5323469Z" duration="0.002690" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: error T2007" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2007.
Actually thrown T2007.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
]]></output>
                </test-case>
                <test-case id="0-2435" name="sorting.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="178587861" result="Passed" start-time="2025-01-14T17:31:24.5323682Z" end-time="2025-01-14T17:31:24.5327874Z" duration="0.000419" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: error T2008" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2008.
Actually thrown T2008.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
]]></output>
                </test-case>
                <test-case id="0-2436" name="sorting.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="214706828" result="Passed" start-time="2025-01-14T17:31:24.5328012Z" end-time="2025-01-14T17:31:24.5331636Z" duration="0.000363" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: error T2008" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2008.
Actually thrown T2008.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
]]></output>
                </test-case>
                <test-case id="0-2437" name="sorting.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="647705674" result="Passed" start-time="2025-01-14T17:31:24.5331772Z" end-time="2025-01-14T17:31:24.5332883Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$^(age).name';&#xA; result: [&quot;Sally&quot;,&quot;Bill&quot;,&quot;Jim&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$^(age).name'
Result: '["Sally","Bill","Jim"]'
Expected: '["Sally","Bill","Jim"]'
]]></output>
                </test-case>
                <test-case id="0-2438" name="sorting.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1133765943" result="Passed" start-time="2025-01-14T17:31:24.5332953Z" end-time="2025-01-14T17:31:24.5333706Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($^(age)).name';&#xA; result: [&quot;Sally&quot;,&quot;Bill&quot;,&quot;Jim&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '($^(age)).name'
Result: '["Sally","Bill","Jim"]'
Expected: '["Sally","Bill","Jim"]'
]]></output>
                </test-case>
                <test-case id="0-2439" name="sorting.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="278804427" result="Passed" start-time="2025-01-14T17:31:24.5333771Z" end-time="2025-01-14T17:31:24.5334470Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$^(age)[0].name';&#xA; result: &quot;Sally&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$^(age)[0].name'
Result: '"Sally"'
Expected: '"Sally"'
]]></output>
                </test-case>
                <test-case id="0-2440" name="sorting.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="377885645" result="Passed" start-time="2025-01-14T17:31:24.5334529Z" end-time="2025-01-14T17:31:24.5335175Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($^(age))[0].name';&#xA; result: &quot;Sally&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($^(age))[0].name'
Result: '"Sally"'
Expected: '"Sally"'
]]></output>
                </test-case>
                <test-case id="0-2441" name="sorting.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="424818037" result="Passed" start-time="2025-01-14T17:31:24.5335236Z" end-time="2025-01-14T17:31:24.5335888Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($^(age)[0]).name';&#xA; result: &quot;Sally&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($^(age)[0]).name'
Result: '"Sally"'
Expected: '"Sally"'
]]></output>
                </test-case>
                <test-case id="0-2442" name="sorting.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1846831855" result="Passed" start-time="2025-01-14T17:31:24.5335962Z" end-time="2025-01-14T17:31:24.5336683Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[0]^(age)';&#xA; result: {&quot;name&quot;:&quot;Bill&quot;,&quot;age&quot;:35}" />
                  </properties>
                  <output><![CDATA[Expr is '$[0]^(age)'
Result: '{"name":"Bill","age":35}'
Expected: '{"name":"Bill","age":35}'
]]></output>
                </test-case>
                <test-case id="0-2443" name="sorting.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2098885237" result="Skipped" label="Ignored" start-time="2025-01-14T17:31:24.5336752Z" end-time="2025-01-14T17:31:24.5340764Z" duration="0.000401" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order#$o.Product^(ProductID).{ 'Product': `Product Name`, 'Order Index': $o }';&#xA; result: [{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order Index&quot;:1},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order Index&quot;:0},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order Index&quot;:0},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order Index&quot;:1}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 181
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 226
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in /_/src/Jsonata.Net.Native/Parsing/Parser.cs:line 19
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in /_/src/Jsonata.Net.Native/JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order#$o.Product^(ProductID).{ 'Product': `Product Name`, 'Order Index': $o }'
]]></output>
                </test-case>
                <test-case id="0-2444" name="string-concat.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1801809934" result="Passed" start-time="2025-01-14T17:31:24.5340861Z" end-time="2025-01-14T17:31:24.5341555Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;foo&quot; &amp; &quot;bar&quot;';&#xA; result: &quot;foobar&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"foo" & "bar"'
Result: '"foobar"'
Expected: '"foobar"'
]]></output>
                </test-case>
                <test-case id="0-2445" name="string-concat.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1453407435" result="Passed" start-time="2025-01-14T17:31:24.5341630Z" end-time="2025-01-14T17:31:24.5342125Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;foo&quot;&amp;&quot;bar&quot;';&#xA; result: &quot;foobar&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"foo"&"bar"'
Result: '"foobar"'
Expected: '"foobar"'
]]></output>
                </test-case>
                <test-case id="0-2446" name="string-concat.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1394698019" result="Passed" start-time="2025-01-14T17:31:24.5342184Z" end-time="2025-01-14T17:31:24.5342990Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah[0].baz.fud &amp;foo.blah[1].baz.fud';&#xA; result: &quot;helloworld&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah[0].baz.fud &foo.blah[1].baz.fud'
Result: '"helloworld"'
Expected: '"helloworld"'
]]></output>
                </test-case>
                <test-case id="0-2447" name="string-concat.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="719800596" result="Passed" start-time="2025-01-14T17:31:24.5343064Z" end-time="2025-01-14T17:31:24.5343983Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.(blah[0].baz.fud &amp; blah[1].baz.fud)';&#xA; result: &quot;helloworld&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.(blah[0].baz.fud & blah[1].baz.fud)'
Result: '"helloworld"'
Expected: '"helloworld"'
]]></output>
                </test-case>
                <test-case id="0-2448" name="string-concat.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="47810656" result="Passed" start-time="2025-01-14T17:31:24.5344069Z" end-time="2025-01-14T17:31:24.5344876Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.(blah[0].baz.fud &amp; none)';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.(blah[0].baz.fud & none)'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2449" name="string-concat.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="426783232" result="Passed" start-time="2025-01-14T17:31:24.5344963Z" end-time="2025-01-14T17:31:24.5345701Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.(none.here &amp; blah[1].baz.fud)';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.(none.here & blah[1].baz.fud)'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2450" name="string-concat.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1214705665" result="Passed" start-time="2025-01-14T17:31:24.5345786Z" end-time="2025-01-14T17:31:24.5346498Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2]&amp;[3,4]';&#xA; result: &quot;[1,2][3,4]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2]&[3,4]'
Result: '"[1,2][3,4]"'
Expected: '"[1,2][3,4]"'
]]></output>
                </test-case>
                <test-case id="0-2451" name="string-concat.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1297407393" result="Passed" start-time="2025-01-14T17:31:24.5346589Z" end-time="2025-01-14T17:31:24.5347249Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2]&amp;3';&#xA; result: &quot;[1,2]3&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2]&3'
Result: '"[1,2]3"'
Expected: '"[1,2]3"'
]]></output>
                </test-case>
                <test-case id="0-2452" name="string-concat.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="820677097" result="Passed" start-time="2025-01-14T17:31:24.5347337Z" end-time="2025-01-14T17:31:24.5347935Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '1&amp;2';&#xA; result: &quot;12&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '1&2'
Result: '"12"'
Expected: '"12"'
]]></output>
                </test-case>
                <test-case id="0-2453" name="string-concat.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1988281149" result="Passed" start-time="2025-01-14T17:31:24.5348012Z" end-time="2025-01-14T17:31:24.5348657Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '1&amp;[2]';&#xA; result: &quot;1[2]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '1&[2]'
Result: '"1[2]"'
Expected: '"1[2]"'
]]></output>
                </test-case>
                <test-case id="0-2454" name="string-concat.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1505199955" result="Passed" start-time="2025-01-14T17:31:24.5348738Z" end-time="2025-01-14T17:31:24.5349160Z" duration="0.000042" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot;&amp;5';&#xA; result: &quot;hello5&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"hello"&5'
Result: '"hello5"'
Expected: '"hello5"'
]]></output>
                </test-case>
                <test-case id="0-2455" name="string-concat.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1783006070" result="Passed" start-time="2025-01-14T17:31:24.5349224Z" end-time="2025-01-14T17:31:24.5350634Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;Prices: &quot; &amp; Account.Order.Product.Price';&#xA; result: &quot;Prices: [34.45,21.67,34.45,107.99]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"Prices: " & Account.Order.Product.Price'
Result: '"Prices: [34.45,21.67,34.45,107.99]"'
Expected: '"Prices: [34.45,21.67,34.45,107.99]"'
]]></output>
                </test-case>
                <test-case id="0-2456" name="tail-recursion.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1292234588" result="Passed" start-time="2025-01-14T17:31:24.5350724Z" end-time="2025-01-14T17:31:24.5351545Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '            (              $f := function($n){()};              $f(1)            ) ';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '            (              $f := function($n){()};              $f(1)            ) '
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2457" name="tail-recursion.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="818032461" result="Failed" start-time="2025-01-14T17:31:24.5351617Z" end-time="2025-01-14T17:31:24.5360620Z" duration="0.000901" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(99))             ';&#xA; result: 9.33262154439441E+155" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '9.33262154439441E+155', got '0'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(99))             '
Result: '0'
Expected: '9.33262154439441E+155'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '9.33262154439441E+155', got '0'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2458" name="tail-recursion.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2019995883" result="Failed" start-time="2025-01-14T17:31:24.5360801Z" end-time="2025-01-14T17:31:24.5367316Z" duration="0.000652" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(100))             ';&#xA; result: error U1001" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error U1001 (), got '0']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(100))             '
Result: '0'
Expected error U1001
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error U1001 (), got '0']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2459" name="tail-recursion.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1500701845" result="Passed" start-time="2025-01-14T17:31:24.5367488Z" end-time="2025-01-14T17:31:24.5368868Z" duration="0.000138" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $factorial := function($n){(    $iter := function($n, $acc) {      $n = 0 ? $acc : $iter($n - 1, $n * $acc)    };    $iter($n, 1)  )};  $factorial(5)) ';&#xA; result: 120" />
                  </properties>
                  <output><![CDATA[Expr is '(  $factorial := function($n){(    $iter := function($n, $acc) {      $n = 0 ? $acc : $iter($n - 1, $n * $acc)    };    $iter($n, 1)  )};  $factorial(5)) '
Result: '120'
Expected: '120'
]]></output>
                </test-case>
                <test-case id="0-2460" name="tail-recursion.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="638604053" result="Failed" start-time="2025-01-14T17:31:24.5368977Z" end-time="2025-01-14T17:31:24.5414906Z" duration="0.004593" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $factorial := function($n){(    $iter := function($n, $acc) {      $n = 0 ? $acc : $iter($n - 1, $n * $acc)    };    $iter($n, 1)  )};  $factorial(150)) ';&#xA; result: 5.7133839564458575E+262" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '5.7133839564458575E+262', got '0'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '(  $factorial := function($n){(    $iter := function($n, $acc) {      $n = 0 ? $acc : $iter($n - 1, $n * $acc)    };    $iter($n, 1)  )};  $factorial(150)) '
Result: '0'
Expected: '5.7133839564458575E+262'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '5.7133839564458575E+262', got '0'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2461" name="tail-recursion.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="151171551" result="Failed" start-time="2025-01-14T17:31:24.5415113Z" end-time="2025-01-14T17:31:24.5418980Z" duration="0.000387" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(  $inf := function($n){$n+$inf($n-1)};  $inf(5))';&#xA; result: error U1001" />
                  </properties>
                  <failure>
                    <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2462" name="tail-recursion.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="359239032" result="Failed" start-time="2025-01-14T17:31:24.5419137Z" end-time="2025-01-14T17:31:24.5529513Z" duration="0.011038" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(  $inf := function(){$inf()};  $inf())';&#xA; result: error U1001" />
                  </properties>
                  <failure>
                    <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2463" name="tail-recursion.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1111986304" result="Failed" start-time="2025-01-14T17:31:24.5529860Z" end-time="2025-01-14T17:31:24.5534902Z" duration="0.000504" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '        (          $even := function($n) { $n = 0 ? true : $odd($n-1) };           $odd := function($n) { $n = 0 ? false : $even($n-1) };           $odd(6555)         )';&#xA; result: true" />
                  </properties>
                  <failure>
                    <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                  </failure>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
   at InvokeStub_Tests.Test(Object, Span`1)
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2464" name="tail-recursion.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="9252713" result="Passed" start-time="2025-01-14T17:31:24.5535793Z" end-time="2025-01-14T17:31:24.5561068Z" duration="0.002528" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($f := function($s, $x)&lt;an:s&gt; { $x &gt; 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )';&#xA; result: [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '($f := function($s, $x)<an:s> { $x > 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )'
Result: '["a","a","a","a"]'
Expected: '["a","a","a","a"]'
]]></output>
                </test-case>
                <test-case id="0-2465" name="tail-recursion.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="458508855" result="Passed" start-time="2025-01-14T17:31:24.5561361Z" end-time="2025-01-14T17:31:24.5588152Z" duration="0.002679" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($f := function($s, $x)&lt;sn:s&gt; { $x &gt; 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '($f := function($s, $x)<sn:s> { $x > 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )'
]]></output>
                </test-case>
                <test-case id="0-2466" name="token-conversion.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.token-conversion.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1004688052" result="Passed" start-time="2025-01-14T17:31:24.5588439Z" end-time="2025-01-14T17:31:24.5590032Z" duration="0.000160" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.'7a'';&#xA; result: 33" />
                  </properties>
                  <output><![CDATA[Expr is '$.'7a''
Result: '33'
Expected: '33'
]]></output>
                </test-case>
                <test-case id="0-2467" name="token-conversion.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.token-conversion.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1236954675" result="Passed" start-time="2025-01-14T17:31:24.5590162Z" end-time="2025-01-14T17:31:24.5590845Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.'7'';&#xA; result: 88" />
                  </properties>
                  <output><![CDATA[Expr is '$.'7''
Result: '88'
Expected: '88'
]]></output>
                </test-case>
                <test-case id="0-2468" name="token-conversion.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.token-conversion.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="285773258" result="Passed" start-time="2025-01-14T17:31:24.5590917Z" end-time="2025-01-14T17:31:24.5593632Z" duration="0.000272" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.7a';&#xA; result: error S0201" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0201.
Actually thrown S0201.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.7a'
]]></output>
                </test-case>
                <test-case id="0-2469" name="token-conversion.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.token-conversion.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="447155610" result="Passed" start-time="2025-01-14T17:31:24.5593742Z" end-time="2025-01-14T17:31:24.5596385Z" duration="0.000265" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.7';&#xA; result: error S0213" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0213.
Actually thrown S0213.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.7'
]]></output>
                </test-case>
                <test-case id="0-2470" name="transform.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1398502709" result="Passed" start-time="2025-01-14T17:31:24.5596495Z" end-time="2025-01-14T17:31:24.5600410Z" duration="0.000392" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'Order': Account.Order.{  'ID': OrderID,  'Product': Product.{    'SKU': ProductID,    'Details': {      'Weight': Description.Weight,      'Dimensions': Description.(Width &amp; ' x ' &amp; Height &amp; ' x ' &amp; Depth)    }  },  'Total Price': $sum(Product.(Price * Quantity))}}';&#xA; result: {&quot;Order&quot;:[{&quot;ID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;SKU&quot;:858236,&quot;Details&quot;:{&quot;Weight&quot;:0.6,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}}],&quot;Total Price&quot;:90.57000000000001},{&quot;ID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;SKU&quot;:345664,&quot;Details&quot;:{&quot;Weight&quot;:2,&quot;Dimensions&quot;:&quot;30 x 20 x 210&quot;}}],&quot;Total Price&quot;:245.79000000000002}]}" />
                  </properties>
                  <output><![CDATA[Expr is '{'Order': Account.Order.{  'ID': OrderID,  'Product': Product.{    'SKU': ProductID,    'Details': {      'Weight': Description.Weight,      'Dimensions': Description.(Width & ' x ' & Height & ' x ' & Depth)    }  },  'Total Price': $sum(Product.(Price * Quantity))}}'
Result: '{"Order":[{"ID":"order103","Product":[{"SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57},{"ID":"order104","Product":[{"SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79}]}'
Expected: '{"Order":[{"ID":"order103","Product":[{"SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57000000000001},{"ID":"order104","Product":[{"SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79000000000002}]}'
]]></output>
                </test-case>
                <test-case id="0-2471" name="transform.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="851669592" result="Passed" start-time="2025-01-14T17:31:24.5600536Z" end-time="2025-01-14T17:31:24.5602976Z" duration="0.000244" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&#xA;        (&#xA;          $tempReadings := $count(state.tempReadings) = 5 ?&#xA;              [state.tempReadings[[1..4]], event.t] :&#xA;              [state.tempReadings, event.t];&#xA;        &#xA;          {&#xA;            &quot;tempReadings&quot;: $tempReadings,&#xA;            &quot;sumTemperatures&quot;: $sum($tempReadings),&#xA;            &quot;avgTemperature&quot;: $average($tempReadings) ~&gt; $round(2),&#xA;            &quot;maxTemperature&quot;: $max($tempReadings),&#xA;            &quot;minTemperature&quot;: $min($tempReadings)&#xA;          }&#xA;        )';&#xA; result: {&quot;tempReadings&quot;:[28.9,28,28.2,28.4,28.4],&quot;sumTemperatures&quot;:141.9,&quot;avgTemperature&quot;:28.38,&quot;maxTemperature&quot;:28.9,&quot;minTemperature&quot;:28}" />
                  </properties>
                  <output><![CDATA[Expr is '
        (
          $tempReadings := $count(state.tempReadings) = 5 ?
              [state.tempReadings[[1..4]], event.t] :
              [state.tempReadings, event.t];
        
          {
            "tempReadings": $tempReadings,
            "sumTemperatures": $sum($tempReadings),
            "avgTemperature": $average($tempReadings) ~> $round(2),
            "maxTemperature": $max($tempReadings),
            "minTemperature": $min($tempReadings)
          }
        )'
Result: '{"tempReadings":[28.9,28,28.2,28.4,28.4],"sumTemperatures":141.9,"avgTemperature":28.38,"maxTemperature":28.9,"minTemperature":28}'
Expected: '{"tempReadings":[28.9,28,28.2,28.4,28.4],"sumTemperatures":141.9,"avgTemperature":28.38,"maxTemperature":28.9,"minTemperature":28}'
]]></output>
                </test-case>
                <test-case id="0-2472" name="transform.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="176143342" result="Passed" start-time="2025-01-14T17:31:24.5603078Z" end-time="2025-01-14T17:31:24.5603745Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: {&quot;output&quot;:{&quot;is&quot;:{&quot;same&quot;:{&quot;as&quot;:&quot;input&quot;}}}}" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '{"output":{"is":{"same":{"as":"input"}}}}'
Expected: '{"output":{"is":{"same":{"as":"input"}}}}'
]]></output>
                </test-case>
                <test-case id="0-2473" name="transform.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1929480470" result="Passed" start-time="2025-01-14T17:31:24.5603816Z" end-time="2025-01-14T17:31:24.5604331Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo';&#xA; result: {&quot;bar&quot;:42}" />
                  </properties>
                  <output><![CDATA[Expr is 'foo'
Result: '{"bar":42}'
Expected: '{"bar":42}'
]]></output>
                </test-case>
                <test-case id="0-2474" name="transform.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="37112085" result="Passed" start-time="2025-01-14T17:31:24.5604399Z" end-time="2025-01-14T17:31:24.5604901Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'baz';&#xA; result: {&quot;gar&quot;:50}" />
                  </properties>
                  <output><![CDATA[Expr is 'baz'
Result: '{"gar":50}'
Expected: '{"gar":50}'
]]></output>
                </test-case>
                <test-case id="0-2475" name="transform.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1225323434" result="Passed" start-time="2025-01-14T17:31:24.5604976Z" end-time="2025-01-14T17:31:24.5605470Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Foo';&#xA; result: {&quot;mama&quot;:45}" />
                  </properties>
                  <output><![CDATA[Expr is 'Foo'
Result: '{"mama":45}'
Expected: '{"mama":45}'
]]></output>
                </test-case>
                <test-case id="0-2476" name="transform.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="810505563" result="Passed" start-time="2025-01-14T17:31:24.5605535Z" end-time="2025-01-14T17:31:24.5606056Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'food';&#xA; result: {&quot;wa&quot;:&quot;hume&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'food'
Result: '{"wa":"hume"}'
Expected: '{"wa":"hume"}'
]]></output>
                </test-case>
                <test-case id="0-2477" name="transform.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1251254012" result="Passed" start-time="2025-01-14T17:31:24.5606132Z" end-time="2025-01-14T17:31:24.5606661Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'maz.rar';&#xA; result: 42" />
                  </properties>
                  <output><![CDATA[Expr is 'maz.rar'
Result: '42'
Expected: '42'
]]></output>
                </test-case>
                <test-case id="0-2478" name="transform.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="291953871" result="Passed" start-time="2025-01-14T17:31:24.5606732Z" end-time="2025-01-14T17:31:24.5607280Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'jee.par.waa';&#xA; result: {&quot;bar&quot;:87}" />
                  </properties>
                  <output><![CDATA[Expr is 'jee.par.waa'
Result: '{"bar":87}'
Expected: '{"bar":87}'
]]></output>
                </test-case>
                <test-case id="0-2479" name="transform.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1436991312" result="Passed" start-time="2025-01-14T17:31:24.5607344Z" end-time="2025-01-14T17:31:24.5607869Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'foo'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2480" name="transform.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="785086755" result="Passed" start-time="2025-01-14T17:31:24.5607938Z" end-time="2025-01-14T17:31:24.5608757Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2481" name="transform.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1510112324" result="Passed" start-time="2025-01-14T17:31:24.5608861Z" end-time="2025-01-14T17:31:24.5609352Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-2482" name="transform.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1229030596" result="Passed" start-time="2025-01-14T17:31:24.5609426Z" end-time="2025-01-14T17:31:24.5609944Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-2483" name="transform.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="274107689" result="Passed" start-time="2025-01-14T17:31:24.5610010Z" end-time="2025-01-14T17:31:24.5610335Z" duration="0.000033" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: 6754322" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '6754322'
Expected: '6754322'
]]></output>
                </test-case>
                <test-case id="0-2484" name="transform.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="329921008" result="Passed" start-time="2025-01-14T17:31:24.5610404Z" end-time="2025-01-14T17:31:24.5610723Z" duration="0.000032" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-2485" name="transform.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2094541397" result="Passed" start-time="2025-01-14T17:31:24.5610768Z" end-time="2025-01-14T17:31:24.5611237Z" duration="0.000047" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: -24" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '-24'
Expected: '-24'
]]></output>
                </test-case>
                <test-case id="0-2486" name="transform.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="894380499" result="Passed" start-time="2025-01-14T17:31:24.5611316Z" end-time="2025-01-14T17:31:24.5612871Z" duration="0.000156" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: 6.54" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: '6.54'
Expected: '6.54'
]]></output>
                </test-case>
                <test-case id="0-2487" name="transform.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1531662996" result="Passed" start-time="2025-01-14T17:31:24.5612979Z" end-time="2025-01-14T17:31:24.5613558Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2488" name="transform.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1445540425" result="Passed" start-time="2025-01-14T17:31:24.5613652Z" end-time="2025-01-14T17:31:24.5614126Z" duration="0.000048" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2489" name="transform.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="425915637" result="Passed" start-time="2025-01-14T17:31:24.5614184Z" end-time="2025-01-14T17:31:24.5614599Z" duration="0.000042" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-2490" name="transform.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1033836920" result="Passed" start-time="2025-01-14T17:31:24.5614651Z" end-time="2025-01-14T17:31:24.5615113Z" duration="0.000044" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-2491" name="transform.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1544158014" result="Passed" start-time="2025-01-14T17:31:24.5615167Z" end-time="2025-01-14T17:31:24.5615586Z" duration="0.000042" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2492" name="transform.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="775193438" result="Passed" start-time="2025-01-14T17:31:24.5615644Z" end-time="2025-01-14T17:31:24.5616042Z" duration="0.000040" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2493" name="transform.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1780547745" result="Passed" start-time="2025-01-14T17:31:24.5616092Z" end-time="2025-01-14T17:31:24.5616545Z" duration="0.000045" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: &quot;\&quot;Hello\&quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: '"\"Hello\""'
Expected: '"\"Hello\""'
]]></output>
                </test-case>
                <test-case id="0-2494" name="transform.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1787684021" result="Passed" start-time="2025-01-14T17:31:24.5616602Z" end-time="2025-01-14T17:31:24.5617047Z" duration="0.000045" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: &quot;\&quot;Hello\&quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '"\"Hello\""'
Expected: '"\"Hello\""'
]]></output>
                </test-case>
                <test-case id="0-2495" name="transform.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="226714094" result="Passed" start-time="2025-01-14T17:31:24.5617101Z" end-time="2025-01-14T17:31:24.5617533Z" duration="0.000043" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: &quot;'Hello'&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: '"'Hello'"'
Expected: '"'Hello'"'
]]></output>
                </test-case>
                <test-case id="0-2496" name="transform.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="65579005" result="Passed" start-time="2025-01-14T17:31:24.5617588Z" end-time="2025-01-14T17:31:24.5617992Z" duration="0.000040" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: &quot;'Hello'&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '"'Hello'"'
Expected: '"'Hello'"'
]]></output>
                </test-case>
                <test-case id="0-2497" name="transform.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="734845551" result="Passed" start-time="2025-01-14T17:31:24.5618285Z" end-time="2025-01-14T17:31:24.5619236Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Salutation)';&#xA; result: &quot;mr&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase(Salutation)'
Result: '"mr"'
Expected: '"mr"'
]]></output>
                </test-case>
                <test-case id="0-2498" name="transform.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2089632524" result="Passed" start-time="2025-01-14T17:31:24.5619310Z" end-time="2025-01-14T17:31:24.5619795Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(敷)';&#xA; result: &quot;steve&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase(敷)'
Result: '"steve"'
Expected: '"steve"'
]]></output>
                </test-case>
                <test-case id="0-2499" name="transform.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1343301079" result="Passed" start-time="2025-01-14T17:31:24.5619861Z" end-time="2025-01-14T17:31:24.5620975Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Español)';&#xA; result: &quot;/ˈspænɪʃ/&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase(Español)'
Result: '"/ˈspænɪʃ/"'
Expected: '"/ˈspænɪʃ/"'
]]></output>
                </test-case>
                <test-case id="0-2500" name="transform.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="448719383" result="Passed" start-time="2025-01-14T17:31:24.5621068Z" end-time="2025-01-14T17:31:24.5621698Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase($.&quot;NI.Number&quot;)';&#xA; result: &quot;no10furbzness&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase($."NI.Number")'
Result: '"no10furbzness"'
Expected: '"no10furbzness"'
]]></output>
                </test-case>
                <test-case id="0-2501" name="transform.case031" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case031" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="157743344" result="Passed" start-time="2025-01-14T17:31:24.5621758Z" end-time="2025-01-14T17:31:24.5622323Z" duration="0.000057" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(&quot;COMPENSATION IS : &quot; &amp; Employment.&quot;Executive.Compensation&quot;)';&#xA; result: &quot;compensation is : 1400000&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase("COMPENSATION IS : " & Employment."Executive.Compensation")'
Result: '"compensation is : 1400000"'
Expected: '"compensation is : 1400000"'
]]></output>
                </test-case>
                <test-case id="0-2502" name="transform.case032" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case032" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="434027338" result="Passed" start-time="2025-01-14T17:31:24.5622395Z" end-time="2025-01-14T17:31:24.5622950Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;Hello&quot;';&#xA; result: &quot;Hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"Hello"'
Result: '"Hello"'
Expected: '"Hello"'
]]></output>
                </test-case>
                <test-case id="0-2503" name="transform.case033" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case033" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1748138693" result="Passed" start-time="2025-01-14T17:31:24.5623028Z" end-time="2025-01-14T17:31:24.5623718Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Salutation)';&#xA; result: &quot;MR&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Salutation)'
Result: '"MR"'
Expected: '"MR"'
]]></output>
                </test-case>
                <test-case id="0-2504" name="transform.case034" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case034" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1175764170" result="Passed" start-time="2025-01-14T17:31:24.5623807Z" end-time="2025-01-14T17:31:24.5624405Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(&quot;Hello World&quot;)';&#xA; result: &quot;HELLO WORLD&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase("Hello World")'
Result: '"HELLO WORLD"'
Expected: '"HELLO WORLD"'
]]></output>
                </test-case>
                <test-case id="0-2505" name="transform.case035" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case035" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="363036073" result="Passed" start-time="2025-01-14T17:31:24.5624468Z" end-time="2025-01-14T17:31:24.5625086Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(&quot;鯵噂ソ竹&quot;)';&#xA; result: &quot;鯵噂ソ竹&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase("鯵噂ソ竹")'
Result: '"鯵噂ソ竹"'
Expected: '"鯵噂ソ竹"'
]]></output>
                </test-case>
                <test-case id="0-2506" name="transform.case036" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case036" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1121264051" result="Passed" start-time="2025-01-14T17:31:24.5625205Z" end-time="2025-01-14T17:31:24.5625872Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Employment.Name &amp; &quot; is happy&quot;';&#xA; result: &quot;IBM UK is happy&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Employment.Name & " is happy"'
Result: '"IBM UK is happy"'
Expected: '"IBM UK is happy"'
]]></output>
                </test-case>
                <test-case id="0-2507" name="transform.case037" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case037" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1038680274" result="Passed" start-time="2025-01-14T17:31:24.5625957Z" end-time="2025-01-14T17:31:24.5627382Z" duration="0.000143" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Employment.Name &amp; &quot; is pleased to employ &quot; &amp; Salutation &amp; &quot; &quot; &amp; Surname';&#xA; result: &quot;IBM UK is pleased to employ Mr Smith&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Employment.Name & " is pleased to employ " & Salutation & " " & Surname'
Result: '"IBM UK is pleased to employ Mr Smith"'
Expected: '"IBM UK is pleased to employ Mr Smith"'
]]></output>
                </test-case>
                <test-case id="0-2508" name="transform.case038" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case038" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1951169064" result="Passed" start-time="2025-01-14T17:31:24.5627460Z" end-time="2025-01-14T17:31:24.5628274Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(&quot;Hello &quot; &amp; Salutation &amp; &quot; &quot; &amp; Surname)';&#xA; result: &quot;HELLO MR SMITH&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase("Hello " & Salutation & " " & Surname)'
Result: '"HELLO MR SMITH"'
Expected: '"HELLO MR SMITH"'
]]></output>
                </test-case>
                <test-case id="0-2509" name="transform.case039" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case039" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="279876521" result="Passed" start-time="2025-01-14T17:31:24.5628384Z" end-time="2025-01-14T17:31:24.5629273Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Salutation &amp; &quot; &quot; &amp; Surname &amp; &quot; - has &quot; &amp; Cars &amp; &quot; registered cars&quot;)';&#xA; result: &quot;MR SMITH - HAS 3 REGISTERED CARS&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Salutation & " " & Surname & " - has " & Cars & " registered cars")'
Result: '"MR SMITH - HAS 3 REGISTERED CARS"'
Expected: '"MR SMITH - HAS 3 REGISTERED CARS"'
]]></output>
                </test-case>
                <test-case id="0-2510" name="transform.case040" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case040" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="972500507" result="Passed" start-time="2025-01-14T17:31:24.5629386Z" end-time="2025-01-14T17:31:24.5666093Z" duration="0.003671" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Employment.ContractType)';&#xA; result: &quot;PERMANENT&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Employment.ContractType)'
Result: '"PERMANENT"'
Expected: '"PERMANENT"'
]]></output>
                </test-case>
                <test-case id="0-2511" name="transform.case041" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case041" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="40980576" result="Passed" start-time="2025-01-14T17:31:24.5666339Z" end-time="2025-01-14T17:31:24.5668832Z" duration="0.000250" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hola&quot;, &quot;l&quot;)';&#xA; result: &quot;Ho&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hola", "l")'
Result: '"Ho"'
Expected: '"Ho"'
]]></output>
                </test-case>
                <test-case id="0-2512" name="transform.case042" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case042" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="526078590" result="Passed" start-time="2025-01-14T17:31:24.5668979Z" end-time="2025-01-14T17:31:24.5670655Z" duration="0.000168" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hola&quot;, 'l')';&#xA; result: &quot;Ho&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hola", 'l')'
Result: '"Ho"'
Expected: '"Ho"'
]]></output>
                </test-case>
                <test-case id="0-2513" name="transform.case043" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case043" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="583004571" result="Passed" start-time="2025-01-14T17:31:24.5670826Z" end-time="2025-01-14T17:31:24.5671705Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hola&quot;, &quot;Q&quot;)';&#xA; result: &quot;Hola&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hola", "Q")'
Result: '"Hola"'
Expected: '"Hola"'
]]></output>
                </test-case>
                <test-case id="0-2514" name="transform.case044" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case044" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="715615090" result="Passed" start-time="2025-01-14T17:31:24.5671793Z" end-time="2025-01-14T17:31:24.5672514Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hola&quot;, &quot;&quot;)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hola", "")'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-2515" name="transform.case045" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case045" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1275975376" result="Passed" start-time="2025-01-14T17:31:24.5672610Z" end-time="2025-01-14T17:31:24.5673381Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;鯵噂ソ竹&quot;, &quot;ソ&quot;)';&#xA; result: &quot;鯵噂&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("鯵噂ソ竹", "ソ")'
Result: '"鯵噂"'
Expected: '"鯵噂"'
]]></output>
                </test-case>
                <test-case id="0-2516" name="transform.case046" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case046" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1069624602" result="Passed" start-time="2025-01-14T17:31:24.5673455Z" end-time="2025-01-14T17:31:24.5674419Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Coca&quot; &amp; &quot;Cola&quot;, &quot;ca&quot;)';&#xA; result: &quot;Cola&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Coca" & "Cola", "ca")'
Result: '"Cola"'
Expected: '"Cola"'
]]></output>
                </test-case>
                <test-case id="0-2517" name="transform.case047" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case047" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="85131343" result="Passed" start-time="2025-01-14T17:31:24.5674516Z" end-time="2025-01-14T17:31:24.5675675Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(Salutation &amp; &quot; &quot; &amp; MiddleName &amp;&quot; &quot; &amp; Surname, MiddleName)';&#xA; result: &quot; Smith&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter(Salutation & " " & MiddleName &" " & Surname, MiddleName)'
Result: '" Smith"'
Expected: '" Smith"'
]]></output>
                </test-case>
                <test-case id="0-2518" name="transform.case048" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case048" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="782065296" result="Passed" start-time="2025-01-14T17:31:24.5675778Z" end-time="2025-01-14T17:31:24.5676973Z" duration="0.000120" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(Salutation &amp; &quot; &quot; &amp; Employment.Role, Salutation)';&#xA; result: &quot; Senior Physician&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter(Salutation & " " & Employment.Role, Salutation)'
Result: '" Senior Physician"'
Expected: '" Senior Physician"'
]]></output>
                </test-case>
                <test-case id="0-2519" name="transform.case049" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case049" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="62194963" result="Passed" start-time="2025-01-14T17:31:24.5677079Z" end-time="2025-01-14T17:31:24.5677814Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hola&quot;, 'l')';&#xA; result: &quot;a&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hola", 'l')'
Result: '"a"'
Expected: '"a"'
]]></output>
                </test-case>
                <test-case id="0-2520" name="transform.case050" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case050" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1711612003" result="Passed" start-time="2025-01-14T17:31:24.5677898Z" end-time="2025-01-14T17:31:24.5678614Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hola&quot;, &quot;Q&quot;)';&#xA; result: &quot;Hola&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hola", "Q")'
Result: '"Hola"'
Expected: '"Hola"'
]]></output>
                </test-case>
                <test-case id="0-2521" name="transform.case051" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case051" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1620508703" result="Passed" start-time="2025-01-14T17:31:24.5678695Z" end-time="2025-01-14T17:31:24.5679680Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Employment.Role) &amp; &quot; (&quot; &amp; Employment.Role &amp; &quot;)&quot;';&#xA; result: &quot;senior physician (Senior Physician)&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase(Employment.Role) & " (" & Employment.Role & ")"'
Result: '"senior physician (Senior Physician)"'
Expected: '"senior physician (Senior Physician)"'
]]></output>
                </test-case>
                <test-case id="0-2522" name="transform.case052" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case052" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1938897897" result="Passed" start-time="2025-01-14T17:31:24.5679782Z" end-time="2025-01-14T17:31:24.5680484Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Employment.Years &amp; &quot; years of employment&quot;';&#xA; result: &quot;12 years of employment&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Employment.Years & " years of employment"'
Result: '"12 years of employment"'
Expected: '"12 years of employment"'
]]></output>
                </test-case>
                <test-case id="0-2523" name="transform.case053" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case053" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2007341268" result="Passed" start-time="2025-01-14T17:31:24.5680667Z" end-time="2025-01-14T17:31:24.5681995Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Salutation &amp; &quot; &quot; &amp; Surname &amp; &quot; - has &quot; &amp; Employment.Years &amp; &quot; years of employment&quot;)';&#xA; result: &quot;MR SMITH - HAS 12 YEARS OF EMPLOYMENT&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Salutation & " " & Surname & " - has " & Employment.Years & " years of employment")'
Result: '"MR SMITH - HAS 12 YEARS OF EMPLOYMENT"'
Expected: '"MR SMITH - HAS 12 YEARS OF EMPLOYMENT"'
]]></output>
                </test-case>
                <test-case id="0-2524" name="transform.case054" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case054" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1560802337" result="Passed" start-time="2025-01-14T17:31:24.5682097Z" end-time="2025-01-14T17:31:24.5683146Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(Employment.Role, 7,4)';&#xA; result: &quot;Phys&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring(Employment.Role, 7,4)'
Result: '"Phys"'
Expected: '"Phys"'
]]></output>
                </test-case>
                <test-case id="0-2525" name="transform.case055" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case055" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2001828342" result="Passed" start-time="2025-01-14T17:31:24.5683446Z" end-time="2025-01-14T17:31:24.5684319Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(Employment.Role, -4,4)';&#xA; result: &quot;cian&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring(Employment.Role, -4,4)'
Result: '"cian"'
Expected: '"cian"'
]]></output>
                </test-case>
                <test-case id="0-2526" name="transform.case056" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case056" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="76476154" result="Passed" start-time="2025-01-14T17:31:24.5684403Z" end-time="2025-01-14T17:31:24.5823110Z" duration="0.013871" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Hello World&quot;,Cars,5)';&#xA; result: &quot;lo Wo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("Hello World",Cars,5)'
Result: '"lo Wo"'
Expected: '"lo Wo"'
]]></output>
                </test-case>
                <test-case id="0-2527" name="transform.case057" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case057" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="543079244" result="Passed" start-time="2025-01-14T17:31:24.5823369Z" end-time="2025-01-14T17:31:24.5831106Z" duration="0.000774" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(&quot;Missing close brackets&quot;';&#xA; result: error S0203" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0203.
Actually thrown S0203.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase("Missing close brackets"'
]]></output>
                </test-case>
                <test-case id="0-2528" name="transform.case058" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case058" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="141796449" result="Passed" start-time="2025-01-14T17:31:24.5831301Z" end-time="2025-01-14T17:31:24.5834933Z" duration="0.000363" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$unknown(Salutation)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$unknown(Salutation)'
]]></output>
                </test-case>
                <test-case id="0-2529" name="transform.case059" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case059" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1957881638" result="Passed" start-time="2025-01-14T17:31:24.5835094Z" end-time="2025-01-14T17:31:24.5838431Z" duration="0.000334" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$decrypt(Salutation)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$decrypt(Salutation)'
]]></output>
                </test-case>
                <test-case id="0-2530" name="transform.case060" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case060" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1159744429" result="Passed" start-time="2025-01-14T17:31:24.5838818Z" end-time="2025-01-14T17:31:24.5842737Z" duration="0.000392" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employment.authentication(Salutation)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employment.authentication(Salutation)'
]]></output>
                </test-case>
                <test-case id="0-2531" name="transform.case061" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case061" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="75660012" result="Passed" start-time="2025-01-14T17:31:24.5843070Z" end-time="2025-01-14T17:31:24.5844209Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Invalid)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Invalid)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2532" name="transform.case062" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case062" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1309105135" result="Passed" start-time="2025-01-14T17:31:24.5844331Z" end-time="2025-01-14T17:31:24.5845412Z" duration="0.000108" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Employment.Invalid)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Employment.Invalid)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2533" name="transform.case063" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case063" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1096136439" result="Passed" start-time="2025-01-14T17:31:24.5845570Z" end-time="2025-01-14T17:31:24.5849351Z" duration="0.000378" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(&quot;Coca&quot;, &quot;Cola&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase("Coca", "Cola")'
]]></output>
                </test-case>
                <test-case id="0-2534" name="transform.case064" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case064" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="988271929" result="Passed" start-time="2025-01-14T17:31:24.5849461Z" end-time="2025-01-14T17:31:24.5852064Z" duration="0.000260" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Salary)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase(Salary)'
]]></output>
                </test-case>
                <test-case id="0-2535" name="transform.case065" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case065" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="627343411" result="Passed" start-time="2025-01-14T17:31:24.5852170Z" end-time="2025-01-14T17:31:24.5854949Z" duration="0.000278" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(20)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase(20)'
]]></output>
                </test-case>
                <test-case id="0-2536" name="transform.case066" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case066" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1076084986" result="Passed" start-time="2025-01-14T17:31:24.5855049Z" end-time="2025-01-14T17:31:24.5858033Z" duration="0.000299" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(20.55)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase(20.55)'
]]></output>
                </test-case>
                <test-case id="0-2537" name="transform.case067" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case067" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1628375550" result="Passed" start-time="2025-01-14T17:31:24.5858130Z" end-time="2025-01-14T17:31:24.5860523Z" duration="0.000239" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Employment)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase(Employment)'
]]></output>
                </test-case>
                <test-case id="0-2538" name="transform.case068" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case068" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1245827166" result="Passed" start-time="2025-01-14T17:31:24.5860606Z" end-time="2025-01-14T17:31:24.5863060Z" duration="0.000246" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Qualifications)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase(Qualifications)'
]]></output>
                </test-case>
                <test-case id="0-2539" name="transform.case069" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case069" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2114368582" result="Passed" start-time="2025-01-14T17:31:24.5863154Z" end-time="2025-01-14T17:31:24.5865666Z" duration="0.000251" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(&quot;Coca&quot;, &quot;Cola&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase("Coca", "Cola")'
]]></output>
                </test-case>
                <test-case id="0-2540" name="transform.case070" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case070" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="973277346" result="Passed" start-time="2025-01-14T17:31:24.5865774Z" end-time="2025-01-14T17:31:24.5868297Z" duration="0.000253" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Salary)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(Salary)'
]]></output>
                </test-case>
                <test-case id="0-2541" name="transform.case071" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case071" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2003183872" result="Passed" start-time="2025-01-14T17:31:24.5868390Z" end-time="2025-01-14T17:31:24.5871137Z" duration="0.000275" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(28)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(28)'
]]></output>
                </test-case>
                <test-case id="0-2542" name="transform.case072" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case072" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1727977579" result="Passed" start-time="2025-01-14T17:31:24.5871231Z" end-time="2025-01-14T17:31:24.5873268Z" duration="0.000204" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(20.55)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(20.55)'
]]></output>
                </test-case>
                <test-case id="0-2543" name="transform.case073" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case073" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1165663904" result="Passed" start-time="2025-01-14T17:31:24.5873365Z" end-time="2025-01-14T17:31:24.5875095Z" duration="0.000173" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Cars)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(Cars)'
]]></output>
                </test-case>
                <test-case id="0-2544" name="transform.case074" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case074" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1600898777" result="Passed" start-time="2025-01-14T17:31:24.5875172Z" end-time="2025-01-14T17:31:24.5876776Z" duration="0.000160" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Employment)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(Employment)'
]]></output>
                </test-case>
                <test-case id="0-2545" name="transform.case075" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case075" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="992856344" result="Passed" start-time="2025-01-14T17:31:24.5876847Z" end-time="2025-01-14T17:31:24.5878738Z" duration="0.000189" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Qualifications)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(Qualifications)'
]]></output>
                </test-case>
                <test-case id="0-2546" name="transform.case076" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case076" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1018079424" result="Passed" start-time="2025-01-14T17:31:24.5878818Z" end-time="2025-01-14T17:31:24.5880537Z" duration="0.000172" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Coca&quot; &amp; &quot;ca&quot;)';&#xA; result: error T0411" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0411.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore("Coca" & "ca")'
]]></output>
                </test-case>
                <test-case id="0-2547" name="transform.case077" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case077" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="192188867" result="Passed" start-time="2025-01-14T17:31:24.5880611Z" end-time="2025-01-14T17:31:24.5882251Z" duration="0.000164" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(Salary,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore(Salary,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2548" name="transform.case078" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case078" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1064932655" result="Passed" start-time="2025-01-14T17:31:24.5882328Z" end-time="2025-01-14T17:31:24.5884481Z" duration="0.000216" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(22,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore(22,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2549" name="transform.case079" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case079" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="511708645" result="Passed" start-time="2025-01-14T17:31:24.5884729Z" end-time="2025-01-14T17:31:24.5887771Z" duration="0.000304" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(22.55,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore(22.55,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2550" name="transform.case080" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case080" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1304573139" result="Passed" start-time="2025-01-14T17:31:24.5887856Z" end-time="2025-01-14T17:31:24.5890828Z" duration="0.000297" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;22&quot;,2)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore("22",2)'
]]></output>
                </test-case>
                <test-case id="0-2551" name="transform.case081" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case081" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2127931309" result="Passed" start-time="2025-01-14T17:31:24.5890935Z" end-time="2025-01-14T17:31:24.5893524Z" duration="0.000259" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;22.55&quot;,5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore("22.55",5)'
]]></output>
                </test-case>
                <test-case id="0-2552" name="transform.case082" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case082" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2100263902" result="Passed" start-time="2025-01-14T17:31:24.5893659Z" end-time="2025-01-14T17:31:24.5897748Z" duration="0.000410" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(Employment,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore(Employment,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2553" name="transform.case083" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case083" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2027437561" result="Passed" start-time="2025-01-14T17:31:24.5897859Z" end-time="2025-01-14T17:31:24.5900409Z" duration="0.000255" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(Qualifications,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore(Qualifications,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2554" name="transform.case084" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case084" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1779172723" result="Passed" start-time="2025-01-14T17:31:24.5900519Z" end-time="2025-01-14T17:31:24.5903194Z" duration="0.000268" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Coca&quot; &amp; &quot;ca&quot;)';&#xA; result: error T0411" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0411.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter("Coca" & "ca")'
]]></output>
                </test-case>
                <test-case id="0-2555" name="transform.case085" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case085" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="975694327" result="Passed" start-time="2025-01-14T17:31:24.5903294Z" end-time="2025-01-14T17:31:24.5906303Z" duration="0.000301" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(Salary,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter(Salary,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2556" name="transform.case086" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case086" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="366329094" result="Passed" start-time="2025-01-14T17:31:24.5906417Z" end-time="2025-01-14T17:31:24.5909271Z" duration="0.000286" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(22,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter(22,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2557" name="transform.case087" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case087" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="574169717" result="Passed" start-time="2025-01-14T17:31:24.5909370Z" end-time="2025-01-14T17:31:24.5912130Z" duration="0.000276" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(22.55,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter(22.55,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2558" name="transform.case088" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case088" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="187336356" result="Passed" start-time="2025-01-14T17:31:24.5912234Z" end-time="2025-01-14T17:31:24.5914899Z" duration="0.000267" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;22&quot;,2)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter("22",2)'
]]></output>
                </test-case>
                <test-case id="0-2559" name="transform.case089" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case089" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1321419475" result="Passed" start-time="2025-01-14T17:31:24.5914999Z" end-time="2025-01-14T17:31:24.5917613Z" duration="0.000261" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;22.55&quot;,5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter("22.55",5)'
]]></output>
                </test-case>
                <test-case id="0-2560" name="transform.case090" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case090" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="286559919" result="Passed" start-time="2025-01-14T17:31:24.5917704Z" end-time="2025-01-14T17:31:24.5920535Z" duration="0.000283" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(Employment,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter(Employment,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2561" name="transform.case091" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case091" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="578184807" result="Passed" start-time="2025-01-14T17:31:24.5920633Z" end-time="2025-01-14T17:31:24.5923657Z" duration="0.000303" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(Qualifications,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter(Qualifications,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2562" name="transform.case092" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case092" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="896883825" result="Passed" start-time="2025-01-14T17:31:24.5923781Z" end-time="2025-01-14T17:31:24.5926205Z" duration="0.000243" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Coca&quot; &amp; &quot;ca&quot;, 2, 4, 5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring("Coca" & "ca", 2, 4, 5)'
]]></output>
                </test-case>
                <test-case id="0-2563" name="transform.case093" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case093" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2140771073" result="Passed" start-time="2025-01-14T17:31:24.5926294Z" end-time="2025-01-14T17:31:24.5929248Z" duration="0.000296" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Coca&quot;, &quot;Mr&quot;, 4)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring("Coca", "Mr", 4)'
]]></output>
                </test-case>
                <test-case id="0-2564" name="transform.case094" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case094" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1267615739" result="Passed" start-time="2025-01-14T17:31:24.5929352Z" end-time="2025-01-14T17:31:24.5932034Z" duration="0.000268" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Coca&quot;, 3, &quot;Whoops&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring("Coca", 3, "Whoops")'
]]></output>
                </test-case>
                <test-case id="0-2565" name="transform.case095" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case095" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="896840495" result="Passed" start-time="2025-01-14T17:31:24.5932133Z" end-time="2025-01-14T17:31:24.5934704Z" duration="0.000257" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(Salary,2,4)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring(Salary,2,4)'
]]></output>
                </test-case>
                <test-case id="0-2566" name="transform.case096" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case096" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="879359088" result="Passed" start-time="2025-01-14T17:31:24.5934811Z" end-time="2025-01-14T17:31:24.5937787Z" duration="0.000298" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Hello&quot;,&quot;World&quot;,5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring("Hello","World",5)'
]]></output>
                </test-case>
                <test-case id="0-2567" name="transform.case097" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case097" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1577425798" result="Passed" start-time="2025-01-14T17:31:24.5937897Z" end-time="2025-01-14T17:31:24.5975854Z" duration="0.003796" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Hello&quot;,5,&quot;World&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring("Hello",5,"World")'
]]></output>
                </test-case>
                <test-case id="0-2568" name="transform.case098" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case098" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1742216289" result="Passed" start-time="2025-01-14T17:31:24.5976113Z" end-time="2025-01-14T17:31:24.5977795Z" duration="0.000168" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Hello World&quot;,5.5,5)';&#xA; result: &quot; Worl&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("Hello World",5.5,5)'
Result: '" Worl"'
Expected: '" Worl"'
]]></output>
                </test-case>
                <test-case id="0-2569" name="transform.case099" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case099" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="88271679" result="Passed" start-time="2025-01-14T17:31:24.5978127Z" end-time="2025-01-14T17:31:24.5981894Z" duration="0.000377" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(Employment,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring(Employment,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2570" name="transform.case100" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case100" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="199890390" result="Passed" start-time="2025-01-14T17:31:24.5982007Z" end-time="2025-01-14T17:31:24.5985383Z" duration="0.000338" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(Qualifications,6,5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring(Qualifications,6,5)'
]]></output>
                </test-case>
                <test-case id="0-2571" name="transform.case101" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case101" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1588732699" result="Passed" start-time="2025-01-14T17:31:24.5985725Z" end-time="2025-01-14T17:31:24.5986563Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'detail.contents';&#xA; result: &quot;stuff&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'detail.contents'
Result: '"stuff"'
Expected: '"stuff"'
]]></output>
                </test-case>
                <test-case id="0-2572" name="transform.case102" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case102" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="986787824" result="Passed" start-time="2025-01-14T17:31:24.5986643Z" end-time="2025-01-14T17:31:24.5987555Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'detail.meta';&#xA; result: &quot;boo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'detail.meta'
Result: '"boo"'
Expected: '"boo"'
]]></output>
                </test-case>
                <test-case id="0-2573" name="transform.case103" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case103" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="815180361" result="Passed" start-time="2025-01-14T17:31:24.5987659Z" end-time="2025-01-14T17:31:24.5988290Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'detail.meta';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is 'detail.meta'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2574" name="transforms.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1236401264" result="Passed" start-time="2025-01-14T17:31:24.5988405Z" end-time="2025-01-14T17:31:24.6014586Z" duration="0.002618" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |Account.Order.Product|{&quot;Total&quot;:Price*Quantity},[&quot;Description&quot;, &quot;SKU&quot;]|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;Price&quot;:34.45,&quot;Quantity&quot;:2,&quot;Total&quot;:68.9},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;Price&quot;:21.67,&quot;Quantity&quot;:1,&quot;Total&quot;:21.67}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;Price&quot;:34.45,&quot;Quantity&quot;:4,&quot;Total&quot;:137.8},{&quot;ProductID&quot;:345664,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Price&quot;:107.99,&quot;Quantity&quot;:1,&quot;Total&quot;:107.99}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |Account.Order.Product|{"Total":Price*Quantity},["Description", "SKU"]|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"Price":21.67,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":4,"Total":137.8},{"ProductID":345664,"Product Name":"Cloak","Price":107.99,"Quantity":1,"Total":107.99}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"Price":21.67,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":4,"Total":137.8},{"ProductID":345664,"Product Name":"Cloak","Price":107.99,"Quantity":1,"Total":107.99}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2575" name="transforms.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1855911778" result="Passed" start-time="2025-01-14T17:31:24.6014803Z" end-time="2025-01-14T17:31:24.6017630Z" duration="0.000283" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order ~&gt; |Product|{&quot;Total&quot;:Price*Quantity},[&quot;Description&quot;, &quot;SKU&quot;]|';&#xA; result: [{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;Price&quot;:34.45,&quot;Quantity&quot;:2,&quot;Total&quot;:68.9},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;Price&quot;:21.67,&quot;Quantity&quot;:1,&quot;Total&quot;:21.67}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;Price&quot;:34.45,&quot;Quantity&quot;:4,&quot;Total&quot;:137.8},{&quot;ProductID&quot;:345664,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Price&quot;:107.99,&quot;Quantity&quot;:1,&quot;Total&quot;:107.99}]}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order ~> |Product|{"Total":Price*Quantity},["Description", "SKU"]|'
Result: '[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"Price":21.67,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":4,"Total":137.8},{"ProductID":345664,"Product Name":"Cloak","Price":107.99,"Quantity":1,"Total":107.99}]}]'
Expected: '[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"Price":21.67,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":4,"Total":137.8},{"ProductID":345664,"Product Name":"Cloak","Price":107.99,"Quantity":1,"Total":107.99}]}]'
]]></output>
                </test-case>
                <test-case id="0-2576" name="transforms.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2040014771" result="Passed" start-time="2025-01-14T17:31:24.6017749Z" end-time="2025-01-14T17:31:24.6019822Z" duration="0.000207" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |Account.Order.Product|{&quot;Total&quot;:Price*Quantity, &quot;Price&quot;: Price * 1.2}|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;0406654608&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},&quot;Price&quot;:41.34,&quot;Quantity&quot;:2,&quot;Total&quot;:68.9},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;SKU&quot;:&quot;0406634348&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Orange&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.6},&quot;Price&quot;:26.004,&quot;Quantity&quot;:1,&quot;Total&quot;:21.67}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;040657863&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},&quot;Price&quot;:41.34,&quot;Quantity&quot;:4,&quot;Total&quot;:137.8},{&quot;ProductID&quot;:345664,&quot;SKU&quot;:&quot;0406654603&quot;,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Black&quot;,&quot;Width&quot;:30,&quot;Height&quot;:20,&quot;Depth&quot;:210,&quot;Weight&quot;:2},&quot;Price&quot;:129.588,&quot;Quantity&quot;:1,&quot;Total&quot;:107.99}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |Account.Order.Product|{"Total":Price*Quantity, "Price": Price * 1.2}|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":41.34,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":26.004,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":41.34,"Quantity":4,"Total":137.8},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":129.588,"Quantity":1,"Total":107.99}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":41.34,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":26.004,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":41.34,"Quantity":4,"Total":137.8},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":129.588,"Quantity":1,"Total":107.99}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2577" name="transforms.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="773233993" result="Passed" start-time="2025-01-14T17:31:24.6019915Z" end-time="2025-01-14T17:31:24.6021033Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |Account.Order.Product|{},&quot;Description&quot;|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;0406654608&quot;,&quot;Price&quot;:34.45,&quot;Quantity&quot;:2},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;SKU&quot;:&quot;0406634348&quot;,&quot;Price&quot;:21.67,&quot;Quantity&quot;:1}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;040657863&quot;,&quot;Price&quot;:34.45,&quot;Quantity&quot;:4},{&quot;ProductID&quot;:345664,&quot;SKU&quot;:&quot;0406654603&quot;,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Price&quot;:107.99,&quot;Quantity&quot;:1}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |Account.Order.Product|{},"Description"|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Price":107.99,"Quantity":1}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Price":107.99,"Quantity":1}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2578" name="transforms.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="406442491" result="Passed" start-time="2025-01-14T17:31:24.6021098Z" end-time="2025-01-14T17:31:24.6022080Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |Account.Order.Product|nomatch,&quot;Description&quot;|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;0406654608&quot;,&quot;Price&quot;:34.45,&quot;Quantity&quot;:2},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;SKU&quot;:&quot;0406634348&quot;,&quot;Price&quot;:21.67,&quot;Quantity&quot;:1}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;040657863&quot;,&quot;Price&quot;:34.45,&quot;Quantity&quot;:4},{&quot;ProductID&quot;:345664,&quot;SKU&quot;:&quot;0406654603&quot;,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Price&quot;:107.99,&quot;Quantity&quot;:1}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |Account.Order.Product|nomatch,"Description"|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Price":107.99,"Quantity":1}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Price":107.99,"Quantity":1}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2579" name="transforms.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="567945993" result="Passed" start-time="2025-01-14T17:31:24.6022139Z" end-time="2025-01-14T17:31:24.6023572Z" duration="0.000143" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |(Account.Order.Product)[0]|{&quot;Description&quot;:&quot;blah&quot;}|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;0406654608&quot;,&quot;Description&quot;:&quot;blah&quot;,&quot;Price&quot;:34.45,&quot;Quantity&quot;:2},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;SKU&quot;:&quot;0406634348&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Orange&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.6},&quot;Price&quot;:21.67,&quot;Quantity&quot;:1}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;040657863&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},&quot;Price&quot;:34.45,&quot;Quantity&quot;:4},{&quot;ProductID&quot;:345664,&quot;SKU&quot;:&quot;0406654603&quot;,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Black&quot;,&quot;Width&quot;:30,&quot;Height&quot;:20,&quot;Depth&quot;:210,&quot;Weight&quot;:2},&quot;Price&quot;:107.99,&quot;Quantity&quot;:1}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |(Account.Order.Product)[0]|{"Description":"blah"}|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":"blah","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":107.99,"Quantity":1}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":"blah","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":107.99,"Quantity":1}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2580" name="transforms.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="983748918" result="Passed" start-time="2025-01-14T17:31:24.6023696Z" end-time="2025-01-14T17:31:24.6024990Z" duration="0.000130" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |foo.bar|{&quot;Description&quot;:&quot;blah&quot;}|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;0406654608&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},&quot;Price&quot;:34.45,&quot;Quantity&quot;:2},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;SKU&quot;:&quot;0406634348&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Orange&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.6},&quot;Price&quot;:21.67,&quot;Quantity&quot;:1}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;040657863&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},&quot;Price&quot;:34.45,&quot;Quantity&quot;:4},{&quot;ProductID&quot;:345664,&quot;SKU&quot;:&quot;0406654603&quot;,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Black&quot;,&quot;Width&quot;:30,&quot;Height&quot;:20,&quot;Depth&quot;:210,&quot;Weight&quot;:2},&quot;Price&quot;:107.99,&quot;Quantity&quot;:1}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |foo.bar|{"Description":"blah"}|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":107.99,"Quantity":1}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":107.99,"Quantity":1}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2581" name="transforms.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2031770934" result="Passed" start-time="2025-01-14T17:31:24.6025054Z" end-time="2025-01-14T17:31:24.6025934Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account ~&gt; |Order|{&quot;Product&quot;:&quot;blah&quot;},nomatch|';&#xA; result: {&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;blah&quot;},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;blah&quot;}]}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account ~> |Order|{"Product":"blah"},nomatch|'
Result: '{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":"blah"},{"OrderID":"order104","Product":"blah"}]}'
Expected: '{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":"blah"},{"OrderID":"order104","Product":"blah"}]}'
]]></output>
                </test-case>
                <test-case id="0-2582" name="transforms.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1625630236" result="Passed" start-time="2025-01-14T17:31:24.6026005Z" end-time="2025-01-14T17:31:24.6026892Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo ~&gt; |foo.bar|{&quot;Description&quot;:&quot;blah&quot;}|';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'foo ~> |foo.bar|{"Description":"blah"}|'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2583" name="transforms.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1777571451" result="Passed" start-time="2025-01-14T17:31:24.6026978Z" end-time="2025-01-14T17:31:24.6030978Z" duration="0.000400" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account ~&gt; |Order|5|';&#xA; result: error T2011" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2011.
Actually thrown T2011.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account ~> |Order|5|'
]]></output>
                </test-case>
                <test-case id="0-2584" name="transforms.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="653308499" result="Passed" start-time="2025-01-14T17:31:24.6031080Z" end-time="2025-01-14T17:31:24.6034284Z" duration="0.000321" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account ~&gt; |Order|{},5|';&#xA; result: error T2012" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2012.
Actually thrown T2012.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account ~> |Order|{},5|'
]]></output>
                </test-case>
                <test-case id="0-2585" name="transforms.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1179296767" result="Passed" start-time="2025-01-14T17:31:24.6034399Z" end-time="2025-01-14T17:31:24.6035579Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account ~&gt; |Order|{&quot;Product&quot;:&quot;blah&quot;},nomatch|';&#xA; result: {&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;blah&quot;},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;blah&quot;}]}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account ~> |Order|{"Product":"blah"},nomatch|'
Result: '{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":"blah"},{"OrderID":"order104","Product":"blah"}]}'
Expected: '{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":"blah"},{"OrderID":"order104","Product":"blah"}]}'
]]></output>
                </test-case>
                <test-case id="0-2586" name="transforms.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="122879757" result="Passed" start-time="2025-01-14T17:31:24.6035653Z" end-time="2025-01-14T17:31:24.6037803Z" duration="0.000215" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '{} ~&gt; |$|['one', 'two', 'three']|';&#xA; result: error T2011" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2011.
Actually thrown T2011.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '{} ~> |$|['one', 'two', 'three']|'
]]></output>
                </test-case>
                <test-case id="0-2587" name="transforms.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1429151221" result="Passed" start-time="2025-01-14T17:31:24.6037901Z" end-time="2025-01-14T17:31:24.6038898Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; | ** ['hi'] | {'hello': hi}, ['hi'] |';&#xA; result: {&quot;hello&quot;:&quot;world&quot;,&quot;bye&quot;:null}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> | ** ['hi'] | {'hello': hi}, ['hi'] |'
Result: '{"bye":null,"hello":"world"}'
Expected: '{"hello":"world","bye":null}'
]]></output>
                </test-case>
                <test-case id="0-2588" name="transforms.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1464447363" result="Passed" start-time="2025-01-14T17:31:24.6038984Z" end-time="2025-01-14T17:31:24.6039546Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; | ** [hi] | {'hello': hi}, ['hi'] |';&#xA; result: {&quot;bye&quot;:null,&quot;hello&quot;:&quot;world&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> | ** [hi] | {'hello': hi}, ['hi'] |'
Result: '{"bye":null,"hello":"world"}'
Expected: '{"bye":null,"hello":"world"}'
]]></output>
                </test-case>
                <test-case id="0-2589" name="variables.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="12577602" result="Passed" start-time="2025-01-14T17:31:24.6039602Z" end-time="2025-01-14T17:31:24.6040250Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$price.foo.bar';&#xA; result: 45" />
                  </properties>
                  <output><![CDATA[Expr is '$price.foo.bar'
Result: '45'
Expected: '45'
]]></output>
                </test-case>
                <test-case id="0-2590" name="variables.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="261014317" result="Passed" start-time="2025-01-14T17:31:24.6040321Z" end-time="2025-01-14T17:31:24.6041058Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$price.foo.bar';&#xA; result: 45" />
                  </properties>
                  <output><![CDATA[Expr is '$price.foo.bar'
Result: '45'
Expected: '45'
]]></output>
                </test-case>
                <test-case id="0-2591" name="variables.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="501915269" result="Passed" start-time="2025-01-14T17:31:24.6041137Z" end-time="2025-01-14T17:31:24.6041852Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$var[1]';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$var[1]'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-2592" name="variables.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1441039194" result="Passed" start-time="2025-01-14T17:31:24.6041925Z" end-time="2025-01-14T17:31:24.6042463Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.foo.bar';&#xA; result: 42" />
                  </properties>
                  <output><![CDATA[Expr is '$.foo.bar'
Result: '42'
Expected: '42'
]]></output>
                </test-case>
                <test-case id="0-2593" name="variables.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2071891338" result="Passed" start-time="2025-01-14T17:31:24.6042523Z" end-time="2025-01-14T17:31:24.6042934Z" duration="0.000041" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$a := 5';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$a := 5'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2594" name="variables.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1827808663" result="Passed" start-time="2025-01-14T17:31:24.6043232Z" end-time="2025-01-14T17:31:24.6044077Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$a := $b := 5';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$a := $b := 5'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2595" name="variables.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="395092539" result="Passed" start-time="2025-01-14T17:31:24.6044186Z" end-time="2025-01-14T17:31:24.6044857Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($a := $b := 5; $a)';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '($a := $b := 5; $a)'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2596" name="variables.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1106300047" result="Passed" start-time="2025-01-14T17:31:24.6045097Z" end-time="2025-01-14T17:31:24.6045821Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($a := $b := 5; $b)';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '($a := $b := 5; $b)'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2597" name="variables.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1734690153" result="Passed" start-time="2025-01-14T17:31:24.6045918Z" end-time="2025-01-14T17:31:24.6046836Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $a := 5; $a := $a + 2; $a )';&#xA; result: 7" />
                  </properties>
                  <output><![CDATA[Expr is '( $a := 5; $a := $a + 2; $a )'
Result: '7'
Expected: '7'
]]></output>
                </test-case>
                <test-case id="0-2598" name="variables.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2045531812" result="Passed" start-time="2025-01-14T17:31:24.6046929Z" end-time="2025-01-14T17:31:24.6047559Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3].$v';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2,3].$v'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2599" name="variables.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="704058282" result="Passed" start-time="2025-01-14T17:31:24.6047639Z" end-time="2025-01-14T17:31:24.6048260Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $foo := &quot;defined&quot;; ( $foo := nothing ); $foo )';&#xA; result: &quot;defined&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '( $foo := "defined"; ( $foo := nothing ); $foo )'
Result: '"defined"'
Expected: '"defined"'
]]></output>
                </test-case>
                <test-case id="0-2600" name="variables.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="113497256" result="Passed" start-time="2025-01-14T17:31:24.6048349Z" end-time="2025-01-14T17:31:24.6048943Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $foo := &quot;defined&quot;; ( $foo := nothing; $foo ) )';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '( $foo := "defined"; ( $foo := nothing; $foo ) )'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2601" name="variables.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1588137273" result="Passed" start-time="2025-01-14T17:31:24.6049019Z" end-time="2025-01-14T17:31:24.6096594Z" duration="0.004758" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($a := [1,2]; $a[1]:=3; $a)';&#xA; result: error S0212" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0212.
Actually thrown S0212.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '($a := [1,2]; $a[1]:=3; $a)'
]]></output>
                </test-case>
                <test-case id="0-2602" name="wildcards.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="597456225" result="Passed" start-time="2025-01-14T17:31:24.6096858Z" end-time="2025-01-14T17:31:24.6100071Z" duration="0.000321" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*';&#xA; result: [42,{&quot;baz&quot;:{&quot;fud&quot;:&quot;hello&quot;}},{&quot;baz&quot;:{&quot;fud&quot;:&quot;world&quot;}},{&quot;bazz&quot;:&quot;gotcha&quot;},&quot;here&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*'
Result: '[42,{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"},"here"]'
Expected: '[42,{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"},"here"]'
]]></output>
                </test-case>
                <test-case id="0-2603" name="wildcards.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="976660976" result="Passed" start-time="2025-01-14T17:31:24.6100195Z" end-time="2025-01-14T17:31:24.6101378Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.baz';&#xA; result: [{&quot;fud&quot;:&quot;hello&quot;},{&quot;fud&quot;:&quot;world&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.baz'
Result: '[{"fud":"hello"},{"fud":"world"}]'
Expected: '[{"fud":"hello"},{"fud":"world"}]'
]]></output>
                </test-case>
                <test-case id="0-2604" name="wildcards.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="311818255" result="Passed" start-time="2025-01-14T17:31:24.6101475Z" end-time="2025-01-14T17:31:24.6102326Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.bazz';&#xA; result: &quot;gotcha&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.bazz'
Result: '"gotcha"'
Expected: '"gotcha"'
]]></output>
                </test-case>
                <test-case id="0-2605" name="wildcards.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1863324087" result="Passed" start-time="2025-01-14T17:31:24.6102405Z" end-time="2025-01-14T17:31:24.6103085Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.baz.*';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.baz.*'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2606" name="wildcards.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1141143485" result="Passed" start-time="2025-01-14T17:31:24.6103162Z" end-time="2025-01-14T17:31:24.6104152Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.baz.*';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.baz.*'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2607" name="wildcards.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1285083541" result="Passed" start-time="2025-01-14T17:31:24.6104242Z" end-time="2025-01-14T17:31:24.6104925Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.baz.*';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.baz.*'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2608" name="wildcards.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="791036297" result="Passed" start-time="2025-01-14T17:31:24.6104987Z" end-time="2025-01-14T17:31:24.6106094Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '*[type=&quot;home&quot;]';&#xA; result: [{&quot;type&quot;:&quot;home&quot;,&quot;number&quot;:&quot;0203 544 1234&quot;},{&quot;type&quot;:&quot;home&quot;,&quot;address&quot;:[&quot;freddy@my-social.com&quot;,&quot;frederic.smith@very-serious.com&quot;]}]" />
                  </properties>
                  <output><![CDATA[Expr is '*[type="home"]'
Result: '[{"type":"home","number":"0203 544 1234"},{"type":"home","address":["freddy@my-social.com","frederic.smith@very-serious.com"]}]'
Expected: '[{"type":"home","number":"0203 544 1234"},{"type":"home","address":["freddy@my-social.com","frederic.smith@very-serious.com"]}]'
]]></output>
                </test-case>
                <test-case id="0-2609" name="wildcards.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2070744592" result="Passed" start-time="2025-01-14T17:31:24.6106164Z" end-time="2025-01-14T17:31:24.6107261Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account[$$.Account.&quot;Account Name&quot; = &quot;Firefly&quot;].*[OrderID=&quot;order104&quot;].Product.Price';&#xA; result: [34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account[$$.Account."Account Name" = "Firefly"].*[OrderID="order104"].Product.Price'
Result: '[34.45,107.99]'
Expected: '[34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-2610" name="wildcards.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1083163203" result="Passed" start-time="2025-01-14T17:31:24.6107328Z" end-time="2025-01-14T17:31:24.6108237Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account[$$.Account.`Account Name` = &quot;Firefly&quot;].*[OrderID=&quot;order104&quot;].Product.Price';&#xA; result: [34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account[$$.Account.`Account Name` = "Firefly"].*[OrderID="order104"].Product.Price'
Result: '[34.45,107.99]'
Expected: '[34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-2611" name="wildcards.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1740578748" result="Passed" start-time="2025-01-14T17:31:24.6108303Z" end-time="2025-01-14T17:31:24.6108855Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '*';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '*'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
              </test-suite>
            </test-suite>
          </test-suite>
        </test-suite>
      </test-suite>
    </test-suite>
  </test-suite>
</test-run>